[{"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js":"3","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js":"4","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js":"5","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js":"6","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js":"7","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js":"8","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js":"9","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js":"10","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js":"11","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js":"12","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js":"13","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js":"14","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js":"15","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js":"16","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js":"17","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js":"18","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js":"19","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js":"20","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js":"21","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\FlappyBird.js":"22"},{"size":197,"mtime":1607012420109,"results":"23","hashOfConfig":"24"},{"size":746,"mtime":1607424471833,"results":"25","hashOfConfig":"24"},{"size":896,"mtime":1607072319019,"results":"26","hashOfConfig":"24"},{"size":820,"mtime":1607072739385,"results":"27","hashOfConfig":"24"},{"size":372,"mtime":1607072332112,"results":"28","hashOfConfig":"24"},{"size":1928,"mtime":1607072607427,"results":"29","hashOfConfig":"24"},{"size":1430,"mtime":1607072225070,"results":"30","hashOfConfig":"24"},{"size":494,"mtime":1607408914680,"results":"31","hashOfConfig":"24"},{"size":392,"mtime":1607072637770,"results":"32","hashOfConfig":"24"},{"size":143,"mtime":1607071297313,"results":"33","hashOfConfig":"24"},{"size":197,"mtime":1607597337995,"results":"34","hashOfConfig":"35"},{"size":1443,"mtime":1607597665624,"results":"36","hashOfConfig":"35"},{"size":392,"mtime":1607072637770,"results":"37","hashOfConfig":"35"},{"size":3643,"mtime":1607597337863,"results":"38","hashOfConfig":"35"},{"size":5576,"mtime":1607597337819,"results":"39","hashOfConfig":"35"},{"size":673,"mtime":1607597337529,"results":"40","hashOfConfig":"35"},{"size":2425,"mtime":1607597337690,"results":"41","hashOfConfig":"35"},{"size":4201,"mtime":1607597337750,"results":"42","hashOfConfig":"35"},{"size":5034,"mtime":1607597897958,"results":"43","hashOfConfig":"35"},{"size":2331,"mtime":1607597665963,"results":"44","hashOfConfig":"35"},{"size":4707,"mtime":1607597709696,"results":"45","hashOfConfig":"35"},{"size":5701,"mtime":1607597337656,"results":"46","hashOfConfig":"35"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1uw3rlt",{"filePath":"50","messages":"51","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1it9hws",{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"77"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"77"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"77"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"77"},"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js",[],["98","99"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js",["100","101","102","103","104","105","106","107"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js",["108"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js",["109","110","111","112"],"import { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Button, Grid, Result } from 'components/common';\r\n\r\nconst Snake = css`\r\nbackground:orange;\r\nborder-radius:50%;\r\n`\r\nconst Apple = css`\r\nbackground: lime;\r\nborder-radius:50%;\r\n`\r\nconst Box = styled.div`\r\nwidth:10px;\r\nheight:10px;\r\n${({ isSnake }) => isSnake && Snake};\r\n${({ isApple }) => isApple && Apple};\r\n`\r\nlet timer = null\r\nconst SnakeGame = () => {\r\n    const [snake, setSnake] = useState([0, 1, 2]);\r\n    const [apple, setApple] = useState('')\r\n    const [direction, setDirection] = useState(1)\r\n    const interval = 100;\r\n    const width = 40\r\n    const [appleConsumed, setAppleConsumed] = useState(0);\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const generateApple = () => {\r\n        const newApple = Math.floor(Math.random() * ((width * width) - 1));\r\n        if (snake.includes(newApple)) {\r\n            generateApple()\r\n        } else {\r\n            setApple(newApple)\r\n        }\r\n    }\r\n    const restartGame = () => {\r\n        setSnake([0, 1, 2])\r\n        setDirection(1)\r\n        setAppleConsumed(0)\r\n        setGameOver(false)\r\n        generateApple()\r\n    }\r\n    const stopGame = () => {\r\n        clearTimeout(timer)\r\n        setApple('')\r\n        window.removeEventListener('keydown', keyHandler)\r\n    }\r\n    const isSnakeBody = (value) => snake.includes(value) && snake[snake.length - 2] !== value && console.log(snake[snake.length - 2] !== value);\r\n    const isOutOfScreen = (value, direction) => {\r\n        if (direction == 1) {\r\n            return value % width === 0\r\n        } else if (direction === -1) {\r\n            return (value + 1) % width === 0\r\n        }\r\n        return value >= (width * width) || value < 0\r\n    }\r\n    const moveSnake = () => {\r\n        let newSnakePos = [...snake];\r\n        if (!appleConsumed) {\r\n            newSnakePos.shift();\r\n        } else {\r\n            setAppleConsumed(prev => prev - 1)\r\n        }\r\n        let nextCell = newSnakePos[newSnakePos.length - 1] + direction\r\n        if (isSnakeBody(nextCell) || isOutOfScreen(nextCell, direction)) {\r\n            setGameOver(true)\r\n            return\r\n        } else {\r\n            newSnakePos.push(nextCell)\r\n        }\r\n        if (newSnakePos.includes(apple)) {\r\n            setAppleConsumed(prev => prev + 1)\r\n            generateApple()\r\n        }\r\n        setSnake(newSnakePos)\r\n    }\r\n    useEffect(() => {\r\n        if(gameOver) {\r\n            clearTimeout(timer)\r\n            return\r\n        }\r\n        timer = setTimeout(() => {\r\n            if (gameOver) clearTimeout(timer)\r\n            if (apple !== '') moveSnake()\r\n        }, interval);\r\n        return () => clearTimeout(timer)\r\n    }, [snake, direction, appleConsumed, gameOver])\r\n    const keyHandler = (e) => {\r\n        switch (e.key) {\r\n            case \"ArrowRight\":\r\n                if (direction !== -1)\r\n                    setDirection(1);\r\n                break;\r\n            case \"ArrowLeft\":\r\n                if (direction !== 1)\r\n                    setDirection(-1);\r\n                break;\r\n            case \"ArrowUp\":\r\n                if (direction !== width)\r\n                    setDirection(-width);\r\n                break;\r\n            case \"ArrowDown\":\r\n                if (direction !== -width)\r\n                    setDirection(width);\r\n                break;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (!gameOver)\r\n            window.addEventListener('keydown', keyHandler)\r\n        return () => window.removeEventListener('keydown', keyHandler)\r\n    }, [direction, gameOver, snake])\r\n    return <div><Grid color={'#253243'}>\r\n        {[...new Array(width * width)].map((e, i) => <Box\r\n            key={i}\r\n            isSnake={snake.includes(i)}\r\n            isApple={i === apple} ></Box>)}\r\n    </Grid>\r\n        <Button onClick={apple ? stopGame : restartGame}>{apple ? 'STOP' : 'START'}</Button>\r\n        {gameOver ? <Result>GAME OVER!!!\r\n            <div>your score : {snake.length - 3}</div>\r\n        </Result> : ''}\r\n    </div>\r\n}\r\n\r\nexport default SnakeGame\r\n",["113","114"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js",["115","116","117"],"import { Button, Grid, Result } from 'components/common'\r\nimport React, { useEffect, useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\n\r\nconst Bomb = css`\r\n    background:orange;\r\n    font-size: 48px;\r\n`\r\nconst Open = css`\r\n    background:white;\r\n    color:black;\r\n    border: 3px inset #1C6EA4;\r\n`\r\nconst Empty = css`\r\n    background: #e1e1e1;\r\n    border-color:#b1b1b1;\r\n`\r\nconst Dash = css`\r\n    background: red;\r\n`\r\nconst Block = styled.div`\r\n    height: 40px;\r\n    width: 40px;\r\n    display:flex;\r\n    font-family:sans-serif;\r\n    align-items:center;\r\n    justify-content:center;\r\n    font-size:24px;\r\n    cursor:pointer;\r\n    box-sizing: border-box;\r\n    border: 6px outset #1C6EA4;    \r\n    color:white;\r\n    ${({ show }) => show && Open};\r\n    ${({ show, isBomb }) => show && isBomb && Bomb};\r\n    ${({ show, empty }) => show && empty && Empty};\r\n    ${({ dash }) => dash && Dash};\r\n`\r\n// const Result = styled.div`\r\n//     font-size: 24px;\r\n//     padding: 10px;\r\n// `\r\nconst Minesweeper = () => {\r\n    let width = 10;\r\n    let bombCount = 20;\r\n\r\n    const [squares, setSquares] = useState([])\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const startGame = () => {\r\n        setGameOver(false)\r\n        const bombsArray = Array(bombCount).fill({ value: '*' });\r\n        const emptyArray = Array((width * width) - bombCount).fill({ value: '' });\r\n        const gamesArray = [...emptyArray, ...bombsArray];\r\n        const shuffledArray = gamesArray.sort(() => Math.random() - 0.5)\r\n\r\n        for (let i = 0; i < shuffledArray.length; i++) {\r\n            let total = 0;\r\n            const isLeftEdge = (i % width === 0);\r\n            const isRightEdge = (i % width === width - 1);\r\n            // layout to check\r\n            // 7 8 9\r\n            // 4 _ 6\r\n            // 1 2 3\r\n            if (!shuffledArray[i].value) {\r\n                if (i > 0 && !isLeftEdge && shuffledArray[i - 1].value === '*') total++   //bomb at left (4)\r\n                if (i > 11 && !isLeftEdge && shuffledArray[i - 1 - width].value === '*') total++ //bomb at top left(7)                \r\n                if (i > 9 && shuffledArray[i - width].value === '*') total++ //bomb at top (8)\r\n                if (i > 9 && !isRightEdge && shuffledArray[i + 1 - width].value === '*') total++  //bomb at top right (9)\r\n                if (i < 99 && !isRightEdge && shuffledArray[i + 1].value === '*') total++ //bomb at right(6)                \r\n                if (i < 88 && !isRightEdge && shuffledArray[i + 1 + width].value === '*') total++ //bomb at right bottom(3)\r\n                if (i < 89 && shuffledArray[i + width].value === '*') total++ //bomb at bottom(2)\r\n                if (i < 90 && !isLeftEdge && shuffledArray[i - 1 + width].value === '*') total++ //bomb at left bottom(1)                \r\n                shuffledArray[i] = { value: total || '' };\r\n            }\r\n        }\r\n        setSquares(shuffledArray)\r\n    }\r\n    useEffect(startGame, [])\r\n    const clickHandler = (index) => {\r\n        if (gameOver || squares[index].show || squares[index].flag) return\r\n        if (squares[index].value === '*') {\r\n            let newSquares = [...squares]\r\n            newSquares[index] = { value: '*', dash: true };\r\n            setSquares(newSquares)\r\n            setGameOver(true)\r\n        } else {\r\n            let newSquares = [...squares]\r\n            newSquares[index].show = true;\r\n            setSquares(newSquares)\r\n            if (newSquares[index].value) {\r\n                return\r\n            }\r\n            checkSquares(index)\r\n        }\r\n    }\r\n    const isNotABomb = (cell) => cell.value !== '*'\r\n    const checkSquares = (index) => {\r\n        const isLeftEdge = (index % width === 0);\r\n        const isRightEdge = (index % width === width - 1);\r\n        console.error('initialized again')\r\n        let timer = setTimeout(() => {\r\n            if (index > 0 && !isLeftEdge) { //toward left\r\n                if (isNotABomb(squares[index - 1])) {\r\n                    clickHandler(index - 1)\r\n                }\r\n\r\n            }\r\n            if (index > 9 && !isRightEdge) { //toward upper right\r\n                if (isNotABomb(squares[index + 1 - width])) {\r\n                    clickHandler(index + 1 - width)\r\n                }\r\n\r\n            }\r\n            if (index > 10) { //toward up\r\n                if (isNotABomb(squares[index - width])) {\r\n                    clickHandler(index - width)\r\n                }\r\n\r\n            }\r\n            if (index > 11 && !isLeftEdge) {  //toward upper left\r\n                if (isNotABomb(squares[index - 1 - width])) {\r\n                    clickHandler(index - 1 - width)\r\n                }\r\n\r\n            }\r\n            if (index < 98 && !isRightEdge) { //toward right\r\n                if (isNotABomb(squares[index + 1])) {\r\n                    clickHandler(index + 1)\r\n                }\r\n\r\n            }\r\n            if (index < 90 && !isLeftEdge) { //toward lower left\r\n                if (isNotABomb(squares[index - 1 + width])) {\r\n                    clickHandler(index - 1 + width)\r\n                }\r\n\r\n            }\r\n            if (index < 88 && !isRightEdge) {\r\n                if (isNotABomb(squares[index + 1 + width])) {\r\n                    clickHandler(index + 1 + width)\r\n                }\r\n\r\n            }\r\n            if (index < 89) {\r\n                if (isNotABomb(squares[index + width])) {\r\n                    clickHandler(index + width)\r\n                }\r\n\r\n            }\r\n        }, 10)\r\n    }\r\n    useEffect(() => {\r\n        if (gameOver) {\r\n            let newSquares = [...squares].map(e => ({ ...e, show: true }))\r\n            console.error(newSquares)\r\n            setSquares(newSquares)\r\n        }\r\n    }, [gameOver])\r\n    return (\r\n        <div>\r\n            <Grid color={'#115481'}> \r\n                {squares.map(({ value, show, dash }, i) => <Block key={i}\r\n                    isBomb={value === '*'}\r\n                    dash={dash}\r\n                    show={show}\r\n                    empty={!value}\r\n                    onClick={() => clickHandler(i)}>{show ? value : ''}</Block>)}\r\n            </Grid>\r\n            <Button onClick={startGame}>(RE)START</Button>\r\n            {gameOver ? <Result>GAME OVER!!!</Result> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Minesweeper\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js",["118"],"import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nconst Game = styled.div``\r\nconst Character = styled.div`\r\n    background-color:red;\r\n    height:70px;\r\n    width:40px;\r\n    position: absolute;\r\n    bottom:${({ bottom }) => bottom}px;\r\n    left:${({ left }) => left}px;\r\n`\r\nlet jumpTimer = null\r\nlet slideTimer = null\r\nconst JumpSlide = () => {\r\n    const gravity = 0.9\r\n    const [bottom, setBottom] = useState(0)        \r\n    const [jump, setJump] = useState(false)\r\n    const [left, setLeft] = useState(0)\r\n    const [slide, setSlide] = useState('')\r\n    const keyHandler = (e) => {\r\n        if (e.key === ' ' && bottom <= 0) setJump(true)\r\n        if (e.key === 'ArrowLeft') setSlide('LEFT')\r\n        else if (e.key === 'ArrowRight') setSlide('RIGHT')\r\n        else if(e.key === 'ArrowDown')setSlide('')\r\n    }\r\n    useEffect(() => {\r\n        // if (bottom) {\r\n            if (slide === 'RIGHT') {\r\n                clearTimeout(slideTimer)\r\n                slideTimer = setTimeout(() => {\r\n                    let newLeft = left + 5;\r\n                    setLeft(newLeft)\r\n                }, 20)\r\n                // if (bottom == 0) setSlide('')\r\n            }\r\n            else if (slide === 'LEFT') {\r\n                clearTimeout(slideTimer)\r\n                slideTimer= setTimeout(()=>{\r\n                    let newLeft = left - 5;\r\n                    setLeft(newLeft)\r\n                },20)\r\n                // if (bottom == 0) setSlide('')\r\n            } else {\r\n                setSlide('')\r\n                clearTimeout(slideTimer)\r\n            }\r\n        // } else {\r\n        //     setSlide('')\r\n        //     clearTimeout(slideTimer)\r\n        // }        \r\n    }, [slide, left, bottom])\r\n    useEffect(() => {\r\n        //going up\r\n        if (jump) {\r\n            console.error('going to jumping')\r\n            jumpTimer = setTimeout(() => {\r\n                let newBottom = bottom + 30;\r\n                newBottom *= gravity;\r\n                setBottom(newBottom);\r\n                console.error(bottom * gravity)\r\n            }, 20)\r\n            if (bottom > 250) {\r\n                clearTimeout(jumpTimer)\r\n                setJump(false)\r\n            }\r\n        } else if (bottom > 0) {\r\n            console.error('coming back')\r\n            jumpTimer = setTimeout(() => {\r\n                let newBottom = (bottom - 5) < 0 ? 0 : bottom - 5\r\n                setBottom(newBottom);\r\n            }, 20)\r\n        } else {\r\n            console.error('just clearing', bottom)\r\n            clearTimeout(jumpTimer)\r\n        }\r\n    }, [jump, bottom])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', keyHandler)\r\n        return () => window.removeEventListener('keydown', keyHandler)\r\n    }, [bottom])\r\n    return (\r\n        <Game>\r\n            <Character bottom={bottom} left={left}/>\r\n        </Game>\r\n    )\r\n}\r\n\r\nexport default JumpSlide\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js",["119"],"import React, { useEffect, useState } from 'react'\r\nimport Image1 from 'assets/images/1.jpg'\r\nimport Image2 from 'assets/images/2.jpg'\r\nimport Image3 from 'assets/images/3.jpg'\r\nimport Image4 from 'assets/images/4.jpg'\r\nimport Image5 from 'assets/images/5.jpg'\r\nimport Image6 from 'assets/images/6.jpg'\r\nimport Image7 from 'assets/images/7.jpg'\r\nimport Image8 from 'assets/images/8.jpg'\r\nimport styled, { css } from 'styled-components'\r\nimport { Button, Grid, Result } from 'components/common'\r\n\r\nconst Hide = css`\r\n    transform: rotateY(180deg);\r\n`\r\nconst Show = css`\r\n    transform: rotateY(0);\r\n`\r\nconst Card = styled.div`\r\n  position: relative;\r\n  width: 100px;\r\n  height: 100px;\r\n  text-align: center;\r\n  transition: transform 0.6s;\r\n  transform-style: preserve-3d;\r\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n  ${({ hide }) => hide && Hide};\r\n  ${({ show }) => show && Show};\r\n`\r\nconst Layer = css`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  -webkit-backface-visibility: hidden;\r\n  backface-visibility: hidden;\r\n`\r\nconst Image = styled.img`\r\n  ${Layer};\r\n  left:0;\r\n`\r\nconst Fallback = styled.div`\r\n${Layer};\r\n  background-color: #2980b9;\r\n  color: white;\r\n  transform: rotateY(180deg);\r\n`\r\nconst Time = styled.div`\r\ntext-align:center;\r\npadding: 10px 0;\r\n`\r\nlet timer = null\r\nexport const MemoryGame = () => {\r\n    const [start, setStart] = useState(false)\r\n    const [imageArray, setImages] = useState(Array(16).fill({}));\r\n    const [hide, setHide] = useState(false);\r\n    const [visibleArray, setVisibleArray] = useState([]);\r\n    const [openPicture, setOpenPicture] = useState([]);\r\n    const [time, setTime] = useState(65);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const generateRandomImage = () => {\r\n        let randomImage = [{ path: Image1, id: 1 }, { path: Image2, id: 2 }, { path: Image3, id: 3 },\r\n        { path: Image4, id: 4 }, { path: Image5, id: 5 }, { path: Image6, id: 6 },\r\n        { path: Image7, id: 7 }, { path: Image8, id: 8 }];\r\n        randomImage = randomImage.concat(randomImage)\r\n        randomImage = randomImage.sort(() => Math.random() - 0.5);\r\n        setImages(randomImage)\r\n        setTimeout(() => setHide(true), 5000)\r\n    }\r\n    useEffect(() => {\r\n        if (start) {\r\n            setHide(false)\r\n            generateRandomImage()\r\n        } else {\r\n            setHide(true)\r\n            setTime(65)\r\n            setVisibleArray([])\r\n            setOpenPicture([])\r\n            setGameOver(false)\r\n            clearTimeout(timer)\r\n        }\r\n    }, [start])\r\n    useEffect(() => {\r\n        if (start && !gameOver) {\r\n            if (time) {\r\n                timer = setTimeout(() => {\r\n                    setTime(prev => prev - 1)\r\n                }, 1000)\r\n            } else {\r\n                setGameOver('GAME OVER')\r\n            }\r\n        }\r\n    }, [time, gameOver, start])\r\n\r\n    const isSameImage = ([index1, index2]) => imageArray[index1].id === imageArray[index2].id\r\n    useEffect(() => {\r\n        if (openPicture.length === 2) {\r\n            if (isSameImage(openPicture)) {\r\n                setVisibleArray(prev => [...prev, imageArray[openPicture[0]].id])\r\n                setOpenPicture([])\r\n            } else {\r\n                setTimeout(() => {\r\n                    setOpenPicture([])\r\n                }, 500)\r\n            }\r\n        } else if (visibleArray.length === 8) {\r\n            setGameOver('SUCCESS')\r\n            clearTimeout(timer)\r\n        }\r\n    }, [openPicture, visibleArray])\r\n    const clickHandler = (index) => {\r\n        if (openPicture.length < 2 && hide && !gameOver && start && !openPicture.includes(index))\r\n            setOpenPicture(prev => [...prev, index])\r\n    }\r\n    const stopGame = () => {\r\n        setStart(prev => !prev)\r\n    }\r\n    return (\r\n        <div>\r\n            <Grid>\r\n                {imageArray.map(({ path, id }, index) => (\r\n                    <Card key={index} hide={hide} onClick={() => clickHandler(index)}\r\n                        show={openPicture.includes(index) || visibleArray.includes(id)}>\r\n                        <Image src={path} />\r\n                        <Fallback />\r\n                    </Card>))}\r\n            </Grid>\r\n            {start ? <Time>Remaining Time : {time}</Time> : ''}\r\n            <Button onClick={stopGame}>{start ? 'STOP' : 'START'}</Button>\r\n            {gameOver ? <Result>{gameOver} !!!<div>Your score : {visibleArray.length}</div></Result> : ''}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js",["120","121","122","123"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js",["124"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js",["125","126"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\FlappyBird.js",["127","128","129","130"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Result } from \"components/common\";\nimport styled from \"styled-components\";\nimport BirdImg from \"assets/gif/bird.gif\";\nimport BackgroundImg from \"assets/images/grassland.jpg\";\nimport Pipe from \"assets/images/pipe.png\";\n\nconst Bird = styled.div`\n  width: 30px;\n  height: 30px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  background-image: url(${BirdImg});\n  background-size: cover;\n  background-position: center;\n  left: 150px;\n  transform: rotate(${({ bottom }) => 0.225 * (200 - bottom)}deg);\n  z-index: 2;\n`;\nconst Obstacle = styled.img`\n  width: 30px;\n  height: 200px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  z-index: 2;\n  transform: rotate(${({ invert }) => (invert ? 0 : 180)}deg);\n  left: ${({ left }) => left}px;\n`;\nconst Floor = styled.div`\n  height: 60px;\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  overflow: hidden;\n  img {\n    width: 100%;\n    height: 400px;\n    transform: translateY(-340px);\n    z-index: 5;\n    position: relative;\n  }\n`;\nconst Image = styled.img`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n`;\nconst Score = styled.div`\n  position: absolute;\n  font-size: 24px;\n  padding: 10px;\n  color: white;\n  z-index: 3;\n  border: 4px solid white;\n  border-radius: 50%;\n  height: 20px;\n  width: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n`;\nlet gravityTimer = null;\nlet slideTimer = null;\nlet generateTimer = null;\nlet flyTimer = null;\nconst FlappyBird = () => {\n  const floorHeight = 60;\n  const gravity = 0.9;\n  const birdSize = 30;\n  const birdPos = 150;\n  const pipeSize = 200;\n  const verticalGap = 100;\n  const [bottom, setBottom] = useState(200);\n  const [start, setStart] = useState(false);\n  const [obstacles, setObstacles] = useState([]);\n  const [fly, setFly] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    if (!gameOver && start && bottom) {\n      gravityTimer = setTimeout(() => {\n        let newBottom = fly ? bottom + 7.5 : bottom - 2.5;\n        setBottom(newBottom);\n      }, 20);\n    }\n    return () => {\n      clearTimeout(gravityTimer);\n    };\n  }, [start, bottom, fly, gameOver]);\n\n  const generateObstacle = () => {\n    if (start && !gameOver) {\n      let obstaclePosition = 400;\n      let height = Math.floor(Math.random() * floorHeight);\n      setObstacles((prev) => [...prev, { left: obstaclePosition, height }]);\n      let min = 800;\n      let max = 3000;\n      let randomTime = Math.floor(Math.random() * (max - min + 1)) + min;\n      generateTimer = setTimeout(() => {\n        generateObstacle();\n      }, randomTime);\n    }\n  };\n  useEffect(() => {\n    generateObstacle();\n  }, [start, gameOver]);\n\n  useEffect(() => {\n    if (!gameOver && start && obstacles.length) {\n      slideTimer = setTimeout(() => {\n        let newPosition = [...obstacles].map(({ left, height }) => ({\n          left: left - 10,\n          height,\n        }));\n        newPosition = newPosition.filter(({ left }) => left > 0 - 30);\n        let newScore = newPosition.filter(\n          ({ left }) => left < birdPos && left >= birdPos - 10\n        ).length;\n        setScore((prev) => prev + newScore);\n        setObstacles(newPosition);\n      }, 80);\n    }\n    return () => {\n      clearTimeout(slideTimer);\n    };\n  }, [obstacles, start, gameOver]);\n\n  useEffect(() => {\n    if (start && !gameOver) {\n      if (bottom <= floorHeight) {\n        //REACHED FLOOR\n        setGameOver(\"GAME OVER!!!\");\n        stopTimer();\n      } else {\n        let nearestObstacle = obstacles.find(\n          (e) => e.left >= birdPos && e.left <= birdPos + birdSize\n        );\n        if (nearestObstacle) {\n          if (\n            bottom <= pipeSize + nearestObstacle.height ||\n            bottom + birdSize >= pipeSize + nearestObstacle.height + verticalGap\n          ) {\n            setGameOver(\"GAME OVER!!!\");\n            stopTimer();\n          }\n        }\n      }\n    }\n  }, [obstacles, bottom, start]);\n  const keyHandler = (e) => {\n    if ([\"ArrowUp\", \" \"].includes(e.key)) {\n      setFly(true);\n      clearTimeout(flyTimer);\n      flyTimer = setTimeout(() => {\n        setFly(false);\n      }, 150);\n    }\n  };\n  useEffect(() => {\n    if (start && !gameOver) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.addEventListener(\"keydown\", keyHandler);\n  }, [start, gameOver]);\n  const stopTimer = () => {\n    clearTimeout(generateTimer);\n    clearTimeout(slideTimer);\n    clearTimeout(flyTimer);\n    clearTimeout(gravityTimer);\n  };\n  const toggleGame = () => {\n    if (start) {\n      setStart(false);\n    } else {\n      setGameOver(false);\n      setObstacles([]);\n      setBottom(200);\n      setScore(0);\n      setFly(false);\n      setStart(true);\n    }\n    stopTimer();\n  };\n  return (\n    <div>\n      <Grid border={\"black\"}>\n        <div>\n          <Bird bottom={bottom} />\n        </div>\n        {obstacles.map(({ left, height }, i) => (\n          <Obstacle key={i} left={left} bottom={height} src={Pipe} />\n        ))}\n        {obstacles.map(({ left, height }, i) => (\n          <Obstacle\n            key={i}\n            left={left}\n            bottom={pipeSize + height + verticalGap}\n            src={Pipe}\n            invert={true}\n          />\n        ))}\n        <Image src={BackgroundImg} />\n        <Floor>\n          <img src={BackgroundImg}></img>\n        </Floor>\n        <Score>{score}</Score>\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"Stop\" : \"Start\"}</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default FlappyBird;\n",{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":2,"column":18,"nodeType":"137","messageId":"138","endLine":2,"endColumn":31},{"ruleId":"135","severity":1,"message":"139","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":21},{"ruleId":"135","severity":1,"message":"140","line":3,"column":23,"nodeType":"137","messageId":"138","endLine":3,"endColumn":28},{"ruleId":"135","severity":1,"message":"141","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":15},{"ruleId":"135","severity":1,"message":"142","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":15},{"ruleId":"135","severity":1,"message":"143","line":8,"column":7,"nodeType":"137","messageId":"138","endLine":8,"endColumn":16},{"ruleId":"135","severity":1,"message":"144","line":14,"column":10,"nodeType":"137","messageId":"138","endLine":14,"endColumn":22},{"ruleId":"135","severity":1,"message":"145","line":14,"column":24,"nodeType":"137","messageId":"138","endLine":14,"endColumn":39},{"ruleId":"135","severity":1,"message":"146","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":50,"column":23,"nodeType":"149","messageId":"150","endLine":50,"endColumn":25},{"ruleId":"151","severity":1,"message":"152","line":87,"column":8,"nodeType":"153","endLine":87,"endColumn":51,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":89,"column":9,"nodeType":"157","messageId":"158","endLine":106,"endColumn":10},{"ruleId":"151","severity":1,"message":"159","line":112,"column":8,"nodeType":"153","endLine":112,"endColumn":36,"suggestions":"160"},{"ruleId":"131","replacedBy":"161"},{"ruleId":"133","replacedBy":"162"},{"ruleId":"151","severity":1,"message":"163","line":77,"column":26,"nodeType":"153","endLine":77,"endColumn":28,"suggestions":"164"},{"ruleId":"135","severity":1,"message":"165","line":100,"column":13,"nodeType":"137","messageId":"138","endLine":100,"endColumn":18},{"ruleId":"151","severity":1,"message":"166","line":157,"column":8,"nodeType":"153","endLine":157,"endColumn":18,"suggestions":"167"},{"ruleId":"151","severity":1,"message":"159","line":81,"column":8,"nodeType":"153","endLine":81,"endColumn":16,"suggestions":"168"},{"ruleId":"151","severity":1,"message":"169","line":109,"column":8,"nodeType":"153","endLine":109,"endColumn":35,"suggestions":"170"},{"ruleId":"155","severity":1,"message":"156","line":94,"column":5,"nodeType":"157","messageId":"158","endLine":104,"endColumn":6},{"ruleId":"151","severity":1,"message":"171","line":145,"column":6,"nodeType":"153","endLine":145,"endColumn":18,"suggestions":"172"},{"ruleId":"151","severity":1,"message":"173","line":164,"column":6,"nodeType":"153","endLine":164,"endColumn":18,"suggestions":"174"},{"ruleId":"151","severity":1,"message":"175","line":168,"column":6,"nodeType":"153","endLine":168,"endColumn":43,"suggestions":"176"},{"ruleId":"151","severity":1,"message":"177","line":69,"column":6,"nodeType":"153","endLine":69,"endColumn":15,"suggestions":"178"},{"ruleId":"151","severity":1,"message":"179","line":107,"column":6,"nodeType":"153","endLine":107,"endColumn":23,"suggestions":"180"},{"ruleId":"151","severity":1,"message":"181","line":141,"column":6,"nodeType":"153","endLine":141,"endColumn":21,"suggestions":"182"},{"ruleId":"135","severity":1,"message":"183","line":70,"column":11,"nodeType":"137","messageId":"138","endLine":70,"endColumn":18},{"ruleId":"151","severity":1,"message":"184","line":108,"column":8,"nodeType":"153","endLine":108,"endColumn":25,"suggestions":"185"},{"ruleId":"151","severity":1,"message":"186","line":142,"column":8,"nodeType":"153","endLine":142,"endColumn":34,"suggestions":"187"},{"ruleId":"188","severity":1,"message":"189","line":181,"column":24,"nodeType":"190","endLine":181,"endColumn":49},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'GlobalStyle' is defined but never used.","'theme' is defined but never used.","'ChatBox' is defined but never used.","'SideNav' is defined but never used.","'Container' is assigned a value but never used.","'activeFriend' is assigned a value but never used.","'setActiveFriend' is assigned a value but never used.","'JumpSlide' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apple' and 'moveSnake'. Either include them or remove the dependency array.","ArrayExpression",["193"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'keyHandler'. Either include it or remove the dependency array.",["194"],["191"],["192"],"React Hook useEffect has missing dependencies: 'bombCount' and 'width'. Either include them or remove the dependency array.",["195"],"'timer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'squares'. Either include it or remove the dependency array.",["196"],["197"],"React Hook useEffect has missing dependencies: 'imageArray' and 'isSameImage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVisibleArray' needs the current value of 'imageArray'.",["198"],"React Hook useEffect has a missing dependency: 'alienGroup'. Either include it or remove the dependency array.",["199"],"React Hook useEffect has missing dependencies: 'moveInvaders', 'shooterIndex', and 'start'. Either include them or remove the dependency array.",["200"],"React Hook useEffect has a missing dependency: 'moveShooter'. Either include it or remove the dependency array.",["201"],"React Hook useEffect has a missing dependency: 'calculateWinner'. Either include it or remove the dependency array.",["202"],"React Hook useEffect has a missing dependency: 'generateObstacles'. Either include it or remove the dependency array.",["203"],"React Hook useEffect has a missing dependency: 'control'. Either include it or remove the dependency array.",["204"],"'gravity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'generateObstacle'. Either include it or remove the dependency array.",["205"],"React Hook useEffect has a missing dependency: 'gameOver'. Either include it or remove the dependency array.",["206"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},"Update the dependencies array to be: [snake, direction, appleConsumed, gameOver, apple, moveSnake]",{"range":"235","text":"236"},"Update the dependencies array to be: [direction, gameOver, keyHandler, snake]",{"range":"237","text":"238"},"Update the dependencies array to be: [bombCount, width]",{"range":"239","text":"240"},"Update the dependencies array to be: [gameOver, squares]",{"range":"241","text":"242"},"Update the dependencies array to be: [bottom, keyHandler]",{"range":"243","text":"244"},"Update the dependencies array to be: [imageArray, isSameImage, openPicture, visibleArray]",{"range":"245","text":"246"},"Update the dependencies array to be: [alienGroup, laserIndex]",{"range":"247","text":"248"},"Update the dependencies array to be: [alienGroup, moveInvaders, shooterIndex, start]",{"range":"249","text":"250"},"Update the dependencies array to be: [shooterIndex, alienGroup, direction, moveShooter]",{"range":"251","text":"252"},"Update the dependencies array to be: [calculateWinner, squares]",{"range":"253","text":"254"},"Update the dependencies array to be: [gameOver, generateObstacles, start]",{"range":"255","text":"256"},"Update the dependencies array to be: [bottom, control, start]",{"range":"257","text":"258"},"Update the dependencies array to be: [start, gameOver, generateObstacle]",{"range":"259","text":"260"},"Update the dependencies array to be: [obstacles, bottom, start, gameOver]",{"range":"261","text":"262"},[2727,2770],"[snake, direction, appleConsumed, gameOver, apple, moveSnake]",[3579,3607],"[direction, gameOver, keyHandler, snake]",[2973,2975],"[bombCount, width]",[5721,5731],"[gameOver, squares]",[2764,2772],"[bottom, keyHandler]",[3463,3490],"[imageArray, isSameImage, openPicture, visibleArray]",[3722,3734],"[alienGroup, laserIndex]",[4175,4187],"[alienGroup, moveInvaders, shooterIndex, start]",[4337,4374],"[shooterIndex, alienGroup, direction, moveShooter]",[1687,1696],"[calculateWinner, squares]",[2855,2872],"[gameOver, generateObstacles, start]",[3947,3962],"[bottom, control, start]",[3058,3075],"[start, gameOver, generateObstacle]",[4456,4482],"[obstacles, bottom, start, gameOver]"]