[{"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js":"3","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js":"4","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js":"5","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js":"6","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js":"7","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js":"8","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js":"9","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js":"10","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js":"11","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js":"12","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js":"13","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js":"14","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js":"15","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js":"16","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js":"17","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js":"18","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js":"19","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js":"20","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js":"21","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\FlappyBird.js":"22","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tetris.js":"23","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tenet.js":"24","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Pacman.js":"25","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\feed\\resource.js":"26","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\CandyCrush.js":"27","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Temp.js":"28","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\The2048.js":"29"},{"size":197,"mtime":1607012420109,"results":"30","hashOfConfig":"31"},{"size":746,"mtime":1607424471833,"results":"32","hashOfConfig":"31"},{"size":896,"mtime":1607072319019,"results":"33","hashOfConfig":"31"},{"size":820,"mtime":1607072739385,"results":"34","hashOfConfig":"31"},{"size":372,"mtime":1607072332112,"results":"35","hashOfConfig":"31"},{"size":1928,"mtime":1607072607427,"results":"36","hashOfConfig":"31"},{"size":1430,"mtime":1607072225070,"results":"37","hashOfConfig":"31"},{"size":494,"mtime":1607408914680,"results":"38","hashOfConfig":"31"},{"size":392,"mtime":1607072637770,"results":"39","hashOfConfig":"31"},{"size":143,"mtime":1607071297313,"results":"40","hashOfConfig":"31"},{"size":197,"mtime":1607597337995,"results":"41","hashOfConfig":"42"},{"size":1878,"mtime":1607842152237,"results":"43","hashOfConfig":"42"},{"size":392,"mtime":1607072637770,"results":"44","hashOfConfig":"42"},{"size":3643,"mtime":1607597337863,"results":"45","hashOfConfig":"42"},{"size":5576,"mtime":1607597337819,"results":"46","hashOfConfig":"42"},{"size":729,"mtime":1607681210487,"results":"47","hashOfConfig":"42"},{"size":2425,"mtime":1607597337690,"results":"48","hashOfConfig":"42"},{"size":4201,"mtime":1607597337750,"results":"49","hashOfConfig":"42"},{"size":4872,"mtime":1607776834759,"results":"50","hashOfConfig":"42"},{"size":2332,"mtime":1607601216370,"results":"51","hashOfConfig":"42"},{"size":4707,"mtime":1607668102180,"results":"52","hashOfConfig":"42"},{"size":5701,"mtime":1607597337656,"results":"53","hashOfConfig":"42"},{"size":8382,"mtime":1607707926953,"results":"54","hashOfConfig":"42"},{"size":7864,"mtime":1607842255238,"results":"55","hashOfConfig":"42"},{"size":6069,"mtime":1607842189265,"results":"56","hashOfConfig":"42"},{"size":2607,"mtime":1607707987020,"results":"57","hashOfConfig":"42"},{"size":7679,"mtime":1607842212755,"results":"58","hashOfConfig":"42"},{"size":5812,"mtime":1607842355250,"results":"59","hashOfConfig":"42"},{"size":4570,"mtime":1607842355774,"results":"60","hashOfConfig":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"1uw3rlt",{"filePath":"64","messages":"65","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1it9hws",{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js",[],["131","132"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js",["133","134","135","136","137","138","139","140"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js",[],["141","142"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js",["143","144"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js",["145","146","147","148"],"import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Button, Grid, Result } from \"components/common\";\n\nconst Snake = css`\n  background: orange;\n  border-radius: 50%;\n`;\nconst Apple = css`\n  background: lime;\n  border-radius: 50%;\n`;\nconst Box = styled.div`\n  width: 10px;\n  height: 10px;\n  ${({ isSnake }) => isSnake && Snake};\n  ${({ isApple }) => isApple && Apple};\n`;\nlet timer = null;\nconst SnakeGame = () => {\n  const [snake, setSnake] = useState([0, 1, 2]);\n  const [apple, setApple] = useState(\"\");\n  const [direction, setDirection] = useState(1);\n  const interval = 100;\n  const width = 40;\n  const [appleConsumed, setAppleConsumed] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const generateApple = () => {\n    const newApple = Math.floor(Math.random() * (width * width - 1));\n    if (snake.includes(newApple)) {\n      generateApple();\n    } else {\n      setApple(newApple);\n    }\n  };\n  const restartGame = () => {\n    setSnake([0, 1, 2]);\n    setDirection(1);\n    setAppleConsumed(0);\n    setGameOver(false);\n    generateApple();\n  };\n  const stopGame = () => {\n    clearTimeout(timer);\n    setApple(\"\");\n    window.removeEventListener(\"keydown\", keyHandler);\n  };\n  const isSnakeBody = (value) =>\n    snake.includes(value) &&\n    snake[snake.length - 2] !== value &&\n    console.log(snake[snake.length - 2] !== value);\n  const isOutOfScreen = (value, direction) => {\n    if (direction == 1) {\n      return value % width === 0;\n    } else if (direction === -1) {\n      return (value + 1) % width === 0;\n    }\n    return value >= width * width || value < 0;\n  };\n  const moveSnake = () => {\n    let newSnakePos = [...snake];\n    if (!appleConsumed) {\n      newSnakePos.shift();\n    } else {\n      setAppleConsumed((prev) => prev - 1);\n    }\n    let nextCell = newSnakePos[newSnakePos.length - 1] + direction;\n    if (isSnakeBody(nextCell) || isOutOfScreen(nextCell, direction)) {\n      setGameOver(true);\n      return;\n    } else {\n      newSnakePos.push(nextCell);\n    }\n    if (newSnakePos.includes(apple)) {\n      setAppleConsumed((prev) => prev + 1);\n      generateApple();\n    }\n    setSnake(newSnakePos);\n  };\n  useEffect(() => {\n    if (gameOver) {\n      clearTimeout(timer);\n      return;\n    }\n    timer = setTimeout(() => {\n      if (gameOver) clearTimeout(timer);\n      if (apple !== \"\") moveSnake();\n    }, interval);\n    return () => clearTimeout(timer);\n  }, [snake, direction, appleConsumed, gameOver]);\n  const keyHandler = (e) => {\n    switch (e.key) {\n      case \"ArrowRight\":\n        if (direction !== -1) setDirection(1);\n        break;\n      case \"ArrowLeft\":\n        if (direction !== 1) setDirection(-1);\n        break;\n      case \"ArrowUp\":\n        if (direction !== width) setDirection(-width);\n        break;\n      case \"ArrowDown\":\n        if (direction !== -width) setDirection(width);\n        break;\n    }\n  };\n  useEffect(() => {\n    if (!gameOver) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [direction, gameOver, snake]);\n  return (\n    <div>\n      <Grid color={\"#253243\"}>\n        {[...new Array(width * width)].map((e, i) => (\n          <Box key={i} isSnake={snake.includes(i)} isApple={i === apple}></Box>\n        ))}\n      </Grid>\n      <Button onClick={apple ? stopGame : restartGame}>\n        {apple ? \"STOP\" : \"START\"}\n      </Button>\n      {gameOver ? (\n        <Result>\n          GAME OVER!!!\n          <div>your score : {snake.length - 3}</div>\n        </Result>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default SnakeGame;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js",["149","150","151"],"import { Button, Grid, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst Bomb = css`\n  background: orange;\n  font-size: 48px;\n`;\nconst Open = css`\n  background: white;\n  color: black;\n  border: 3px inset #1c6ea4;\n`;\nconst Empty = css`\n  background: #e1e1e1;\n  border-color: #b1b1b1;\n`;\nconst Dash = css`\n  background: red;\n`;\nconst Block = styled.div`\n  height: 40px;\n  width: 40px;\n  display: flex;\n  font-family: sans-serif;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  cursor: pointer;\n  box-sizing: border-box;\n  border: 6px outset #1c6ea4;\n  color: white;\n  ${({ show }) => show && Open};\n  ${({ show, isBomb }) => show && isBomb && Bomb};\n  ${({ show, empty }) => show && empty && Empty};\n  ${({ dash }) => dash && Dash};\n`;\n// const Result = styled.div`\n//     font-size: 24px;\n//     padding: 10px;\n// `\nconst Minesweeper = () => {\n  let width = 10;\n  let bombCount = 20;\n\n  const [squares, setSquares] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const startGame = () => {\n    setGameOver(false);\n    const bombsArray = Array(bombCount).fill({ value: \"*\" });\n    const emptyArray = Array(width * width - bombCount).fill({ value: \"\" });\n    const gamesArray = [...emptyArray, ...bombsArray];\n    const shuffledArray = gamesArray.sort(() => Math.random() - 0.5);\n\n    for (let i = 0; i < shuffledArray.length; i++) {\n      let total = 0;\n      const isLeftEdge = i % width === 0;\n      const isRightEdge = i % width === width - 1;\n      // layout to check\n      // 7 8 9\n      // 4 _ 6\n      // 1 2 3\n      if (!shuffledArray[i].value) {\n        if (i > 0 && !isLeftEdge && shuffledArray[i - 1].value === \"*\") total++; //bomb at left (4)\n        if (i > 11 && !isLeftEdge && shuffledArray[i - 1 - width].value === \"*\")\n          total++; //bomb at top left(7)\n        if (i > 9 && shuffledArray[i - width].value === \"*\") total++; //bomb at top (8)\n        if (i > 9 && !isRightEdge && shuffledArray[i + 1 - width].value === \"*\")\n          total++; //bomb at top right (9)\n        if (i < 99 && !isRightEdge && shuffledArray[i + 1].value === \"*\")\n          total++; //bomb at right(6)\n        if (\n          i < 88 &&\n          !isRightEdge &&\n          shuffledArray[i + 1 + width].value === \"*\"\n        )\n          total++; //bomb at right bottom(3)\n        if (i < 89 && shuffledArray[i + width].value === \"*\") total++; //bomb at bottom(2)\n        if (i < 90 && !isLeftEdge && shuffledArray[i - 1 + width].value === \"*\")\n          total++; //bomb at left bottom(1)\n        shuffledArray[i] = { value: total || \"\" };\n      }\n    }\n    setSquares(shuffledArray);\n  };\n  useEffect(startGame, []);\n  const clickHandler = (index) => {\n    if (gameOver || squares[index].show || squares[index].flag) return;\n    if (squares[index].value === \"*\") {\n      let newSquares = [...squares];\n      newSquares[index] = { value: \"*\", dash: true };\n      setSquares(newSquares);\n      setGameOver(true);\n    } else {\n      let newSquares = [...squares];\n      newSquares[index].show = true;\n      setSquares(newSquares);\n      if (newSquares[index].value) {\n        return;\n      }\n      checkSquares(index);\n    }\n  };\n  const isNotABomb = (cell) => cell.value !== \"*\";\n  const checkSquares = (index) => {\n    const isLeftEdge = index % width === 0;\n    const isRightEdge = index % width === width - 1;\n    console.error(\"initialized again\");\n    let timer = setTimeout(() => {\n      if (index > 0 && !isLeftEdge) {\n        //toward left\n        if (isNotABomb(squares[index - 1])) {\n          clickHandler(index - 1);\n        }\n      }\n      if (index > 9 && !isRightEdge) {\n        //toward upper right\n        if (isNotABomb(squares[index + 1 - width])) {\n          clickHandler(index + 1 - width);\n        }\n      }\n      if (index > 10) {\n        //toward up\n        if (isNotABomb(squares[index - width])) {\n          clickHandler(index - width);\n        }\n      }\n      if (index > 11 && !isLeftEdge) {\n        //toward upper left\n        if (isNotABomb(squares[index - 1 - width])) {\n          clickHandler(index - 1 - width);\n        }\n      }\n      if (index < 98 && !isRightEdge) {\n        //toward right\n        if (isNotABomb(squares[index + 1])) {\n          clickHandler(index + 1);\n        }\n      }\n      if (index < 90 && !isLeftEdge) {\n        //toward lower left\n        if (isNotABomb(squares[index - 1 + width])) {\n          clickHandler(index - 1 + width);\n        }\n      }\n      if (index < 88 && !isRightEdge) {\n        if (isNotABomb(squares[index + 1 + width])) {\n          clickHandler(index + 1 + width);\n        }\n      }\n      if (index < 89) {\n        if (isNotABomb(squares[index + width])) {\n          clickHandler(index + width);\n        }\n      }\n    }, 10);\n  };\n  useEffect(() => {\n    if (gameOver) {\n      let newSquares = [...squares].map((e) => ({ ...e, show: true }));\n      console.error(newSquares);\n      setSquares(newSquares);\n    }\n  }, [gameOver]);\n  return (\n    <div>\n      <Grid color={\"#115481\"}>\n        {squares.map(({ value, show, dash }, i) => (\n          <Block\n            key={i}\n            isBomb={value === \"*\"}\n            dash={dash}\n            show={show}\n            empty={!value}\n            onClick={() => clickHandler(i)}\n          >\n            {show ? value : \"\"}\n          </Block>\n        ))}\n      </Grid>\n      <Button onClick={startGame}>(RE)START</Button>\n      {gameOver ? <Result>GAME OVER!!!</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default Minesweeper;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js",["152"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nconst Game = styled.div``;\nconst Character = styled.div`\n  background-color: red;\n  height: 70px;\n  width: 40px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  left: ${({ left }) => left}px;\n`;\nlet jumpTimer = null;\nlet slideTimer = null;\nconst JumpSlide = () => {\n  const gravity = 0.9;\n  const [bottom, setBottom] = useState(0);\n  const [jump, setJump] = useState(false);\n  const [left, setLeft] = useState(0);\n  const [slide, setSlide] = useState(\"\");\n  const keyHandler = (e) => {\n    if (e.key === \" \" && bottom <= 0) setJump(true);\n    if (e.key === \"ArrowLeft\") setSlide(\"LEFT\");\n    else if (e.key === \"ArrowRight\") setSlide(\"RIGHT\");\n    else if (e.key === \"ArrowDown\") setSlide(\"\");\n  };\n  useEffect(() => {\n    // if (bottom) {\n    if (slide === \"RIGHT\") {\n      clearTimeout(slideTimer);\n      slideTimer = setTimeout(() => {\n        let newLeft = left + 5;\n        setLeft(newLeft);\n      }, 20);\n      // if (bottom == 0) setSlide('')\n    } else if (slide === \"LEFT\") {\n      clearTimeout(slideTimer);\n      slideTimer = setTimeout(() => {\n        let newLeft = left - 5;\n        setLeft(newLeft);\n      }, 20);\n      // if (bottom == 0) setSlide('')\n    } else {\n      setSlide(\"\");\n      clearTimeout(slideTimer);\n    }\n    // } else {\n    //     setSlide('')\n    //     clearTimeout(slideTimer)\n    // }\n  }, [slide, left, bottom]);\n  useEffect(() => {\n    //going up\n    if (jump) {\n      console.error(\"going to jumping\");\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom + 30;\n        newBottom *= gravity;\n        setBottom(newBottom);\n        console.error(bottom * gravity);\n      }, 20);\n      if (bottom > 250) {\n        clearTimeout(jumpTimer);\n        setJump(false);\n      }\n    } else if (bottom > 0) {\n      console.error(\"coming back\");\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom - 5 < 0 ? 0 : bottom - 5;\n        setBottom(newBottom);\n      }, 20);\n    } else {\n      console.error(\"just clearing\", bottom);\n      clearTimeout(jumpTimer);\n    }\n  }, [jump, bottom]);\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [bottom]);\n  return (\n    <Game>\n      <Character bottom={bottom} left={left} />\n    </Game>\n  );\n};\n\nexport default JumpSlide;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js",["153"],"import React, { useEffect, useState } from \"react\";\nimport Image1 from \"assets/images/1.jpg\";\nimport Image2 from \"assets/images/2.jpg\";\nimport Image3 from \"assets/images/3.jpg\";\nimport Image4 from \"assets/images/4.jpg\";\nimport Image5 from \"assets/images/5.jpg\";\nimport Image6 from \"assets/images/6.jpg\";\nimport Image7 from \"assets/images/7.jpg\";\nimport Image8 from \"assets/images/8.jpg\";\nimport styled, { css } from \"styled-components\";\nimport { Button, Grid, Result } from \"components/common\";\n\nconst Hide = css`\n  transform: rotateY(180deg);\n`;\nconst Show = css`\n  transform: rotateY(0);\n`;\nconst Card = styled.div`\n  position: relative;\n  width: 100px;\n  height: 100px;\n  text-align: center;\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  ${({ hide }) => hide && Hide};\n  ${({ show }) => show && Show};\n`;\nconst Layer = css`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n`;\nconst Image = styled.img`\n  ${Layer};\n  left: 0;\n`;\nconst Fallback = styled.div`\n  ${Layer};\n  background-color: #2980b9;\n  color: white;\n  transform: rotateY(180deg);\n`;\nconst Time = styled.div`\n  text-align: center;\n  padding: 10px 0;\n`;\nlet timer = null;\nexport const MemoryGame = () => {\n  const [start, setStart] = useState(false);\n  const [imageArray, setImages] = useState(Array(16).fill({}));\n  const [hide, setHide] = useState(false);\n  const [visibleArray, setVisibleArray] = useState([]);\n  const [openPicture, setOpenPicture] = useState([]);\n  const [time, setTime] = useState(65);\n  const [gameOver, setGameOver] = useState(false);\n  const generateRandomImage = () => {\n    let randomImage = [\n      { path: Image1, id: 1 },\n      { path: Image2, id: 2 },\n      { path: Image3, id: 3 },\n      { path: Image4, id: 4 },\n      { path: Image5, id: 5 },\n      { path: Image6, id: 6 },\n      { path: Image7, id: 7 },\n      { path: Image8, id: 8 },\n    ];\n    randomImage = randomImage.concat(randomImage);\n    randomImage = randomImage.sort(() => Math.random() - 0.5);\n    setImages(randomImage);\n    setTimeout(() => setHide(true), 5000);\n  };\n  useEffect(() => {\n    if (start) {\n      setHide(false);\n      generateRandomImage();\n    } else {\n      setHide(true);\n      setTime(65);\n      setVisibleArray([]);\n      setOpenPicture([]);\n      setGameOver(false);\n      clearTimeout(timer);\n    }\n  }, [start]);\n  useEffect(() => {\n    if (start && !gameOver) {\n      if (time) {\n        timer = setTimeout(() => {\n          setTime((prev) => prev - 1);\n        }, 1000);\n      } else {\n        setGameOver(\"GAME OVER\");\n      }\n    }\n  }, [time, gameOver, start]);\n\n  const isSameImage = ([index1, index2]) =>\n    imageArray[index1].id === imageArray[index2].id;\n  useEffect(() => {\n    if (openPicture.length === 2) {\n      if (isSameImage(openPicture)) {\n        setVisibleArray((prev) => [...prev, imageArray[openPicture[0]].id]);\n        setOpenPicture([]);\n      } else {\n        setTimeout(() => {\n          setOpenPicture([]);\n        }, 500);\n      }\n    } else if (visibleArray.length === 8) {\n      setGameOver(\"SUCCESS\");\n      clearTimeout(timer);\n    }\n  }, [openPicture, visibleArray]);\n  const clickHandler = (index) => {\n    if (\n      openPicture.length < 2 &&\n      hide &&\n      !gameOver &&\n      start &&\n      !openPicture.includes(index)\n    )\n      setOpenPicture((prev) => [...prev, index]);\n  };\n  const stopGame = () => {\n    setStart((prev) => !prev);\n  };\n  return (\n    <div>\n      <Grid>\n        {imageArray.map(({ path, id }, index) => (\n          <Card\n            key={index}\n            hide={hide}\n            onClick={() => clickHandler(index)}\n            show={openPicture.includes(index) || visibleArray.includes(id)}\n          >\n            <Image src={path} />\n            <Fallback />\n          </Card>\n        ))}\n      </Grid>\n      {start ? <Time>Remaining Time : {time}</Time> : \"\"}\n      <Button onClick={stopGame}>{start ? \"STOP\" : \"START\"}</Button>\n      {gameOver ? (\n        <Result>\n          {gameOver} !!!<div>Your score : {visibleArray.length}</div>\n        </Result>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js",["154","155","156","157"],"import { Button, Grid, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport AlienImage from \"assets/images/alien.png\";\nimport Jet from \"assets/images/jet.png\";\nimport ExplosionGif from \"assets/gif/explosion.gif\";\nimport Sound from \"assets/sounds/laser.mp3\";\n\nconst Shooter = css`\n  background-image: url(${Jet});\n  background-size: cover;\n`;\nconst Invader = css`\n  background-image: url(${AlienImage});\n  background-size: contain;\n`;\nconst Explosion = css`\n  background-image: url(${ExplosionGif});\n  background-size: contain;\n  z-index: 2;\n  position: relative;\n`;\nconst Laser = css`\n  background-color: yellow;\n  box-shadow: 0px 0px 16px 7px #ffae00;\n  z-index: 2;\n  position: relative;\n  width: 5px;\n  height: 10px;\n  margin: 0 auto;\n`;\nconst Cell = styled.div`\n  width: 20px;\n  height: 20px;\n  box-sizing: border-box;\n  ${({ isInvader }) => isInvader && Invader};\n  ${({ isShooter }) => isShooter && Shooter};\n  ${({ isLaser }) => isLaser && Laser};\n  ${({ isExplosion }) => isExplosion && Explosion};\n`;\nlet timer = null;\nlet laserTimer = null;\nconst SpaceInvaders = () => {\n  const width = 20;\n  const totalAlien = 33;\n  const [shooterIndex, setShooterIndex] = useState(385);\n  const [explodeIndex, setExplodeIndex] = useState(\"\");\n  const [direction, setDirection] = useState(1);\n  const [alienGroup, setAlienGroup] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [laserIndex, setLaserIndex] = useState(\"\");\n  const [start, setStart] = useState(false);\n  useEffect(() => {\n    // prettier-ignore\n    let alienLayout = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20,\n      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40,\n      41, 42, 43, 44, 45, 46, 47, 48, 49, 50,];\n    setDirection(1);\n    setAlienGroup(alienLayout);\n  }, [start]);\n  const moveShooter = (e) => {\n    if (!start) return;\n    switch (e.key) {\n      case \"ArrowRight\":\n        if (shooterIndex % width < width - 1) setShooterIndex(shooterIndex + 1);\n        break;\n      case \"ArrowLeft\":\n        if (shooterIndex % width) setShooterIndex(shooterIndex - 1);\n        break;\n      case \"ArrowUp\":\n        shoot();\n        break;\n    }\n  };\n  const moveInvaders = () => {\n    const leftEdge = alienGroup[0] % width === 0;\n    // const rightEdge = (alienGroup[alienGroup.length - 1] % width === width - 1)\n    const rightEdge = alienGroup.find((alien) => alien % width === width - 1);\n    let newDirection = direction;\n    if ((leftEdge && direction === -1) || (rightEdge && direction === 1)) {\n      newDirection = width;\n    } else if (direction === width) {\n      if (leftEdge) newDirection = 1;\n      else newDirection = -1;\n    }\n    setDirection(newDirection);\n    setAlienGroup((prev) => prev.map((e) => e + newDirection));\n  };\n  const shoot = () => {\n    var birdSound = new Audio(Sound);\n    birdSound.loop = false;\n    birdSound.play();\n    setLaserIndex(shooterIndex - width);\n  };\n  useEffect(() => {\n    if (laserIndex) {\n      if (alienGroup.includes(laserIndex)) {\n        setExplodeIndex(laserIndex);\n        let newAlien = [...alienGroup];\n        newAlien.splice(newAlien.indexOf(laserIndex), 1);\n        console.error(laserIndex, newAlien);\n        setLaserIndex(\"\");\n        setAlienGroup(newAlien);\n        setTimeout(() => {\n          setExplodeIndex(\"\");\n        }, 250);\n      } else {\n        laserTimer = setTimeout(() => {\n          setLaserIndex((prev) => prev - width);\n        }, 50);\n      }\n    }\n    return () => clearTimeout(laserTimer);\n  }, [laserIndex]);\n\n  useEffect(() => {\n    if (start) {\n      if (alienGroup.includes(shooterIndex)) {\n        setGameOver(\"GAME OVER\");\n        clearTimeout(timer);\n      } else if (!alienGroup.length) {\n        setGameOver(\"SUCCESS\");\n        clearTimeout(timer);\n      } else {\n        timer = setTimeout(() => {\n          moveInvaders();\n        }, 500);\n      }\n    } else {\n      clearTimeout(timer);\n    }\n    return () => clearTimeout(timer);\n  }, [alienGroup]);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", moveShooter);\n    return () => window.removeEventListener(\"keydown\", moveShooter);\n  }, [shooterIndex, alienGroup, direction]);\n  const toggleGame = () => {\n    setStart((prev) => !prev);\n  };\n  return (\n    <div>\n      <Grid color={\"black\"}>\n        {[...Array(width * width)].map((e, i) => (\n          <Cell\n            key={i}\n            isInvader={alienGroup.includes(i)}\n            isShooter={shooterIndex === i}\n            isLaser={laserIndex === i}\n            isExplosion={explodeIndex === i}\n          ></Cell>\n        ))}\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"STOP\" : \"Start\"}</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n      <div>your score : {totalAlien - alienGroup.length}</div>\n    </div>\n  );\n};\n\nexport default SpaceInvaders;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js",["158"],"import { Button, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Grid = styled.div`\n  width: 400px;\n  height: 400px;\n  background: #32475b;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst Block = styled.div`\n  border: 1px solid #3e5468;\n  width: 133.33px;\n  height: 133.33px;\n  box-sizing: border-box;\n  font-size: 100px;\n  font-family: sans-serif;\n  color: ${({ winner }) => (winner ? \"lime\" : \"white\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TicTacToe = () => {\n  const [squares, setSquares] = useState([]);\n  const [xIsNext, setxIsNext] = useState();\n  const [gameOver, setGameOver] = useState(false);\n  const [winnerItems, setWinnerItems] = useState([]);\n  const resetGame = () => {\n    setSquares([...Array(9)]);\n    setWinnerItems([]);\n    setxIsNext(true);\n    setGameOver(false);\n  };\n  useEffect(() => {\n    resetGame();\n  }, []);\n  const calculateWinner = () => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return [a, b, c];\n      }\n    }\n    return null;\n  };\n  useEffect(() => {\n    const winner = calculateWinner();\n    if (winner) {\n      setWinnerItems(winner);\n      setGameOver(`Winner is : ${squares[winner[0]]}`);\n    } else if (squares.length && !squares.includes(undefined)) {\n      setGameOver(`Game Over !!!`);\n    }\n  }, [squares]);\n  const onClick = (i) => {\n    const newSquares = [...squares];\n    if (gameOver || newSquares[i]) return;\n    newSquares[i] = xIsNext ? \"X\" : \"O\";\n    setSquares(newSquares);\n    setxIsNext((prev) => !prev);\n  };\n  return (\n    <div>\n      <Grid>\n        {squares.map((value, i) => (\n          <Block\n            key={i}\n            onClick={() => onClick(i)}\n            winner={winnerItems.includes(i)}\n          >\n            {value}\n          </Block>\n        ))}\n      </Grid>\n      <Button onClick={resetGame}>RESTART</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js",["159","160"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Result } from \"components/common\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport Joker from \"assets/images/joker.jfif\";\nimport Batman from \"assets/gif/batman.gif\";\nimport City from \"assets/images/city.png\";\n\nconst Dino = styled.div`\n  width: 60px;\n  height: 60px;\n  background-image: url(${Batman});\n  bottom: ${({ bottom }) => bottom}px;\n  position: absolute;\n  left: 80px;\n  background-size: cover;\n  background-position-x: center;\n  mix-blend-mode: multiply;\n  z-index: 5;\n`;\nconst Obstacle = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 50px;\n  background-image: url(${Joker});\n  left: ${({ left }) => left}px;\n  bottom: 0;\n  background-size: cover;\n  background-repeat: no-repeat;\n  mix-blend-mode: multiply;\n  z-index: 5;\n`;\nconst Animate = keyframes`\n0% { transform: translateX(0);}\n50%{ transform :translateX(-400px);}\n100%{ transform: translateX(0);}\n`;\nconst Image = styled.img`\n  height: 50%;\n  margin-top: 30%;\n  ${({ shouldAnimate }) =>\n    shouldAnimate &&\n    css`\n    animation: ${Animate} 15s linear infinite};\n`}\n`;\nconst Score = styled.div`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  top: 50px;\n  font-size: 24px;\n`;\nlet jumpTimer = null;\nlet slideTimer = null;\nlet generateTimer = null;\nconst ChromeDino = () => {\n  const dinoPosition = 80;\n  const dinoWidth = 60;\n  const obstacleHeight = 40;\n  const [bottom, setBottom] = useState(0);\n  const [jump, setJump] = useState(false);\n  const [obstacles, setObstacles] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [start, setStart] = useState(false);\n  const gravity = 0.9;\n  useEffect(() => {\n    if (!start || gameOver) return;\n    if (jump) {\n      //going up\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom + 15;\n        newBottom *= gravity;\n        setBottom(newBottom);\n      }, 20);\n      if (bottom > 120) {\n        clearTimeout(jumpTimer);\n        setJump(false);\n      }\n    } else if (bottom > 0) {\n      // coming down\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom - 10 < 0 ? 0 : bottom - 10;\n        newBottom *= gravity;\n        setBottom(newBottom);\n      }, 20);\n    } else {\n      clearTimeout(jumpTimer);\n    }\n    return () => clearTimeout(jumpTimer);\n  }, [jump, bottom, gameOver, start]);\n  const generateObstacles = () => {\n    if (start && !gameOver) {\n      let obstaclePosition = 400;\n      setObstacles((prev) => [...prev, obstaclePosition]);\n      let min = 2000;\n      let max = 3000;\n      let randomTime = Math.floor(Math.random() * (max - min + 1)) + min;\n      generateTimer = setTimeout(() => {\n        generateObstacles();\n      }, randomTime);\n    }\n  };\n\n  useEffect(() => {\n    generateObstacles();\n  }, [gameOver, start]);\n  useEffect(() => {\n    let isColidingPosition = obstacles.find(\n      (e) => e > dinoPosition && e < dinoPosition + dinoWidth\n    );\n    if (isColidingPosition && bottom <= obstacleHeight) {\n      setGameOver(true);\n      clearTimeout(generateTimer);\n    }\n  }, [obstacles, bottom]);\n\n  useEffect(() => {\n    if (start && !gameOver && obstacles.length) {\n      slideTimer = setTimeout(() => {\n        let newPosition = [...obstacles].map((value) => value - 30);\n        let newScore = newPosition.filter((value) => value <= 0 - 30).length;\n        newPosition = newPosition.filter((value) => value > 0 - 30);\n        setScore((prev) => prev + newScore);\n        setObstacles(newPosition);\n      }, 100);\n    }\n    return () => {\n      clearTimeout(slideTimer);\n    };\n  }, [obstacles, gameOver, start]);\n\n  const control = (e) => {\n    if ([\" \", \"ArrowUp\"].includes(e.key)) {\n      if (!bottom) setJump(true);\n    }\n  };\n  useEffect(() => {\n    if (start) window.addEventListener(\"keydown\", control);\n    return () => window.removeEventListener(\"keydown\", control);\n  }, [bottom, start]);\n  const toggleGame = () => {\n    if (start) {\n      setStart(false);\n    } else {\n      setBottom(0);\n      setJump(false);\n      clearTimeout(generateTimer);\n      setObstacles([]);\n      setGameOver(false);\n      setScore(0);\n      setStart(true);\n    }\n  };\n  return (\n    <div>\n      <Grid border={\"black\"}>\n        <Dino bottom={bottom} />\n        {obstacles.map((left, i) => (\n          <Obstacle key={i} left={left} />\n        ))}\n        {score ? <Score>score : {score}</Score> : \"\"}\n        <Image src={City} shouldAnimate={start && !gameOver} />\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"Stop\" : \"Start\"}</Button>\n      {gameOver ? <Result>Game Over!!!</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default ChromeDino;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\FlappyBird.js",["161","162","163","164"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Result } from \"components/common\";\nimport styled from \"styled-components\";\nimport BirdImg from \"assets/gif/bird.gif\";\nimport BackgroundImg from \"assets/images/grassland.jpg\";\nimport Pipe from \"assets/images/pipe.png\";\n\nconst Bird = styled.div`\n  width: 30px;\n  height: 30px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  background-image: url(${BirdImg});\n  background-size: cover;\n  background-position: center;\n  left: 150px;\n  transform: rotate(${({ bottom }) => 0.225 * (200 - bottom)}deg);\n  z-index: 2;\n`;\nconst Obstacle = styled.img`\n  width: 30px;\n  height: 200px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  z-index: 2;\n  transform: rotate(${({ invert }) => (invert ? 0 : 180)}deg);\n  left: ${({ left }) => left}px;\n`;\nconst Floor = styled.div`\n  height: 60px;\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  overflow: hidden;\n  img {\n    width: 100%;\n    height: 400px;\n    transform: translateY(-340px);\n    z-index: 5;\n    position: relative;\n  }\n`;\nconst Image = styled.img`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n`;\nconst Score = styled.div`\n  position: absolute;\n  font-size: 24px;\n  padding: 10px;\n  color: white;\n  z-index: 3;\n  border: 4px solid white;\n  border-radius: 50%;\n  height: 20px;\n  width: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n`;\nlet gravityTimer = null;\nlet slideTimer = null;\nlet generateTimer = null;\nlet flyTimer = null;\nconst FlappyBird = () => {\n  const floorHeight = 60;\n  const gravity = 0.9;\n  const birdSize = 30;\n  const birdPos = 150;\n  const pipeSize = 200;\n  const verticalGap = 100;\n  const [bottom, setBottom] = useState(200);\n  const [start, setStart] = useState(false);\n  const [obstacles, setObstacles] = useState([]);\n  const [fly, setFly] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    if (!gameOver && start && bottom) {\n      gravityTimer = setTimeout(() => {\n        let newBottom = fly ? bottom + 7.5 : bottom - 2.5;\n        setBottom(newBottom);\n      }, 20);\n    }\n    return () => {\n      clearTimeout(gravityTimer);\n    };\n  }, [start, bottom, fly, gameOver]);\n\n  const generateObstacle = () => {\n    if (start && !gameOver) {\n      let obstaclePosition = 400;\n      let height = Math.floor(Math.random() * floorHeight);\n      setObstacles((prev) => [...prev, { left: obstaclePosition, height }]);\n      let min = 800;\n      let max = 3000;\n      let randomTime = Math.floor(Math.random() * (max - min + 1)) + min;\n      generateTimer = setTimeout(() => {\n        generateObstacle();\n      }, randomTime);\n    }\n  };\n  useEffect(() => {\n    generateObstacle();\n  }, [start, gameOver]);\n\n  useEffect(() => {\n    if (!gameOver && start && obstacles.length) {\n      slideTimer = setTimeout(() => {\n        let newPosition = [...obstacles].map(({ left, height }) => ({\n          left: left - 10,\n          height,\n        }));\n        newPosition = newPosition.filter(({ left }) => left > 0 - 30);\n        let newScore = newPosition.filter(\n          ({ left }) => left < birdPos && left >= birdPos - 10\n        ).length;\n        setScore((prev) => prev + newScore);\n        setObstacles(newPosition);\n      }, 80);\n    }\n    return () => {\n      clearTimeout(slideTimer);\n    };\n  }, [obstacles, start, gameOver]);\n\n  useEffect(() => {\n    if (start && !gameOver) {\n      if (bottom <= floorHeight) {\n        //REACHED FLOOR\n        setGameOver(\"GAME OVER!!!\");\n        stopTimer();\n      } else {\n        let nearestObstacle = obstacles.find(\n          (e) => e.left >= birdPos && e.left <= birdPos + birdSize\n        );\n        if (nearestObstacle) {\n          if (\n            bottom <= pipeSize + nearestObstacle.height ||\n            bottom + birdSize >= pipeSize + nearestObstacle.height + verticalGap\n          ) {\n            setGameOver(\"GAME OVER!!!\");\n            stopTimer();\n          }\n        }\n      }\n    }\n  }, [obstacles, bottom, start]);\n  const keyHandler = (e) => {\n    if ([\"ArrowUp\", \" \"].includes(e.key)) {\n      setFly(true);\n      clearTimeout(flyTimer);\n      flyTimer = setTimeout(() => {\n        setFly(false);\n      }, 150);\n    }\n  };\n  useEffect(() => {\n    if (start && !gameOver) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.addEventListener(\"keydown\", keyHandler);\n  }, [start, gameOver]);\n  const stopTimer = () => {\n    clearTimeout(generateTimer);\n    clearTimeout(slideTimer);\n    clearTimeout(flyTimer);\n    clearTimeout(gravityTimer);\n  };\n  const toggleGame = () => {\n    if (start) {\n      setStart(false);\n    } else {\n      setGameOver(false);\n      setObstacles([]);\n      setBottom(200);\n      setScore(0);\n      setFly(false);\n      setStart(true);\n    }\n    stopTimer();\n  };\n  return (\n    <div>\n      <Grid border={\"black\"}>\n        <div>\n          <Bird bottom={bottom} />\n        </div>\n        {obstacles.map(({ left, height }, i) => (\n          <Obstacle key={i} left={left} bottom={height} src={Pipe} />\n        ))}\n        {obstacles.map(({ left, height }, i) => (\n          <Obstacle\n            key={i}\n            left={left}\n            bottom={pipeSize + height + verticalGap}\n            src={Pipe}\n            invert={true}\n          />\n        ))}\n        <Image src={BackgroundImg} />\n        <Floor>\n          <img src={BackgroundImg}></img>\n        </Floor>\n        <Score>{score}</Score>\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"Stop\" : \"Start\"}</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default FlappyBird;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tetris.js",["165","166","167"],"import React, { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Button, Grid } from \"components/common\";\n\nconst Cell = styled.div`\n  width: 20px;\n  height: 20px;\n  box-sizing: border-box;\n  border: 1px solid rgba(225, 225, 225, 0.05);\n  ${({ colors }) =>\n    colors &&\n    css`\n      background: linear-gradient(45deg, ${colors[0]} 0%, ${colors[1]} 100%);\n      border: none;\n    `}\n`;\nconst randomColors = [\n  [\"#99daff\", \"#008080\"],\n  [\"#059900\", \"#00ff00\"],\n  [\"#ff0000\", \"#8a0000\"],\n  [\"#f8ff26\", \"#baba00\"],\n  [\"#b8b8b8\", \"#000000\"],\n  [\"#800080\", \"#f700ff\"],\n  [\"#ffffff\", \"#008080\"],\n  [\"#612f03\", \"#ff8c00\"],\n];\n\nconst getTerminoes = (width) => {\n  const lTetromino = [\n    [1, width + 1, width * 2 + 1, 2],\n    [width, width + 1, width + 2, width * 2 + 2],\n    [1, width + 1, width * 2 + 1, width * 2],\n    [width, width * 2, width * 2 + 1, width * 2 + 2],\n  ];\n\n  const zTetromino = [\n    [0, width, width + 1, width * 2 + 1],\n    [width + 1, width + 2, width * 2, width * 2 + 1],\n    [0, width, width + 1, width * 2 + 1],\n    [width + 1, width + 2, width * 2, width * 2 + 1],\n  ];\n\n  const tTetromino = [\n    [1, width, width + 1, width + 2],\n    [1, width + 1, width + 2, width * 2 + 1],\n    [width, width + 1, width + 2, width * 2 + 1],\n    [1, width, width + 1, width * 2 + 1],\n  ];\n\n  const oTetromino = [\n    [0, 1, width, width + 1],\n    [0, 1, width, width + 1],\n    [0, 1, width, width + 1],\n    [0, 1, width, width + 1],\n  ];\n\n  const iTetromino = [\n    [1, width + 1, width * 2 + 1, width * 3 + 1],\n    [width, width + 1, width + 2, width + 3],\n    [1, width + 1, width * 2 + 1, width * 3 + 1],\n    [width, width + 1, width + 2, width + 3],\n  ];\n  return [lTetromino, zTetromino, tTetromino, oTetromino, iTetromino];\n};\nlet blockTimer = null;\nlet counter = 0;\nconst Tetris = () => {\n  const width = 20;\n  const displayWidth = 4;\n  const [cells, setCells] = useState([...Array(400)].map(() => ({})));\n  const [block, setBlock] = useState({ index: [] });\n  const [nextTermino, setNextTermino] = useState({ index: [] });\n  const [position, setPosition] = useState(0);\n  const [rotation, setRotation] = useState(0);\n  const [tetrominoType, setTetrominoType] = useState(\"\");\n  const [start, setStart] = useState(false);\n  const createNewBlock = (size) => {\n    let tetrominoes = getTerminoes(size);\n    let randomIndex = Math.floor(Math.random() * tetrominoes.length);\n    if (size === width) setTetrominoType(randomIndex);\n    return tetrominoes[randomIndex][rotation];\n  };\n  const generateNewBlock = () => {\n    // let blocks = [\n    //     [10, 11, 30, 50],\n    //     [36, 37, 38, 18],\n    //     [30, 10, 11, 12],// |__\n    //     [36, 37, 38, 18],// __|\n    //     [1, 2, 3, 23],// --|\n    //     [4, 5, 24, 25],// []\n    //     [2, 3, 4, 5, 6],//  ---\n    //     [9, 10, 11, 29],//  |--\n    // ];\n    if (nextTermino.index.length) {\n      console.error(nextTermino);\n      setBlock({\n        ...nextTermino,\n        index: createNewBlock(width).map((e) => position + e),\n      });\n      setNextTermino({\n        index: createNewBlock(displayWidth),\n        colors: getRandomColor(),\n      });\n    } else {\n      console.error(getRandomColor());\n      setBlock({\n        index: createNewBlock(width).map((e) => position + e),\n        colors: getRandomColor(),\n      });\n      setNextTermino({\n        index: createNewBlock(displayWidth),\n        colors: getRandomColor(),\n      });\n    }\n  };\n  // useEffect(() => {\n  //     setTimeout(()=>{\n  //         let newCells = [...cells]\n\n  //         for(let i=380;i<400;i++)\n  //             newCells[i]={colors:['red','red']}\n  //         setCells(newCells)\n  //     },1000)\n  // }, [])\n  const isBottomReached = () => {\n    let blockIndex = block.index;\n    let lastRow = width * width - width;\n    let isLastRowReached = blockIndex.find((e) => e >= lastRow);\n    let isBlockPresent = block.index.some(\n      (i) => cells[i + width] && cells[i + width].colors\n    );\n    return isLastRowReached || isBlockPresent;\n  };\n  const generateRandomNumber = () => {\n    let randomNumber = Math.floor(Math.random() * (width - 2));\n    if (counter === 20) {\n      setStart(false);\n      randomNumber = 0;\n      counter = 0;\n    }\n    if (\n      cells[randomNumber].colors ||\n      (cells[randomNumber + 1] && cells[randomNumber + 1].colors) ||\n      (cells[randomNumber - 1] && cells[randomNumber - 1].colors) ||\n      cells[randomNumber + width].colors\n    ) {\n      counter++;\n      generateRandomNumber();\n    }\n    return randomNumber;\n  };\n  useEffect(() => {\n    if (start && block.index.length) {\n      blockTimer = setTimeout(() => {\n        let newBlock = { ...block };\n        newBlock.index = newBlock.index.map((e) => e + width);\n        setPosition((prev) => prev + width);\n        setBlock(newBlock);\n      }, 500);\n      if (isBottomReached()) {\n        clearTimeout(blockTimer);\n        setPosition(generateRandomNumber());\n        setTimeout(() => {\n          let newCells = [...cells];\n          block.index.forEach((i) => (newCells[i] = { colors: block.colors }));\n          setBlock({ index: [] });\n          setCells(newCells);\n        }, 100);\n      }\n    } else if (start) {\n      let firstRow = cells.filter((e, i) => i < 20 && e.colors);\n      if (!firstRow.length) generateNewBlock();\n    }\n    return () => clearTimeout(blockTimer);\n  }, [start, block]);\n  const getRandomColor = () =>\n    randomColors[Math.floor(Math.random() * (randomColors.length - 1))];\n  const moveRight = () => {\n    const rightEdge = block.index.find((e) => e % width === width - 1);\n    const cellPresent = block.index.some(\n      (e) => cells[e + 1] && cells[e + 1].colors\n    );\n    if (!rightEdge && block.index && !cellPresent) {\n      let newBlock = { ...block };\n      newBlock.index = newBlock.index.map((e) => e + 1);\n      setBlock(newBlock);\n      setPosition((prev) => prev + 1);\n    }\n  };\n  const moveLeft = () => {\n    const leftEdge = block.index.find((e) => e % width === 0);\n    const cellPresent = block.index.some(\n      (e) => cells[e - 1] && cells[e - 1].colors\n    );\n    if (!leftEdge && block.index && !cellPresent) {\n      let newBlock = { ...block };\n      newBlock.index = newBlock.index.map((e) => e - 1);\n      setBlock(newBlock);\n      setPosition((prev) => prev - 1);\n    }\n  };\n  const rotate = () => {\n    let currentRotation = rotation + 1;\n    if (currentRotation === block.index.length) {\n      currentRotation = 0;\n    }\n    setRotation(currentRotation);\n    setBlock((prev) => ({\n      ...prev,\n      index: getTerminoes(width)[tetrominoType][currentRotation].map(\n        (e) => e + position\n      ),\n    }));\n  };\n  const keyHandler = (e) => {\n    switch (e.key) {\n      case \"ArrowLeft\":\n        moveLeft();\n        break;\n      case \"ArrowRight\":\n        moveRight();\n        break;\n      case \"ArrowUp\":\n        rotate();\n        break;\n    }\n  };\n  useEffect(() => {\n    if (start) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [block, start]);\n  useEffect(() => {\n    let validRows = [];\n    for (let i = 0; i < width; i++) {\n      let isComplete = true;\n      for (let j = 1; j < width; j++) {\n        if (!cells[i * width + j].colors) {\n          isComplete = false;\n          break;\n        }\n      }\n      if (isComplete) validRows.push(i + 1);\n    }\n    console.error(validRows);\n    if (validRows.length) {\n      let newCells = [...cells];\n      validRows.forEach((index) => {\n        for (let j = index * width - 1; j >= 0; j--) {\n          newCells[j] = newCells[j - width] || {};\n        }\n      });\n      setTimeout(() => {\n        setCells(newCells);\n      }, 1000);\n    }\n  }, [cells]);\n  const togglegame = () => {\n    if (start) setStart(false);\n    else {\n      setCells([...Array(400)].map(() => ({})));\n      setBlock({ index: [] });\n      setNextTermino({ index: [] });\n      setPosition(0);\n      setRotation(0);\n      setTetrominoType(\"\");\n      setStart(true);\n    }\n  };\n  return (\n    <div>\n      <Grid color={\"#0f1d38\"}>\n        {cells.map(({ colors }, i) => (\n          <Cell\n            key={i}\n            colors={colors || (block.index.includes(i) && block.colors)}\n          ></Cell>\n        ))}\n      </Grid>\n      <Button onClick={togglegame}>{start ? \"Stop\" : \"Start\"}</Button>\n    </div>\n  );\n};\n\nexport default Tetris;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tenet.js",["168","169","170","171","172","173","174","175"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Pacman.js",["176","177","178","179"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\feed\\resource.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\CandyCrush.js",["180","181","182","183","184"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Temp.js",["185","186","187","188","189","190","191"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\The2048.js",["192","193","194"],"import { Button, Grid } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst CustomGrid = styled(Grid)`\n  padding: 10px;\n  box-sizing: border-box;\n  border-radius: 5px;\n`;\nconst Block = styled.div`\n  borde-radius: 5px;\n  width: 85px;\n  height: 85px;\n  margin: 5px;\n  box-sizing: border-box;\n  background: ${({ color }) => color || \"#cfc1b2\"};\n  border-radius: 5px;\n  color: ${({ value }) => (value <= 4 ? \"#776e65\" : \"white\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 42px;\n  font-weight: bold;\n`;\nconst colorMap = {\n  2: \"#f0e4d9\",\n  4: \"#efe0c5\",\n  8: \"#fcae6f\",\n  16: \"#ff9057\",\n  32: \"#ff7456\",\n  64: \"#f65e3b\",\n  128: \"#edcf72\",\n  256: \"#edcc61\",\n  512: \"#edc850\",\n  1024: \"#edc53f\",\n  2048: \"#edc22d\",\n  4096: \"#6ecc13\",\n  8192: \"#64c00b\",\n  16384: \"#61b70b\",\n  32768: \"#54a802\",\n  65536: \"#4a9400\",\n  131072: \"#5989f7\",\n};\nconst The2048 = () => {\n  const width = 4;\n  const [squares, setSquares] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const findEmptySquare = (array) => {\n    if (array.filter((e) => !e).length) {\n      let index = Math.floor(Math.random() * array.length);\n      if (!array[index]) {\n        return index;\n      } else {\n        return findEmptySquare(array);\n      }\n    } else {\n      return -1;\n    }\n  };\n  const generateNewNumber = (array) => {\n    let newIndex = findEmptySquare(array);\n    if (newIndex !== -1) {\n      let newNumbers = [2, 4];\n      newNumbers.sort(() => Math.random() - 0.5);\n      let newSquares = [...array];\n      newSquares[newIndex] = newNumbers[0];\n      setSquares(newSquares);\n    } else {\n      console.error(\"no index present\", array, newIndex);\n    }\n  };\n  const resetGame = () => {\n    generateNewNumber([...Array(width * width)].fill(0));\n  };\n  useState(() => {\n    resetGame();\n  }, []);\n  const combineRow = (row) => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] = row[i] + row[i + 1];\n        row[i + 1] = 0;\n      }\n    }\n    row = row.filter((e) => e);\n    return row;\n  };\n  const addAndMoveHorizontally = (direction) => {\n    let newSquares = [];\n    for (let i = 0; i < width * width; i += width) {\n      let totalOne = squares[i];\n      let totalTwo = squares[i + 1];\n      let totalThree = squares[i + 2];\n      let totalFour = squares[i + 3];\n      let row = [totalOne, totalTwo, totalThree, totalFour];\n      let filteredRow = row.filter((e) => e);\n      filteredRow = combineRow(filteredRow);\n      let missing = width - filteredRow.length;\n      let zeros = Array(missing).fill(0);\n      let newRow = [...zeros, ...filteredRow];\n      if (direction < 0) newRow = [...filteredRow, ...zeros];\n      newSquares = [...newSquares, ...newRow];\n    }\n    generateNewNumber(newSquares);\n  };\n  const addAndMoveVertically = (direction) => {\n    let newSquares = [];\n    for (let i = 0; i < width; i += 1) {\n      let totalOne = squares[i];\n      let totalTwo = squares[i + 1 * width];\n      let totalThree = squares[i + 2 * width];\n      let totalFour = squares[i + 3 * width];\n      let col = [totalOne, totalTwo, totalThree, totalFour];\n      let filteredCol = col.filter((e) => e);\n      filteredCol = combineRow(filteredCol);\n      let missing = width - filteredCol.length;\n      let zeros = Array(missing).fill(0);\n      let newCol = [...zeros, ...filteredCol];\n      if (direction < 0) newCol = [...filteredCol, ...zeros];\n      newSquares[i] = newCol[0];\n      newSquares[i + width] = newCol[1];\n      newSquares[i + 2 * width] = newCol[2];\n      newSquares[i + 3 * width] = newCol[3];\n    }\n    generateNewNumber(newSquares);\n  };\n\n  const keyHandler = (e) => {\n    switch (e.key) {\n      case \"ArrowRight\":\n        addAndMoveHorizontally(1);\n        break;\n      case \"ArrowLeft\":\n        addAndMoveHorizontally(-1);\n        break;\n      case \"ArrowUp\":\n        addAndMoveVertically(-1);\n        break;\n      case \"ArrowDown\":\n        addAndMoveVertically(1);\n        break;\n    }\n  };\n  useEffect(() => {\n    if (!gameOver) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [gameOver, squares]);\n  return (\n    <div>\n      <CustomGrid color={\"#bdad9e\"}>\n        {squares.map((value, i) => (\n          <Block key={i} color={colorMap[value]} value={value}>\n            {value || \"\"}\n          </Block>\n        ))}\n      </CustomGrid>\n      <Button onClick={resetGame}>(Re)start</Button>\n    </div>\n  );\n};\n\nexport default The2048;\n",{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","severity":1,"message":"200","line":2,"column":18,"nodeType":"201","messageId":"202","endLine":2,"endColumn":31},{"ruleId":"199","severity":1,"message":"203","line":3,"column":10,"nodeType":"201","messageId":"202","endLine":3,"endColumn":21},{"ruleId":"199","severity":1,"message":"204","line":3,"column":23,"nodeType":"201","messageId":"202","endLine":3,"endColumn":28},{"ruleId":"199","severity":1,"message":"205","line":4,"column":8,"nodeType":"201","messageId":"202","endLine":4,"endColumn":15},{"ruleId":"199","severity":1,"message":"206","line":5,"column":8,"nodeType":"201","messageId":"202","endLine":5,"endColumn":15},{"ruleId":"199","severity":1,"message":"207","line":8,"column":7,"nodeType":"201","messageId":"202","endLine":8,"endColumn":16},{"ruleId":"199","severity":1,"message":"208","line":14,"column":10,"nodeType":"201","messageId":"202","endLine":14,"endColumn":22},{"ruleId":"199","severity":1,"message":"209","line":14,"column":24,"nodeType":"201","messageId":"202","endLine":14,"endColumn":39},{"ruleId":"195","replacedBy":"210"},{"ruleId":"197","replacedBy":"211"},{"ruleId":"199","severity":1,"message":"212","line":4,"column":8,"nodeType":"201","messageId":"202","endLine":4,"endColumn":17},{"ruleId":"199","severity":1,"message":"213","line":15,"column":8,"nodeType":"201","messageId":"202","endLine":15,"endColumn":12},{"ruleId":"214","severity":1,"message":"215","line":53,"column":19,"nodeType":"216","messageId":"217","endLine":53,"endColumn":21},{"ruleId":"218","severity":1,"message":"219","line":90,"column":6,"nodeType":"220","endLine":90,"endColumn":49,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":92,"column":5,"nodeType":"224","messageId":"225","endLine":105,"endColumn":6},{"ruleId":"218","severity":1,"message":"226","line":110,"column":6,"nodeType":"220","endLine":110,"endColumn":34,"suggestions":"227"},{"ruleId":"218","severity":1,"message":"228","line":86,"column":24,"nodeType":"220","endLine":86,"endColumn":26,"suggestions":"229"},{"ruleId":"199","severity":1,"message":"230","line":109,"column":9,"nodeType":"201","messageId":"202","endLine":109,"endColumn":14},{"ruleId":"218","severity":1,"message":"231","line":164,"column":6,"nodeType":"220","endLine":164,"endColumn":16,"suggestions":"232"},{"ruleId":"218","severity":1,"message":"226","line":80,"column":6,"nodeType":"220","endLine":80,"endColumn":14,"suggestions":"233"},{"ruleId":"218","severity":1,"message":"234","line":117,"column":6,"nodeType":"220","endLine":117,"endColumn":33,"suggestions":"235"},{"ruleId":"222","severity":1,"message":"223","line":64,"column":5,"nodeType":"224","messageId":"225","endLine":74,"endColumn":6},{"ruleId":"218","severity":1,"message":"236","line":115,"column":6,"nodeType":"220","endLine":115,"endColumn":18,"suggestions":"237"},{"ruleId":"218","severity":1,"message":"238","line":134,"column":6,"nodeType":"220","endLine":134,"endColumn":18,"suggestions":"239"},{"ruleId":"218","severity":1,"message":"240","line":138,"column":6,"nodeType":"220","endLine":138,"endColumn":43,"suggestions":"241"},{"ruleId":"218","severity":1,"message":"242","line":70,"column":6,"nodeType":"220","endLine":70,"endColumn":15,"suggestions":"243"},{"ruleId":"218","severity":1,"message":"244","line":107,"column":6,"nodeType":"220","endLine":107,"endColumn":23,"suggestions":"245"},{"ruleId":"218","severity":1,"message":"246","line":141,"column":6,"nodeType":"220","endLine":141,"endColumn":21,"suggestions":"247"},{"ruleId":"199","severity":1,"message":"248","line":70,"column":9,"nodeType":"201","messageId":"202","endLine":70,"endColumn":16},{"ruleId":"218","severity":1,"message":"249","line":108,"column":6,"nodeType":"220","endLine":108,"endColumn":23,"suggestions":"250"},{"ruleId":"218","severity":1,"message":"251","line":151,"column":6,"nodeType":"220","endLine":151,"endColumn":32,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":204,"column":11,"nodeType":"255","endLine":204,"endColumn":36},{"ruleId":"218","severity":1,"message":"256","line":175,"column":6,"nodeType":"220","endLine":175,"endColumn":20,"suggestions":"257"},{"ruleId":"222","severity":1,"message":"223","line":216,"column":5,"nodeType":"224","messageId":"225","endLine":226,"endColumn":6},{"ruleId":"218","severity":1,"message":"226","line":231,"column":6,"nodeType":"220","endLine":231,"endColumn":20,"suggestions":"258"},{"ruleId":"214","severity":1,"message":"215","line":67,"column":59,"nodeType":"216","messageId":"217","endLine":67,"endColumn":61},{"ruleId":"218","severity":1,"message":"259","line":84,"column":6,"nodeType":"220","endLine":84,"endColumn":13,"suggestions":"260"},{"ruleId":"218","severity":1,"message":"261","line":94,"column":6,"nodeType":"220","endLine":94,"endColumn":15,"suggestions":"262"},{"ruleId":"218","severity":1,"message":"263","line":160,"column":6,"nodeType":"220","endLine":160,"endColumn":35,"suggestions":"264"},{"ruleId":"218","severity":1,"message":"265","line":177,"column":6,"nodeType":"220","endLine":177,"endColumn":15,"suggestions":"266"},{"ruleId":"218","severity":1,"message":"267","line":185,"column":6,"nodeType":"220","endLine":185,"endColumn":39,"suggestions":"268"},{"ruleId":"222","severity":1,"message":"223","line":190,"column":5,"nodeType":"224","messageId":"225","endLine":203,"endColumn":6},{"ruleId":"218","severity":1,"message":"269","line":209,"column":6,"nodeType":"220","endLine":209,"endColumn":27,"suggestions":"270"},{"ruleId":"218","severity":1,"message":"271","line":105,"column":6,"nodeType":"220","endLine":105,"endColumn":49,"suggestions":"272"},{"ruleId":"218","severity":1,"message":"273","line":132,"column":6,"nodeType":"220","endLine":132,"endColumn":42,"suggestions":"274"},{"ruleId":"253","severity":1,"message":"254","line":192,"column":17,"nodeType":"255","endLine":192,"endColumn":40},{"ruleId":"253","severity":1,"message":"254","line":199,"column":17,"nodeType":"255","endLine":199,"endColumn":62},{"ruleId":"199","severity":1,"message":"275","line":92,"column":10,"nodeType":"201","messageId":"202","endLine":92,"endColumn":15},{"ruleId":"199","severity":1,"message":"276","line":92,"column":17,"nodeType":"201","messageId":"202","endLine":92,"endColumn":25},{"ruleId":"218","severity":1,"message":"277","line":119,"column":6,"nodeType":"220","endLine":119,"endColumn":8,"suggestions":"278"},{"ruleId":"218","severity":1,"message":"279","line":167,"column":6,"nodeType":"220","endLine":167,"endColumn":18,"suggestions":"280"},{"ruleId":"218","severity":1,"message":"281","line":211,"column":6,"nodeType":"220","endLine":211,"endColumn":18,"suggestions":"282"},{"ruleId":"199","severity":1,"message":"283","line":54,"column":9,"nodeType":"201","messageId":"202","endLine":54,"endColumn":21},{"ruleId":"222","severity":1,"message":"223","line":104,"column":5,"nodeType":"224","messageId":"225","endLine":120,"endColumn":6},{"ruleId":"218","severity":1,"message":"226","line":125,"column":6,"nodeType":"220","endLine":125,"endColumn":62,"suggestions":"284"},{"ruleId":"218","severity":1,"message":"285","line":134,"column":3,"nodeType":"201","endLine":134,"endColumn":12,"suggestions":"286"},{"ruleId":"218","severity":1,"message":"287","line":172,"column":6,"nodeType":"220","endLine":172,"endColumn":15,"suggestions":"288"},{"ruleId":"253","severity":1,"message":"254","line":182,"column":17,"nodeType":"255","endLine":182,"endColumn":40},{"ruleId":"253","severity":1,"message":"254","line":204,"column":11,"nodeType":"255","endLine":204,"endColumn":58},{"ruleId":"199","severity":1,"message":"289","line":47,"column":22,"nodeType":"201","messageId":"202","endLine":47,"endColumn":33},{"ruleId":"222","severity":1,"message":"223","line":131,"column":9,"nodeType":"224","messageId":"225","endLine":140,"endColumn":10},{"ruleId":"218","severity":1,"message":"226","line":146,"column":8,"nodeType":"220","endLine":146,"endColumn":27,"suggestions":"290"},"no-native-reassign",["291"],"no-negated-in-lhs",["292"],"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'GlobalStyle' is defined but never used.","'theme' is defined but never used.","'ChatBox' is defined but never used.","'SideNav' is defined but never used.","'Container' is assigned a value but never used.","'activeFriend' is assigned a value but never used.","'setActiveFriend' is assigned a value but never used.",["291"],["292"],"'JumpSlide' is defined but never used.","'Temp' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apple' and 'moveSnake'. Either include them or remove the dependency array.","ArrayExpression",["293"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'keyHandler'. Either include it or remove the dependency array.",["294"],"React Hook useEffect has missing dependencies: 'bombCount' and 'width'. Either include them or remove the dependency array.",["295"],"'timer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'squares'. Either include it or remove the dependency array.",["296"],["297"],"React Hook useEffect has missing dependencies: 'imageArray' and 'isSameImage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVisibleArray' needs the current value of 'imageArray'.",["298"],"React Hook useEffect has a missing dependency: 'alienGroup'. Either include it or remove the dependency array.",["299"],"React Hook useEffect has missing dependencies: 'moveInvaders', 'shooterIndex', and 'start'. Either include them or remove the dependency array.",["300"],"React Hook useEffect has a missing dependency: 'moveShooter'. Either include it or remove the dependency array.",["301"],"React Hook useEffect has a missing dependency: 'calculateWinner'. Either include it or remove the dependency array.",["302"],"React Hook useEffect has a missing dependency: 'generateObstacles'. Either include it or remove the dependency array.",["303"],"React Hook useEffect has a missing dependency: 'control'. Either include it or remove the dependency array.",["304"],"'gravity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'generateObstacle'. Either include it or remove the dependency array.",["305"],"React Hook useEffect has a missing dependency: 'gameOver'. Either include it or remove the dependency array.",["306"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'cells', 'generateNewBlock', 'generateRandomNumber', and 'isBottomReached'. Either include them or remove the dependency array.",["307"],["308"],"React Hook useEffect has missing dependencies: 'fallTime' and 'reverse'. Either include them or remove the dependency array.",["309"],"React Hook useEffect has a missing dependency: 'fallTime'. Either include it or remove the dependency array.",["310"],"React Hook useEffect has a missing dependency: 'floor'. Either include it or remove the dependency array.",["311"],"React Hook useEffect has missing dependencies: 'bottom', 'fall', 'left', and 'reverse'. Either include them or remove the dependency array.",["312"],"React Hook useEffect has a missing dependency: 'fall'. Either include it or remove the dependency array.",["313"],"React Hook useEffect has a missing dependency: 'playerHandler'. Either include it or remove the dependency array.",["314"],"React Hook useEffect has a missing dependency: 'ghosts'. Either include it or remove the dependency array.",["315"],"React Hook useEffect has a missing dependency: 'moveGhosts'. Either include it or remove the dependency array.",["316"],"'start' is assigned a value but never used.","'setStart' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'restartGame'. Either include it or remove the dependency array.",["317"],"React Hook useEffect has a missing dependency: 'findValidMatch'. Either include it or remove the dependency array.",["318"],"React Hook useEffect has a missing dependency: 'moveArrayDown'. Either include it or remove the dependency array.",["319"],"'ladderHeight' is assigned a value but never used.",["320"],"React Hook useEffect contains a call to 'setFalling'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [floors, bottom, ladders, left] as a second argument to the useEffect Hook.",["321"],"React Hook useEffect has a missing dependency: 'moveBullets'. Either include it or remove the dependency array.",["322"],"'setGameOver' is assigned a value but never used.",["323"],"no-global-assign","no-unsafe-negation",{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"354","fix":"355"},{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},"Update the dependencies array to be: [snake, direction, appleConsumed, gameOver, apple, moveSnake]",{"range":"386","text":"387"},"Update the dependencies array to be: [direction, gameOver, keyHandler, snake]",{"range":"388","text":"389"},"Update the dependencies array to be: [bombCount, width]",{"range":"390","text":"391"},"Update the dependencies array to be: [gameOver, squares]",{"range":"392","text":"393"},"Update the dependencies array to be: [bottom, keyHandler]",{"range":"394","text":"395"},"Update the dependencies array to be: [imageArray, isSameImage, openPicture, visibleArray]",{"range":"396","text":"397"},"Update the dependencies array to be: [alienGroup, laserIndex]",{"range":"398","text":"399"},"Update the dependencies array to be: [alienGroup, moveInvaders, shooterIndex, start]",{"range":"400","text":"401"},"Update the dependencies array to be: [shooterIndex, alienGroup, direction, moveShooter]",{"range":"402","text":"403"},"Update the dependencies array to be: [calculateWinner, squares]",{"range":"404","text":"405"},"Update the dependencies array to be: [gameOver, generateObstacles, start]",{"range":"406","text":"407"},"Update the dependencies array to be: [bottom, control, start]",{"range":"408","text":"409"},"Update the dependencies array to be: [start, gameOver, generateObstacle]",{"range":"410","text":"411"},"Update the dependencies array to be: [obstacles, bottom, start, gameOver]",{"range":"412","text":"413"},"Update the dependencies array to be: [start, block, isBottomReached, generateRandomNumber, cells, generateNewBlock]",{"range":"414","text":"415"},"Update the dependencies array to be: [block, keyHandler, start]",{"range":"416","text":"417"},"Update the dependencies array to be: [fallTime, reverse, start]",{"range":"418","text":"419"},"Update the dependencies array to be: [fallTime, reverse]",{"range":"420","text":"421"},"Update the dependencies array to be: [reverse, fall, bottom, left, floor]",{"range":"422","text":"423"},"Update the dependencies array to be: [bottom, ceiling, fall, left, reverse]",{"range":"424","text":"425"},"Update the dependencies array to be: [ceiling, floor, bottom, reverse, fall]",{"range":"426","text":"427"},"Update the dependencies array to be: [left, bottom, start, playerHandler]",{"range":"428","text":"429"},"Update the dependencies array to be: [pacman, start, cells, direction, gameOver, ghosts]",{"range":"430","text":"431"},"Update the dependencies array to be: [ghosts, direction, start, gameOver, moveGhosts]",{"range":"432","text":"433"},"Update the dependencies array to be: [restartGame]",{"range":"434","text":"435"},"Update the dependencies array to be: [candyArray, findValidMatch]",{"range":"436","text":"437"},"Update the dependencies array to be: [candyArray, moveArrayDown]",{"range":"438","text":"439"},"Update the dependencies array to be: [falling, bottom, left, camera, bullets, shootDirection, keyHandler]",{"range":"440","text":"441"},"Add dependencies array: [floors, bottom, ladders, left]",{"range":"442","text":"443"},"Update the dependencies array to be: [bullets, moveBullets]",{"range":"444","text":"445"},"Update the dependencies array to be: [gameOver, keyHandler, squares]",{"range":"446","text":"447"},[2456,2499],"[snake, direction, appleConsumed, gameOver, apple, moveSnake]",[3083,3111],"[direction, gameOver, keyHandler, snake]",[2741,2743],"[bombCount, width]",[5023,5033],"[gameOver, squares]",[2297,2305],"[bottom, keyHandler]",[3197,3224],"[imageArray, isSameImage, openPicture, visibleArray]",[3560,3572],"[alienGroup, laserIndex]",[4013,4025],"[alienGroup, moveInvaders, shooterIndex, start]",[4175,4212],"[shooterIndex, alienGroup, direction, moveShooter]",[1688,1697],"[calculateWinner, squares]",[2855,2872],"[gameOver, generateObstacles, start]",[3947,3962],"[bottom, control, start]",[2801,2818],"[start, gameOver, generateObstacle]",[4061,4087],"[obstacles, bottom, start, gameOver]",[5371,5385],"[start, block, isBottomReached, generateRandomNumber, cells, generateNewBlock]",[7056,7070],"[block, keyHandler, start]",[2437,2444],"[fallTime, reverse, start]",[2761,2770],"[fallTime, reverse]",[4959,4988],"[reverse, fall, bottom, left, floor]",[5462,5471],"[bottom, ceiling, fall, left, reverse]",[5687,5720],"[ceiling, floor, bottom, reverse, fall]",[6441,6462],"[left, bottom, start, playerHandler]",[2846,2889],"[pacman, start, cells, direction, gameOver, ghosts]",[3801,3837],"[ghosts, direction, start, gameOver, moveGhosts]",[3235,3237],"[restartGame]",[4818,4830],"[candyArray, findValidMatch]",[6179,6191],"[candyArray, moveArrayDown]",[3351,3407],"[falling, bottom, left, camera, bullets, shootDirection, keyHandler]",[4094,4094],", [floors, bottom, ladders, left]",[4708,4717],"[bullets, moveBullets]",[4864,4883],"[gameOver, keyHandler, squares]"]