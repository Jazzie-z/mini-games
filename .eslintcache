[{"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js":"3","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js":"4","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js":"5","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js":"6","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js":"7","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js":"8","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js":"9","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js":"10","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js":"11","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js":"12","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js":"13","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js":"14","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js":"15","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js":"16","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js":"17","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js":"18","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js":"19","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js":"20","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js":"21"},{"size":197,"mtime":1607012420109,"results":"22","hashOfConfig":"23"},{"size":746,"mtime":1607424471833,"results":"24","hashOfConfig":"23"},{"size":896,"mtime":1607072319019,"results":"25","hashOfConfig":"23"},{"size":820,"mtime":1607072739385,"results":"26","hashOfConfig":"23"},{"size":372,"mtime":1607072332112,"results":"27","hashOfConfig":"23"},{"size":1928,"mtime":1607072607427,"results":"28","hashOfConfig":"23"},{"size":1430,"mtime":1607072225070,"results":"29","hashOfConfig":"23"},{"size":494,"mtime":1607408914680,"results":"30","hashOfConfig":"23"},{"size":392,"mtime":1607072637770,"results":"31","hashOfConfig":"23"},{"size":143,"mtime":1607071297313,"results":"32","hashOfConfig":"23"},{"size":197,"mtime":1607012420109,"results":"33","hashOfConfig":"34"},{"size":1290,"mtime":1607581877401,"results":"35","hashOfConfig":"34"},{"size":392,"mtime":1607072637770,"results":"36","hashOfConfig":"34"},{"size":4091,"mtime":1607581979254,"results":"37","hashOfConfig":"34"},{"size":6304,"mtime":1607575278559,"results":"38","hashOfConfig":"34"},{"size":691,"mtime":1607581847193,"results":"39","hashOfConfig":"34"},{"size":2914,"mtime":1607497031567,"results":"40","hashOfConfig":"34"},{"size":4458,"mtime":1607575212699,"results":"41","hashOfConfig":"34"},{"size":5378,"mtime":1607581970017,"results":"42","hashOfConfig":"34"},{"size":2326,"mtime":1607581986258,"results":"43","hashOfConfig":"34"},{"size":5263,"mtime":1607582115331,"results":"44","hashOfConfig":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1uw3rlt",{"filePath":"48","messages":"49","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"1it9hws",{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"68"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"68"},"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js",[],["97","98"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js",["99","100","101","102","103","104","105","106"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js",[],["107","108"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js",["109"],"import { Title } from 'components/common';\r\nimport ChromeDino from 'games/ChromeDino';\r\nimport JumpSlide from 'games/JumpSlide';\r\nimport { MemoryGame } from 'games/MemoryGame';\r\nimport Minesweeper from 'games/Minesweeper';\r\nimport SnakeGame from 'games/SnakeGame';\r\nimport SpaceInvaders from 'games/SpaceInvaders';\r\nimport TicTacToe from 'games/TicTacToe';\r\nimport styled from 'styled-components';\r\n\r\nconst Grid = styled.div`\r\ndisplay:flex;\r\nflex-wrap:wrap;\r\nfont-family: sans-serif;\r\n>div{\r\n  margin: 10px;\r\n}\r\n`\r\nwindow.addEventListener(\"keydown\", function (e) {\r\n  // disable arrow keys scrolling\r\n  if ([\"ArrowRight\", \"ArrowLeft\", \"ArrowUp\", \"ArrowDown\",].includes(e.key)) {\r\n    e.preventDefault();\r\n  }\r\n}, false);\r\n\r\nconst App = () => {\r\n  const games = [\r\n    { title: 'Snake Game', Game: <SnakeGame /> },\r\n    { title: 'Minesweeper', Game: <Minesweeper /> },\r\n    // { title: 'Jump Slide', Game: <JumpSlide/> },\r\n    { title: 'Memory Game', Game: <MemoryGame /> },\r\n    { title: 'Space Invaders', Game: <SpaceInvaders /> },\r\n    { title: 'Tic Tac Toe', Game: <TicTacToe /> },\r\n    { title: 'Chrome Dino', Game: <ChromeDino /> },\r\n  ]\r\n  return (<Grid>\r\n    {games.map(({ title, Game }) => <div key={title}><Title>{title}</Title>{Game}</div>)}\r\n  </Grid>)\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js",["110","111","112","113"],"import { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Button, Grid, Result } from 'components/common';\r\n\r\nconst Snake = css`\r\nbackground:orange;\r\nborder-radius:50%;\r\n`\r\nconst Apple = css`\r\nbackground: lime;\r\nborder-radius:50%;\r\n`\r\nconst Box = styled.div`\r\nwidth:10px;\r\nheight:10px;\r\n${({ isSnake }) => isSnake && Snake};\r\n${({ isApple }) => isApple && Apple};\r\n`\r\nlet timer = null\r\nconst SnakeGame = () => {\r\n    const [snake, setSnake] = useState([0, 1, 2]);\r\n    const [apple, setApple] = useState('')\r\n    const [direction, setDirection] = useState(1)\r\n    const interval = 100;\r\n    const width = 40\r\n    const [appleConsumed, setAppleConsumed] = useState(0);\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const generateApple = () => {\r\n        const newApple = Math.floor(Math.random() * ((width * width) - 1));\r\n        if (snake.includes(newApple)) {\r\n            generateApple()\r\n        } else {\r\n            setApple(newApple)\r\n        }\r\n    }\r\n    const restartGame = () => {\r\n        setSnake([0, 1, 2])\r\n        setDirection(1)\r\n        setAppleConsumed(0)\r\n        setGameOver(false)\r\n        generateApple()\r\n    }\r\n    const stopGame = () => {\r\n        clearTimeout(timer)\r\n        setApple('')\r\n        window.removeEventListener('keydown', keyHandler)\r\n    }\r\n    const isSnakeBody = (value) => snake.includes(value) && snake[snake.length - 2] !== value && console.log(snake[snake.length - 2] !== value);\r\n    const isOutOfScreen = (value, direction) => {\r\n        if (direction == 1) {\r\n            return value % width === 0\r\n        } else if (direction === -1) {\r\n            return (value + 1) % width === 0\r\n        }\r\n        return value >= (width * width) || value < 0\r\n    }\r\n    const moveSnake = () => {\r\n        let newSnakePos = [...snake];\r\n        if (!appleConsumed) {\r\n            newSnakePos.shift();\r\n        } else {\r\n            setAppleConsumed(prev => prev - 1)\r\n        }\r\n        let nextCell = newSnakePos[newSnakePos.length - 1] + direction\r\n        if (isSnakeBody(nextCell) || isOutOfScreen(nextCell, direction)) {\r\n            setGameOver(true)\r\n            return\r\n        } else {\r\n            newSnakePos.push(nextCell)\r\n        }\r\n        if (newSnakePos.includes(apple)) {\r\n            setAppleConsumed(prev => prev + 1)\r\n            generateApple()\r\n        }\r\n        setSnake(newSnakePos)\r\n    }\r\n    useEffect(() => {\r\n        if(gameOver) {\r\n            clearTimeout(timer)\r\n            return\r\n        }\r\n        timer = setTimeout(() => {\r\n            if (gameOver) clearTimeout(timer)\r\n            if (apple !== '') moveSnake()\r\n        }, interval);\r\n        return () => clearTimeout(timer)\r\n    }, [snake, direction, appleConsumed, gameOver])\r\n    const keyHandler = (e) => {\r\n        switch (e.key) {\r\n            case \"ArrowRight\":\r\n                if (direction !== -1)\r\n                    setDirection(1);\r\n                break;\r\n            case \"ArrowLeft\":\r\n                if (direction !== 1)\r\n                    setDirection(-1);\r\n                break;\r\n            case \"ArrowUp\":\r\n                if (direction !== width)\r\n                    setDirection(-width);\r\n                break;\r\n            case \"ArrowDown\":\r\n                if (direction !== -width)\r\n                    setDirection(width);\r\n                break;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (!gameOver)\r\n            window.addEventListener('keydown', keyHandler)\r\n        return () => window.removeEventListener('keydown', keyHandler)\r\n    }, [direction, gameOver, snake])\r\n    return <div><Grid color={'#253243'}>\r\n        {[...new Array(width * width)].map((e, i) => <Box\r\n            key={i}\r\n            isSnake={snake.includes(i)}\r\n            isApple={i === apple} ></Box>)}\r\n    </Grid>\r\n        <Button onClick={apple ? stopGame : restartGame}>{apple ? 'STOP' : 'START'}</Button>\r\n        {gameOver ? <Result>GAME OVER!!!\r\n            <div>your score : {snake.length - 3}</div>\r\n        </Result> : ''}\r\n    </div>\r\n}\r\n\r\nexport default SnakeGame\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js",["114","115","116"],"import { Button, Grid, Result } from 'components/common'\r\nimport React, { useEffect, useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\n\r\nconst Bomb = css`\r\n    background:orange;\r\n    font-size: 48px;\r\n`\r\nconst Open = css`\r\n    background:white;\r\n    color:black;\r\n    border: 3px inset #1C6EA4;\r\n`\r\nconst Empty = css`\r\n    background: #e1e1e1;\r\n    border-color:#b1b1b1;\r\n`\r\nconst Dash = css`\r\n    background: red;\r\n`\r\nconst Block = styled.div`\r\n    height: 40px;\r\n    width: 40px;\r\n    display:flex;\r\n    font-family:sans-serif;\r\n    align-items:center;\r\n    justify-content:center;\r\n    font-size:24px;\r\n    cursor:pointer;\r\n    box-sizing: border-box;\r\n    border: 6px outset #1C6EA4;    \r\n    color:white;\r\n    ${({ show }) => show && Open};\r\n    ${({ show, isBomb }) => show && isBomb && Bomb};\r\n    ${({ show, empty }) => show && empty && Empty};\r\n    ${({ dash }) => dash && Dash};\r\n`\r\n// const Result = styled.div`\r\n//     font-size: 24px;\r\n//     padding: 10px;\r\n// `\r\nconst Minesweeper = () => {\r\n    let width = 10;\r\n    let bombCount = 20;\r\n\r\n    const [squares, setSquares] = useState([])\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const startGame = () => {\r\n        setGameOver(false)\r\n        const bombsArray = Array(bombCount).fill({ value: '*' });\r\n        const emptyArray = Array((width * width) - bombCount).fill({ value: '' });\r\n        const gamesArray = [...emptyArray, ...bombsArray];\r\n        const shuffledArray = gamesArray.sort(() => Math.random() - 0.5)\r\n\r\n        for (let i = 0; i < shuffledArray.length; i++) {\r\n            let total = 0;\r\n            const isLeftEdge = (i % width === 0);\r\n            const isRightEdge = (i % width === width - 1);\r\n            // layout to check\r\n            // 7 8 9\r\n            // 4 _ 6\r\n            // 1 2 3\r\n            if (!shuffledArray[i].value) {\r\n                if (i > 0 && !isLeftEdge && shuffledArray[i - 1].value === '*') total++   //bomb at left (4)\r\n                if (i > 11 && !isLeftEdge && shuffledArray[i - 1 - width].value === '*') total++ //bomb at top left(7)                \r\n                if (i > 9 && shuffledArray[i - width].value === '*') total++ //bomb at top (8)\r\n                if (i > 9 && !isRightEdge && shuffledArray[i + 1 - width].value === '*') total++  //bomb at top right (9)\r\n                if (i < 99 && !isRightEdge && shuffledArray[i + 1].value === '*') total++ //bomb at right(6)                \r\n                if (i < 88 && !isRightEdge && shuffledArray[i + 1 + width].value === '*') total++ //bomb at right bottom(3)\r\n                if (i < 89 && shuffledArray[i + width].value === '*') total++ //bomb at bottom(2)\r\n                if (i < 90 && !isLeftEdge && shuffledArray[i - 1 + width].value === '*') total++ //bomb at left bottom(1)                \r\n                shuffledArray[i] = { value: total || '' };\r\n            }\r\n        }\r\n        setSquares(shuffledArray)\r\n    }\r\n    useEffect(startGame, [])\r\n    const clickHandler = (index) => {\r\n        if (gameOver || squares[index].show || squares[index].flag) return\r\n        if (squares[index].value === '*') {\r\n            let newSquares = [...squares]\r\n            newSquares[index] = { value: '*', dash: true };\r\n            setSquares(newSquares)\r\n            setGameOver(true)\r\n        } else {\r\n            let newSquares = [...squares]\r\n            newSquares[index].show = true;\r\n            setSquares(newSquares)\r\n            if (newSquares[index].value) {\r\n                return\r\n            }\r\n            checkSquares(index)\r\n        }\r\n    }\r\n    const isNotABomb = (cell) => cell.value !== '*'\r\n    const checkSquares = (index) => {\r\n        const isLeftEdge = (index % width === 0);\r\n        const isRightEdge = (index % width === width - 1);\r\n        console.error('initialized again')\r\n        let timer = setTimeout(() => {\r\n            if (index > 0 && !isLeftEdge) { //toward left\r\n                if (isNotABomb(squares[index - 1])) {\r\n                    clickHandler(index - 1)\r\n                }\r\n\r\n            }\r\n            if (index > 9 && !isRightEdge) { //toward upper right\r\n                if (isNotABomb(squares[index + 1 - width])) {\r\n                    clickHandler(index + 1 - width)\r\n                }\r\n\r\n            }\r\n            if (index > 10) { //toward up\r\n                if (isNotABomb(squares[index - width])) {\r\n                    clickHandler(index - width)\r\n                }\r\n\r\n            }\r\n            if (index > 11 && !isLeftEdge) {  //toward upper left\r\n                if (isNotABomb(squares[index - 1 - width])) {\r\n                    clickHandler(index - 1 - width)\r\n                }\r\n\r\n            }\r\n            if (index < 98 && !isRightEdge) { //toward right\r\n                if (isNotABomb(squares[index + 1])) {\r\n                    clickHandler(index + 1)\r\n                }\r\n\r\n            }\r\n            if (index < 90 && !isLeftEdge) { //toward lower left\r\n                if (isNotABomb(squares[index - 1 + width])) {\r\n                    clickHandler(index - 1 + width)\r\n                }\r\n\r\n            }\r\n            if (index < 88 && !isRightEdge) {\r\n                if (isNotABomb(squares[index + 1 + width])) {\r\n                    clickHandler(index + 1 + width)\r\n                }\r\n\r\n            }\r\n            if (index < 89) {\r\n                if (isNotABomb(squares[index + width])) {\r\n                    clickHandler(index + width)\r\n                }\r\n\r\n            }\r\n        }, 10)\r\n    }\r\n    useEffect(() => {\r\n        if (gameOver) {\r\n            let newSquares = [...squares].map(e => ({ ...e, show: true }))\r\n            console.error(newSquares)\r\n            setSquares(newSquares)\r\n        }\r\n    }, [gameOver])\r\n    return (\r\n        <div>\r\n            <Grid color={'#115481'}> \r\n                {squares.map(({ value, show, dash }, i) => <Block key={i}\r\n                    isBomb={value === '*'}\r\n                    dash={dash}\r\n                    show={show}\r\n                    empty={!value}\r\n                    onClick={() => clickHandler(i)}>{show ? value : ''}</Block>)}\r\n            </Grid>\r\n            <Button onClick={startGame}>(RE)START</Button>\r\n            {gameOver ? <Result>GAME OVER!!!</Result> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Minesweeper\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js",["117"],"import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nconst Game = styled.div``\r\nconst Character = styled.div`\r\n    background-color:red;\r\n    height:70px;\r\n    width:40px;\r\n    position: absolute;\r\n    bottom:${({ bottom }) => bottom}px;\r\n    left:${({ left }) => left}px;\r\n`\r\nlet jumpTimer = null\r\nlet slideTimer = null\r\nconst JumpSlide = () => {\r\n    const gravity = 0.9\r\n    const [bottom, setBottom] = useState(0)        \r\n    const [jump, setJump] = useState(false)\r\n    const [left, setLeft] = useState(0)\r\n    const [slide, setSlide] = useState('')\r\n    const keyHandler = (e) => {\r\n        if (e.key === ' ' && bottom <= 0) setJump(true)\r\n        if (e.key === 'ArrowLeft') setSlide('LEFT')\r\n        else if (e.key === 'ArrowRight') setSlide('RIGHT')\r\n        else if(e.key === 'ArrowDown')setSlide('')\r\n    }\r\n    useEffect(() => {\r\n        // if (bottom) {\r\n            if (slide === 'RIGHT') {\r\n                clearTimeout(slideTimer)\r\n                slideTimer = setTimeout(() => {\r\n                    let newLeft = left + 5;\r\n                    setLeft(newLeft)\r\n                }, 20)\r\n                // if (bottom == 0) setSlide('')\r\n            }\r\n            else if (slide === 'LEFT') {\r\n                clearTimeout(slideTimer)\r\n                slideTimer= setTimeout(()=>{\r\n                    let newLeft = left - 5;\r\n                    setLeft(newLeft)\r\n                },20)\r\n                // if (bottom == 0) setSlide('')\r\n            } else {\r\n                setSlide('')\r\n                clearTimeout(slideTimer)\r\n            }\r\n        // } else {\r\n        //     setSlide('')\r\n        //     clearTimeout(slideTimer)\r\n        // }        \r\n    }, [slide, left, bottom])\r\n    useEffect(() => {\r\n        //going up\r\n        if (jump) {\r\n            console.error('going to jumping')\r\n            jumpTimer = setTimeout(() => {\r\n                let newBottom = bottom + 30;\r\n                newBottom *= gravity;\r\n                setBottom(newBottom);\r\n                console.error(bottom * gravity)\r\n            }, 20)\r\n            if (bottom > 250) {\r\n                clearTimeout(jumpTimer)\r\n                setJump(false)\r\n            }\r\n        } else if (bottom > 0) {\r\n            console.error('coming back')\r\n            jumpTimer = setTimeout(() => {\r\n                let newBottom = (bottom - 5) < 0 ? 0 : bottom - 5\r\n                setBottom(newBottom);\r\n            }, 20)\r\n        } else {\r\n            console.error('just clearing', bottom)\r\n            clearTimeout(jumpTimer)\r\n        }\r\n    }, [jump, bottom])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', keyHandler)\r\n        return () => window.removeEventListener('keydown', keyHandler)\r\n    }, [bottom])\r\n    return (\r\n        <Game>\r\n            <Character bottom={bottom} left={left}/>\r\n        </Game>\r\n    )\r\n}\r\n\r\nexport default JumpSlide\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js",["118"],"import React, { useEffect, useState } from 'react'\r\nimport Image1 from 'assets/images/1.jpg'\r\nimport Image2 from 'assets/images/2.jpg'\r\nimport Image3 from 'assets/images/3.jpg'\r\nimport Image4 from 'assets/images/4.jpg'\r\nimport Image5 from 'assets/images/5.jpg'\r\nimport Image6 from 'assets/images/6.jpg'\r\nimport Image7 from 'assets/images/7.jpg'\r\nimport Image8 from 'assets/images/8.jpg'\r\nimport styled, { css } from 'styled-components'\r\nimport { Button, Grid, Result } from 'components/common'\r\n\r\nconst Hide = css`\r\n    transform: rotateY(180deg);\r\n`\r\nconst Show = css`\r\n    transform: rotateY(0);\r\n`\r\nconst Card = styled.div`\r\n  position: relative;\r\n  width: 100px;\r\n  height: 100px;\r\n  text-align: center;\r\n  transition: transform 0.6s;\r\n  transform-style: preserve-3d;\r\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n  ${({ hide }) => hide && Hide};\r\n  ${({ show }) => show && Show};\r\n`\r\nconst Layer = css`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  -webkit-backface-visibility: hidden;\r\n  backface-visibility: hidden;\r\n`\r\nconst Image = styled.img`\r\n  ${Layer};\r\n  left:0;\r\n`\r\nconst Fallback = styled.div`\r\n${Layer};\r\n  background-color: #2980b9;\r\n  color: white;\r\n  transform: rotateY(180deg);\r\n`\r\nconst Time = styled.div`\r\ntext-align:center;\r\npadding: 10px 0;\r\n`\r\nlet timer = null\r\nexport const MemoryGame = () => {\r\n    const [start, setStart] = useState(false)\r\n    const [imageArray, setImages] = useState(Array(16).fill({}));\r\n    const [hide, setHide] = useState(false);\r\n    const [visibleArray, setVisibleArray] = useState([]);\r\n    const [openPicture, setOpenPicture] = useState([]);\r\n    const [time, setTime] = useState(65);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const generateRandomImage = () => {\r\n        let randomImage = [{ path: Image1, id: 1 }, { path: Image2, id: 2 }, { path: Image3, id: 3 },\r\n        { path: Image4, id: 4 }, { path: Image5, id: 5 }, { path: Image6, id: 6 },\r\n        { path: Image7, id: 7 }, { path: Image8, id: 8 }];\r\n        randomImage = randomImage.concat(randomImage)\r\n        randomImage = randomImage.sort(() => Math.random() - 0.5);\r\n        setImages(randomImage)\r\n        setTimeout(() => setHide(true), 5000)\r\n    }\r\n    useEffect(() => {\r\n        if (start) {\r\n            setHide(false)\r\n            generateRandomImage()\r\n        } else {\r\n            setHide(true)\r\n            setTime(65)\r\n            setVisibleArray([])\r\n            setOpenPicture([])\r\n            setGameOver(false)\r\n            clearTimeout(timer)\r\n        }\r\n    }, [start])\r\n    useEffect(() => {\r\n        if (start && !gameOver) {\r\n            if (time) {\r\n                timer = setTimeout(() => {\r\n                    setTime(prev => prev - 1)\r\n                }, 1000)\r\n            } else {\r\n                setGameOver('GAME OVER')\r\n            }\r\n        }\r\n    }, [time, gameOver, start])\r\n\r\n    const isSameImage = ([index1, index2]) => imageArray[index1].id === imageArray[index2].id\r\n    useEffect(() => {\r\n        if (openPicture.length === 2) {\r\n            if (isSameImage(openPicture)) {\r\n                setVisibleArray(prev => [...prev, imageArray[openPicture[0]].id])\r\n                setOpenPicture([])\r\n            } else {\r\n                setTimeout(() => {\r\n                    setOpenPicture([])\r\n                }, 500)\r\n            }\r\n        } else if (visibleArray.length === 8) {\r\n            setGameOver('SUCCESS')\r\n            clearTimeout(timer)\r\n        }\r\n    }, [openPicture, visibleArray])\r\n    const clickHandler = (index) => {\r\n        if (openPicture.length < 2 && hide && !gameOver && start && !openPicture.includes(index))\r\n            setOpenPicture(prev => [...prev, index])\r\n    }\r\n    const stopGame = () => {\r\n        setStart(prev => !prev)\r\n    }\r\n    return (\r\n        <div>\r\n            <Grid>\r\n                {imageArray.map(({ path, id }, index) => (\r\n                    <Card key={index} hide={hide} onClick={() => clickHandler(index)}\r\n                        show={openPicture.includes(index) || visibleArray.includes(id)}>\r\n                        <Image src={path} />\r\n                        <Fallback />\r\n                    </Card>))}\r\n            </Grid>\r\n            {start ? <Time>Remaining Time : {time}</Time> : ''}\r\n            <Button onClick={stopGame}>{start ? 'STOP' : 'START'}</Button>\r\n            {gameOver ? <Result>{gameOver} !!!<div>Your score : {visibleArray.length}</div></Result> : ''}\r\n        </div>\r\n    )\r\n}","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js",["119","120","121","122"],"import { Button, Grid, Result } from 'components/common'\r\nimport React, { useEffect, useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport AlienImage from 'assets/images/alien.png'\r\nimport Jet from 'assets/images/jet.png'\r\nimport ExplosionGif from 'assets/images/explosion.gif'\r\n\r\nconst Shooter = css`\r\n    background-image:url(${Jet});\r\n    background-size: cover;\r\n`\r\nconst Invader = css`\r\n    background-image:url(${AlienImage});\r\n    background-size: contain;\r\n`\r\nconst Explosion = css`    \r\n    background-image:url(${ExplosionGif});\r\n    background-size: contain;\r\n    z-index:2;\r\n    position:relative;\r\n    \r\n`\r\nconst Laser = css`\r\n    background-color: yellow;\r\n    box-shadow: 0px 0px 16px 7px #ffae00;\r\n    z-index:2;\r\n    position:relative;\r\n    width:5px;\r\n    height:10px;\r\n    margin:0 auto;\r\n`\r\nconst Cell = styled.div`\r\nwidth: 20px;\r\nheight: 20px;\r\nbox-sizing:border-box;\r\n${({ isInvader }) => isInvader && Invader};\r\n${({ isShooter }) => isShooter && Shooter};\r\n${({ isLaser }) => isLaser && Laser};\r\n${({ isExplosion }) => isExplosion && Explosion};\r\n`\r\nlet timer = null\r\nlet laserTimer = null\r\nconst SpaceInvaders = () => {\r\n    const width = 20;\r\n    const totalAlien = 33;\r\n    const [shooterIndex, setShooterIndex] = useState(385);\r\n    const [explodeIndex, setExplodeIndex] = useState('');\r\n    const [direction, setDirection] = useState(1);\r\n    const [alienGroup, setAlienGroup] = useState([]);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [laserIndex, setLaserIndex] = useState('')\r\n    const [start, setStart] = useState(false)\r\n    useEffect(() => {\r\n        let alienLayout = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\r\n            20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\r\n            40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\r\n        setDirection(1)\r\n        setAlienGroup(alienLayout)\r\n    }, [start])\r\n    const moveShooter = (e) => {\r\n        if (!start) return\r\n        switch (e.key) {\r\n            case 'ArrowRight':\r\n                if (shooterIndex % width < width - 1)\r\n                    setShooterIndex(shooterIndex + 1)\r\n                break\r\n            case 'ArrowLeft':\r\n                if (shooterIndex % width)\r\n                    setShooterIndex(shooterIndex - 1)\r\n                break\r\n            case 'ArrowUp':\r\n                shoot()\r\n                break\r\n        }\r\n    }\r\n    const moveInvaders = () => {\r\n        const leftEdge = (alienGroup[0] % width === 0)\r\n        // const rightEdge = (alienGroup[alienGroup.length - 1] % width === width - 1)\r\n        const rightEdge = alienGroup.find(alien => alien % width === width - 1)\r\n        let newDirection = direction;\r\n        if ((leftEdge && direction === -1) || (rightEdge && direction === 1)) {\r\n            newDirection = width\r\n        } else if (direction === width) {\r\n            if (leftEdge) newDirection = 1\r\n            else newDirection = -1\r\n        }\r\n        setDirection(newDirection)\r\n        setAlienGroup(prev => prev.map(e => e + newDirection))\r\n    }\r\n    const shoot = () => {\r\n        setLaserIndex(shooterIndex - width)\r\n    }\r\n    useEffect(() => {\r\n        if (laserIndex) {\r\n            if (alienGroup.includes(laserIndex)) {\r\n                setExplodeIndex(laserIndex)\r\n                let newAlien = [...alienGroup]\r\n                newAlien.splice(newAlien.indexOf(laserIndex), 1)\r\n                console.error(laserIndex, newAlien)\r\n                setLaserIndex('')\r\n                setAlienGroup(newAlien)\r\n                setTimeout(() => {\r\n                    setExplodeIndex('')\r\n                }, 250)\r\n            } else {\r\n                laserTimer = setTimeout(() => {\r\n                    setLaserIndex(prev => prev - width)\r\n                }, 50)\r\n            }\r\n        }\r\n        return () => clearTimeout(laserTimer)\r\n    }, [laserIndex])\r\n\r\n    useEffect(() => {\r\n        if (start) {\r\n            if (alienGroup.includes(shooterIndex)) {\r\n                setGameOver('GAME OVER')\r\n                clearTimeout(timer)\r\n            } else if (!alienGroup.length) {\r\n                setGameOver('SUCCESS')\r\n                clearTimeout(timer)\r\n            } else {\r\n                timer = setTimeout(() => {\r\n                    moveInvaders()\r\n                }, 500)\r\n            }\r\n        } else {\r\n            clearTimeout(timer)\r\n        }\r\n        return () => clearTimeout(timer)\r\n    }, [alienGroup])\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', moveShooter)\r\n        return () => window.removeEventListener('keydown', moveShooter)\r\n    }, [shooterIndex, alienGroup, direction])\r\n    const toggleGame = () => {\r\n        setStart(prev => !prev)\r\n    }\r\n    return (\r\n        <div>\r\n            <Grid color={'black'}>\r\n                {[...Array(width * width)].map((e, i) => <Cell\r\n                    key={i}\r\n                    isInvader={alienGroup.includes(i)}\r\n                    isShooter={shooterIndex === i}\r\n                    isLaser={laserIndex === i}\r\n                    isExplosion={explodeIndex === i}\r\n                ></Cell>)}\r\n            </Grid>\r\n            <Button onClick={toggleGame}>{start ? 'STOP' : 'Start'}</Button>\r\n            {gameOver ? <Result>{gameOver}</Result> : ''}\r\n            <div>your score : {totalAlien - alienGroup.length}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpaceInvaders\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js",["123"],"import { Button, Result } from 'components/common'\r\nimport React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Grid = styled.div`\r\n    width: 400px;\r\n    height: 400px;\r\n    background: #32475b;\r\n    display:flex;\r\n    flex-wrap:wrap;\r\n`\r\nconst Block = styled.div`\r\n    border: 1px solid #3e5468;\r\n    width: 133.33px;\r\n    height: 133.33px;\r\n    box-sizing: border-box;\r\n    font-size: 100px;\r\n    font-family: sans-serif;\r\n    color: white;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center; \r\n`\r\nconst TicTacToe = () => {\r\n    const [squares, setSquares] = useState([]);\r\n    const [xIsNext, setxIsNext] = useState();\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const resetGame = () => {\r\n        setSquares([...Array(9)])\r\n        setxIsNext(true)\r\n        setGameOver(false)\r\n    }\r\n    useEffect(() => {\r\n        resetGame()\r\n    }, [])\r\n    const calculateWinner = () => {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    useEffect(() => {\r\n        const winner = calculateWinner()\r\n        if (winner) {\r\n            setGameOver(`Winner is : ${winner}`)\r\n        } else if (squares.length && !squares.includes(undefined)) {\r\n            setGameOver(`Game Over !!!`)\r\n        }\r\n    }, [squares])\r\n    const onClick = (i) => {\r\n        const newSquares = [...squares];\r\n        if (gameOver || newSquares[i]) return\r\n        newSquares[i] = xIsNext ? 'X' : 'O';\r\n        setSquares(newSquares)\r\n        setxIsNext(prev => !prev);\r\n    }\r\n    return (\r\n        <div>\r\n            <Grid>\r\n                {squares.map((value, i) => <Block key={i} onClick={() => onClick(i)}>{value}</Block>)}\r\n            </Grid>\r\n            <Button onClick={resetGame}>RESTART</Button>\r\n            {gameOver ? <Result>{gameOver}</Result> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TicTacToe\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js",["124","125"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Grid, Result } from 'components/common'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport Joker from 'assets/images/joker.jfif'\r\nimport Batman from 'assets/images/batman.gif'\r\nimport City from 'assets/images/city.png'\r\n\r\nconst Dino = styled.div`\r\n    width: 60px;\r\n    height:60px;\r\n    background-image:url(${Batman});\r\n    bottom: ${({ bottom }) => bottom}px;\r\n    position:absolute;\r\n    left: 80px;\r\n    background-size: cover;\r\n    background-position-x: center;\r\n    mix-blend-mode: multiply;\r\n    z-index:5;\r\n`\r\nconst Obstacle = styled.div`\r\n    position: absolute;\r\n    width: 40px;\r\n    height: 50px;\r\n    background-image:url(${Joker});\r\n    left: ${({ left }) => left}px;\r\n    bottom:0;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    mix-blend-mode: multiply;\r\n    z-index:5;\r\n`\r\nconst Animate = keyframes`\r\n0% { transform: translateX(0);}\r\n50%{ transform :translateX(-400px);}\r\n100%{ transform: translateX(0);}\r\n`\r\nconst Image = styled.img`\r\nheight: 50%;\r\nmargin-top: 30%;\r\n${({ shouldAnimate }) => shouldAnimate && css`\r\n    animation: ${Animate} 15s linear infinite};\r\n`}\r\n\r\n`\r\nconst Score = styled.div`\r\nposition:absolute;\r\nleft: 50%;\r\ntransform: translateX(-50%);\r\ntop: 50px;\r\nfont-size: 24px;\r\n`\r\nlet jumpTimer = null\r\nlet slideTimer = null\r\nlet generateTimer = null\r\nconst ChromeDino = () => {\r\n    const dinoPosition = 80;\r\n    const dinoWidth = 60;\r\n    const obstacleHeight = 40;\r\n    const [bottom, setBottom] = useState(0);\r\n    const [jump, setJump] = useState(false);\r\n    const [obstacles, setObstacles] = useState([]);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const [start, setStart] = useState(false);\r\n    const gravity = 0.9;\r\n    useEffect(() => {\r\n        if (!start || gameOver) return\r\n        if (jump) {\r\n            //going up\r\n            jumpTimer = setTimeout(() => {\r\n                let newBottom = bottom + 30;\r\n                newBottom *= gravity;\r\n                setBottom(newBottom);\r\n            }, 20)\r\n            if (bottom > 200) {\r\n                clearTimeout(jumpTimer)\r\n                setJump(false)\r\n            }\r\n        } else if (bottom > 0) {\r\n            // coming down\r\n            jumpTimer = setTimeout(() => {\r\n                let newBottom = (bottom - 30) < 0 ? 0 : bottom - 30\r\n                newBottom *= gravity;\r\n                setBottom(newBottom);\r\n            }, 20)\r\n        } else {\r\n            clearTimeout(jumpTimer)\r\n        }\r\n        return () => clearTimeout(jumpTimer)\r\n    }, [jump, bottom, gameOver, start])\r\n    const generateObstacles = () => {\r\n        if (start && !gameOver) {\r\n            let obstaclePosition = 400;\r\n            setObstacles(prev => [...prev, obstaclePosition])\r\n            let min = 2000;\r\n            let max = 3000\r\n            let randomTime = Math.floor(Math.random() * (max - min + 1)) + min;\r\n            generateTimer = setTimeout(() => {\r\n                generateObstacles()\r\n            }, randomTime)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        generateObstacles()\r\n    }, [gameOver, start])\r\n    useEffect(() => {\r\n        let isColidingPosition = obstacles.find(e => e > dinoPosition && e < (dinoPosition + dinoWidth))\r\n        if (isColidingPosition && bottom <= obstacleHeight) {\r\n            setGameOver(true)\r\n            clearTimeout(generateTimer)\r\n        }\r\n    }, [obstacles, bottom])\r\n\r\n    useEffect(() => {\r\n        if (start && !gameOver && obstacles.length) {\r\n            slideTimer = setTimeout(() => {\r\n                let newPosition = [...obstacles].map(value => value - 30)\r\n                let newScore = newPosition.filter(value => value <= 0 - 30).length;\r\n                newPosition = newPosition.filter(value => value > 0 - 30)\r\n                setScore(prev => prev + newScore)\r\n                setObstacles(newPosition)\r\n            }, 100)\r\n        }\r\n        return () => {\r\n            clearTimeout(slideTimer)\r\n        }\r\n    }, [obstacles, gameOver, start])\r\n\r\n    const control = (e) => {\r\n        if ([' ', 'ArrowUp'].includes(e.key)) {\r\n            if (!bottom)\r\n                setJump(true)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (start)\r\n            window.addEventListener('keydown', control)\r\n        return () => window.removeEventListener('keydown', control)\r\n    }, [bottom, start])\r\n    const toggleGame = () => {\r\n        if (start) {\r\n            setStart(false)\r\n        } else {\r\n            clearTimeout(generateTimer)\r\n            setObstacles([])\r\n            setGameOver(false)\r\n            setScore(0)\r\n            setStart(true)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Grid border={'black'}>\r\n                <Dino bottom={bottom} />\r\n                {obstacles.map((left,i) => <Obstacle key={i} left={left} />)}\r\n                {score ? <Score>score : {score}</Score> : ''}\r\n                <Image src={City} shouldAnimate={start && !gameOver} />\r\n            </Grid>\r\n            <Button onClick={toggleGame}>{start ? 'Stop' : 'Start'}</Button>\r\n            {gameOver ? <Result>Game Over!!!</Result> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChromeDino\r\n",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":2,"column":18,"nodeType":"132","messageId":"133","endLine":2,"endColumn":31},{"ruleId":"130","severity":1,"message":"134","line":3,"column":10,"nodeType":"132","messageId":"133","endLine":3,"endColumn":21},{"ruleId":"130","severity":1,"message":"135","line":3,"column":23,"nodeType":"132","messageId":"133","endLine":3,"endColumn":28},{"ruleId":"130","severity":1,"message":"136","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":15},{"ruleId":"130","severity":1,"message":"137","line":5,"column":8,"nodeType":"132","messageId":"133","endLine":5,"endColumn":15},{"ruleId":"130","severity":1,"message":"138","line":8,"column":7,"nodeType":"132","messageId":"133","endLine":8,"endColumn":16},{"ruleId":"130","severity":1,"message":"139","line":14,"column":10,"nodeType":"132","messageId":"133","endLine":14,"endColumn":22},{"ruleId":"130","severity":1,"message":"140","line":14,"column":24,"nodeType":"132","messageId":"133","endLine":14,"endColumn":39},{"ruleId":"126","replacedBy":"141"},{"ruleId":"128","replacedBy":"142"},{"ruleId":"130","severity":1,"message":"143","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":17},{"ruleId":"144","severity":1,"message":"145","line":50,"column":23,"nodeType":"146","messageId":"147","endLine":50,"endColumn":25},{"ruleId":"148","severity":1,"message":"149","line":87,"column":8,"nodeType":"150","endLine":87,"endColumn":51,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":89,"column":9,"nodeType":"154","messageId":"155","endLine":106,"endColumn":10},{"ruleId":"148","severity":1,"message":"156","line":112,"column":8,"nodeType":"150","endLine":112,"endColumn":36,"suggestions":"157"},{"ruleId":"148","severity":1,"message":"158","line":77,"column":26,"nodeType":"150","endLine":77,"endColumn":28,"suggestions":"159"},{"ruleId":"130","severity":1,"message":"160","line":100,"column":13,"nodeType":"132","messageId":"133","endLine":100,"endColumn":18},{"ruleId":"148","severity":1,"message":"161","line":157,"column":8,"nodeType":"150","endLine":157,"endColumn":18,"suggestions":"162"},{"ruleId":"148","severity":1,"message":"156","line":81,"column":8,"nodeType":"150","endLine":81,"endColumn":16,"suggestions":"163"},{"ruleId":"148","severity":1,"message":"164","line":109,"column":8,"nodeType":"150","endLine":109,"endColumn":35,"suggestions":"165"},{"ruleId":"152","severity":1,"message":"153","line":62,"column":9,"nodeType":"154","messageId":"155","endLine":74,"endColumn":10},{"ruleId":"148","severity":1,"message":"166","line":112,"column":8,"nodeType":"150","endLine":112,"endColumn":20,"suggestions":"167"},{"ruleId":"148","severity":1,"message":"168","line":131,"column":8,"nodeType":"150","endLine":131,"endColumn":20,"suggestions":"169"},{"ruleId":"148","severity":1,"message":"170","line":135,"column":8,"nodeType":"150","endLine":135,"endColumn":45,"suggestions":"171"},{"ruleId":"148","severity":1,"message":"172","line":62,"column":8,"nodeType":"150","endLine":62,"endColumn":17,"suggestions":"173"},{"ruleId":"148","severity":1,"message":"174","line":106,"column":8,"nodeType":"150","endLine":106,"endColumn":25,"suggestions":"175"},{"ruleId":"148","severity":1,"message":"176","line":140,"column":8,"nodeType":"150","endLine":140,"endColumn":23,"suggestions":"177"},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'GlobalStyle' is defined but never used.","'theme' is defined but never used.","'ChatBox' is defined but never used.","'SideNav' is defined but never used.","'Container' is assigned a value but never used.","'activeFriend' is assigned a value but never used.","'setActiveFriend' is assigned a value but never used.",["178"],["179"],"'JumpSlide' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apple' and 'moveSnake'. Either include them or remove the dependency array.","ArrayExpression",["180"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'keyHandler'. Either include it or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'bombCount' and 'width'. Either include them or remove the dependency array.",["182"],"'timer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'squares'. Either include it or remove the dependency array.",["183"],["184"],"React Hook useEffect has missing dependencies: 'imageArray' and 'isSameImage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVisibleArray' needs the current value of 'imageArray'.",["185"],"React Hook useEffect has a missing dependency: 'alienGroup'. Either include it or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'moveInvaders', 'shooterIndex', and 'start'. Either include them or remove the dependency array.",["187"],"React Hook useEffect has a missing dependency: 'moveShooter'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has a missing dependency: 'calculateWinner'. Either include it or remove the dependency array.",["189"],"React Hook useEffect has a missing dependency: 'generateObstacles'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has a missing dependency: 'control'. Either include it or remove the dependency array.",["191"],"no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [snake, direction, appleConsumed, gameOver, apple, moveSnake]",{"range":"216","text":"217"},"Update the dependencies array to be: [direction, gameOver, keyHandler, snake]",{"range":"218","text":"219"},"Update the dependencies array to be: [bombCount, width]",{"range":"220","text":"221"},"Update the dependencies array to be: [gameOver, squares]",{"range":"222","text":"223"},"Update the dependencies array to be: [bottom, keyHandler]",{"range":"224","text":"225"},"Update the dependencies array to be: [imageArray, isSameImage, openPicture, visibleArray]",{"range":"226","text":"227"},"Update the dependencies array to be: [alienGroup, laserIndex]",{"range":"228","text":"229"},"Update the dependencies array to be: [alienGroup, moveInvaders, shooterIndex, start]",{"range":"230","text":"231"},"Update the dependencies array to be: [shooterIndex, alienGroup, direction, moveShooter]",{"range":"232","text":"233"},"Update the dependencies array to be: [calculateWinner, squares]",{"range":"234","text":"235"},"Update the dependencies array to be: [gameOver, generateObstacles, start]",{"range":"236","text":"237"},"Update the dependencies array to be: [bottom, control, start]",{"range":"238","text":"239"},[2727,2770],"[snake, direction, appleConsumed, gameOver, apple, moveSnake]",[3579,3607],"[direction, gameOver, keyHandler, snake]",[2973,2975],"[bombCount, width]",[5721,5731],"[gameOver, squares]",[2764,2772],"[bottom, keyHandler]",[3463,3490],"[imageArray, isSameImage, openPicture, visibleArray]",[3838,3850],"[alienGroup, laserIndex]",[4409,4421],"[alienGroup, moveInvaders, shooterIndex, start]",[4584,4621],"[shooterIndex, alienGroup, direction, moveShooter]",[1729,1738],"[calculateWinner, squares]",[3179,3196],"[gameOver, generateObstacles, start]",[4432,4447],"[bottom, control, start]"]