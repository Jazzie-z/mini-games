[{"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js":"3","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js":"4","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js":"5","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js":"6","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js":"7","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js":"8","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js":"9","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js":"10","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js":"11","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js":"12","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js":"13","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js":"14","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js":"15","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js":"16","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js":"17","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js":"18","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js":"19","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js":"20","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js":"21","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\FlappyBird.js":"22","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tetris.js":"23","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tenet.js":"24"},{"size":197,"mtime":1607012420109,"results":"25","hashOfConfig":"26"},{"size":746,"mtime":1607424471833,"results":"27","hashOfConfig":"26"},{"size":896,"mtime":1607072319019,"results":"28","hashOfConfig":"26"},{"size":820,"mtime":1607072739385,"results":"29","hashOfConfig":"26"},{"size":372,"mtime":1607072332112,"results":"30","hashOfConfig":"26"},{"size":1928,"mtime":1607072607427,"results":"31","hashOfConfig":"26"},{"size":1430,"mtime":1607072225070,"results":"32","hashOfConfig":"26"},{"size":494,"mtime":1607408914680,"results":"33","hashOfConfig":"26"},{"size":392,"mtime":1607072637770,"results":"34","hashOfConfig":"26"},{"size":143,"mtime":1607071297313,"results":"35","hashOfConfig":"26"},{"size":197,"mtime":1607597337995,"results":"36","hashOfConfig":"37"},{"size":1598,"mtime":1607667495002,"results":"38","hashOfConfig":"37"},{"size":392,"mtime":1607072637770,"results":"39","hashOfConfig":"37"},{"size":3643,"mtime":1607597337863,"results":"40","hashOfConfig":"37"},{"size":5576,"mtime":1607597337819,"results":"41","hashOfConfig":"37"},{"size":673,"mtime":1607597337529,"results":"42","hashOfConfig":"37"},{"size":2425,"mtime":1607597337690,"results":"43","hashOfConfig":"37"},{"size":4201,"mtime":1607597337750,"results":"44","hashOfConfig":"37"},{"size":4849,"mtime":1607659764625,"results":"45","hashOfConfig":"37"},{"size":2332,"mtime":1607601216370,"results":"46","hashOfConfig":"37"},{"size":4707,"mtime":1607668102180,"results":"47","hashOfConfig":"37"},{"size":5701,"mtime":1607597337656,"results":"48","hashOfConfig":"37"},{"size":8013,"mtime":1607613021195,"results":"49","hashOfConfig":"37"},{"size":8528,"mtime":1607667753084,"results":"50","hashOfConfig":"37"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"1uw3rlt",{"filePath":"54","messages":"55","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1it9hws",{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js",[],["108","109"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js",["110","111","112","113","114","115","116","117"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js",[],["118","119"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js",["120","121"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js",["122","123","124","125"],"import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Button, Grid, Result } from \"components/common\";\n\nconst Snake = css`\n  background: orange;\n  border-radius: 50%;\n`;\nconst Apple = css`\n  background: lime;\n  border-radius: 50%;\n`;\nconst Box = styled.div`\n  width: 10px;\n  height: 10px;\n  ${({ isSnake }) => isSnake && Snake};\n  ${({ isApple }) => isApple && Apple};\n`;\nlet timer = null;\nconst SnakeGame = () => {\n  const [snake, setSnake] = useState([0, 1, 2]);\n  const [apple, setApple] = useState(\"\");\n  const [direction, setDirection] = useState(1);\n  const interval = 100;\n  const width = 40;\n  const [appleConsumed, setAppleConsumed] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const generateApple = () => {\n    const newApple = Math.floor(Math.random() * (width * width - 1));\n    if (snake.includes(newApple)) {\n      generateApple();\n    } else {\n      setApple(newApple);\n    }\n  };\n  const restartGame = () => {\n    setSnake([0, 1, 2]);\n    setDirection(1);\n    setAppleConsumed(0);\n    setGameOver(false);\n    generateApple();\n  };\n  const stopGame = () => {\n    clearTimeout(timer);\n    setApple(\"\");\n    window.removeEventListener(\"keydown\", keyHandler);\n  };\n  const isSnakeBody = (value) =>\n    snake.includes(value) &&\n    snake[snake.length - 2] !== value &&\n    console.log(snake[snake.length - 2] !== value);\n  const isOutOfScreen = (value, direction) => {\n    if (direction == 1) {\n      return value % width === 0;\n    } else if (direction === -1) {\n      return (value + 1) % width === 0;\n    }\n    return value >= width * width || value < 0;\n  };\n  const moveSnake = () => {\n    let newSnakePos = [...snake];\n    if (!appleConsumed) {\n      newSnakePos.shift();\n    } else {\n      setAppleConsumed((prev) => prev - 1);\n    }\n    let nextCell = newSnakePos[newSnakePos.length - 1] + direction;\n    if (isSnakeBody(nextCell) || isOutOfScreen(nextCell, direction)) {\n      setGameOver(true);\n      return;\n    } else {\n      newSnakePos.push(nextCell);\n    }\n    if (newSnakePos.includes(apple)) {\n      setAppleConsumed((prev) => prev + 1);\n      generateApple();\n    }\n    setSnake(newSnakePos);\n  };\n  useEffect(() => {\n    if (gameOver) {\n      clearTimeout(timer);\n      return;\n    }\n    timer = setTimeout(() => {\n      if (gameOver) clearTimeout(timer);\n      if (apple !== \"\") moveSnake();\n    }, interval);\n    return () => clearTimeout(timer);\n  }, [snake, direction, appleConsumed, gameOver]);\n  const keyHandler = (e) => {\n    switch (e.key) {\n      case \"ArrowRight\":\n        if (direction !== -1) setDirection(1);\n        break;\n      case \"ArrowLeft\":\n        if (direction !== 1) setDirection(-1);\n        break;\n      case \"ArrowUp\":\n        if (direction !== width) setDirection(-width);\n        break;\n      case \"ArrowDown\":\n        if (direction !== -width) setDirection(width);\n        break;\n    }\n  };\n  useEffect(() => {\n    if (!gameOver) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [direction, gameOver, snake]);\n  return (\n    <div>\n      <Grid color={\"#253243\"}>\n        {[...new Array(width * width)].map((e, i) => (\n          <Box key={i} isSnake={snake.includes(i)} isApple={i === apple}></Box>\n        ))}\n      </Grid>\n      <Button onClick={apple ? stopGame : restartGame}>\n        {apple ? \"STOP\" : \"START\"}\n      </Button>\n      {gameOver ? (\n        <Result>\n          GAME OVER!!!\n          <div>your score : {snake.length - 3}</div>\n        </Result>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default SnakeGame;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js",["126","127","128"],"import { Button, Grid, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst Bomb = css`\n  background: orange;\n  font-size: 48px;\n`;\nconst Open = css`\n  background: white;\n  color: black;\n  border: 3px inset #1c6ea4;\n`;\nconst Empty = css`\n  background: #e1e1e1;\n  border-color: #b1b1b1;\n`;\nconst Dash = css`\n  background: red;\n`;\nconst Block = styled.div`\n  height: 40px;\n  width: 40px;\n  display: flex;\n  font-family: sans-serif;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  cursor: pointer;\n  box-sizing: border-box;\n  border: 6px outset #1c6ea4;\n  color: white;\n  ${({ show }) => show && Open};\n  ${({ show, isBomb }) => show && isBomb && Bomb};\n  ${({ show, empty }) => show && empty && Empty};\n  ${({ dash }) => dash && Dash};\n`;\n// const Result = styled.div`\n//     font-size: 24px;\n//     padding: 10px;\n// `\nconst Minesweeper = () => {\n  let width = 10;\n  let bombCount = 20;\n\n  const [squares, setSquares] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const startGame = () => {\n    setGameOver(false);\n    const bombsArray = Array(bombCount).fill({ value: \"*\" });\n    const emptyArray = Array(width * width - bombCount).fill({ value: \"\" });\n    const gamesArray = [...emptyArray, ...bombsArray];\n    const shuffledArray = gamesArray.sort(() => Math.random() - 0.5);\n\n    for (let i = 0; i < shuffledArray.length; i++) {\n      let total = 0;\n      const isLeftEdge = i % width === 0;\n      const isRightEdge = i % width === width - 1;\n      // layout to check\n      // 7 8 9\n      // 4 _ 6\n      // 1 2 3\n      if (!shuffledArray[i].value) {\n        if (i > 0 && !isLeftEdge && shuffledArray[i - 1].value === \"*\") total++; //bomb at left (4)\n        if (i > 11 && !isLeftEdge && shuffledArray[i - 1 - width].value === \"*\")\n          total++; //bomb at top left(7)\n        if (i > 9 && shuffledArray[i - width].value === \"*\") total++; //bomb at top (8)\n        if (i > 9 && !isRightEdge && shuffledArray[i + 1 - width].value === \"*\")\n          total++; //bomb at top right (9)\n        if (i < 99 && !isRightEdge && shuffledArray[i + 1].value === \"*\")\n          total++; //bomb at right(6)\n        if (\n          i < 88 &&\n          !isRightEdge &&\n          shuffledArray[i + 1 + width].value === \"*\"\n        )\n          total++; //bomb at right bottom(3)\n        if (i < 89 && shuffledArray[i + width].value === \"*\") total++; //bomb at bottom(2)\n        if (i < 90 && !isLeftEdge && shuffledArray[i - 1 + width].value === \"*\")\n          total++; //bomb at left bottom(1)\n        shuffledArray[i] = { value: total || \"\" };\n      }\n    }\n    setSquares(shuffledArray);\n  };\n  useEffect(startGame, []);\n  const clickHandler = (index) => {\n    if (gameOver || squares[index].show || squares[index].flag) return;\n    if (squares[index].value === \"*\") {\n      let newSquares = [...squares];\n      newSquares[index] = { value: \"*\", dash: true };\n      setSquares(newSquares);\n      setGameOver(true);\n    } else {\n      let newSquares = [...squares];\n      newSquares[index].show = true;\n      setSquares(newSquares);\n      if (newSquares[index].value) {\n        return;\n      }\n      checkSquares(index);\n    }\n  };\n  const isNotABomb = (cell) => cell.value !== \"*\";\n  const checkSquares = (index) => {\n    const isLeftEdge = index % width === 0;\n    const isRightEdge = index % width === width - 1;\n    console.error(\"initialized again\");\n    let timer = setTimeout(() => {\n      if (index > 0 && !isLeftEdge) {\n        //toward left\n        if (isNotABomb(squares[index - 1])) {\n          clickHandler(index - 1);\n        }\n      }\n      if (index > 9 && !isRightEdge) {\n        //toward upper right\n        if (isNotABomb(squares[index + 1 - width])) {\n          clickHandler(index + 1 - width);\n        }\n      }\n      if (index > 10) {\n        //toward up\n        if (isNotABomb(squares[index - width])) {\n          clickHandler(index - width);\n        }\n      }\n      if (index > 11 && !isLeftEdge) {\n        //toward upper left\n        if (isNotABomb(squares[index - 1 - width])) {\n          clickHandler(index - 1 - width);\n        }\n      }\n      if (index < 98 && !isRightEdge) {\n        //toward right\n        if (isNotABomb(squares[index + 1])) {\n          clickHandler(index + 1);\n        }\n      }\n      if (index < 90 && !isLeftEdge) {\n        //toward lower left\n        if (isNotABomb(squares[index - 1 + width])) {\n          clickHandler(index - 1 + width);\n        }\n      }\n      if (index < 88 && !isRightEdge) {\n        if (isNotABomb(squares[index + 1 + width])) {\n          clickHandler(index + 1 + width);\n        }\n      }\n      if (index < 89) {\n        if (isNotABomb(squares[index + width])) {\n          clickHandler(index + width);\n        }\n      }\n    }, 10);\n  };\n  useEffect(() => {\n    if (gameOver) {\n      let newSquares = [...squares].map((e) => ({ ...e, show: true }));\n      console.error(newSquares);\n      setSquares(newSquares);\n    }\n  }, [gameOver]);\n  return (\n    <div>\n      <Grid color={\"#115481\"}>\n        {squares.map(({ value, show, dash }, i) => (\n          <Block\n            key={i}\n            isBomb={value === \"*\"}\n            dash={dash}\n            show={show}\n            empty={!value}\n            onClick={() => clickHandler(i)}\n          >\n            {show ? value : \"\"}\n          </Block>\n        ))}\n      </Grid>\n      <Button onClick={startGame}>(RE)START</Button>\n      {gameOver ? <Result>GAME OVER!!!</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default Minesweeper;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js",["129"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nconst Game = styled.div``;\nconst Character = styled.div`\n  background-color: red;\n  height: 70px;\n  width: 40px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  left: ${({ left }) => left}px;\n`;\nlet jumpTimer = null;\nlet slideTimer = null;\nconst JumpSlide = () => {\n  const gravity = 0.9;\n  const [bottom, setBottom] = useState(0);\n  const [jump, setJump] = useState(false);\n  const [left, setLeft] = useState(0);\n  const [slide, setSlide] = useState(\"\");\n  const keyHandler = (e) => {\n    if (e.key === \" \" && bottom <= 0) setJump(true);\n    if (e.key === \"ArrowLeft\") setSlide(\"LEFT\");\n    else if (e.key === \"ArrowRight\") setSlide(\"RIGHT\");\n    else if (e.key === \"ArrowDown\") setSlide(\"\");\n  };\n  useEffect(() => {\n    // if (bottom) {\n    if (slide === \"RIGHT\") {\n      clearTimeout(slideTimer);\n      slideTimer = setTimeout(() => {\n        let newLeft = left + 5;\n        setLeft(newLeft);\n      }, 20);\n      // if (bottom == 0) setSlide('')\n    } else if (slide === \"LEFT\") {\n      clearTimeout(slideTimer);\n      slideTimer = setTimeout(() => {\n        let newLeft = left - 5;\n        setLeft(newLeft);\n      }, 20);\n      // if (bottom == 0) setSlide('')\n    } else {\n      setSlide(\"\");\n      clearTimeout(slideTimer);\n    }\n    // } else {\n    //     setSlide('')\n    //     clearTimeout(slideTimer)\n    // }\n  }, [slide, left, bottom]);\n  useEffect(() => {\n    //going up\n    if (jump) {\n      console.error(\"going to jumping\");\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom + 30;\n        newBottom *= gravity;\n        setBottom(newBottom);\n        console.error(bottom * gravity);\n      }, 20);\n      if (bottom > 250) {\n        clearTimeout(jumpTimer);\n        setJump(false);\n      }\n    } else if (bottom > 0) {\n      console.error(\"coming back\");\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom - 5 < 0 ? 0 : bottom - 5;\n        setBottom(newBottom);\n      }, 20);\n    } else {\n      console.error(\"just clearing\", bottom);\n      clearTimeout(jumpTimer);\n    }\n  }, [jump, bottom]);\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [bottom]);\n  return (\n    <Game>\n      <Character bottom={bottom} left={left} />\n    </Game>\n  );\n};\n\nexport default JumpSlide;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js",["130"],"import React, { useEffect, useState } from \"react\";\nimport Image1 from \"assets/images/1.jpg\";\nimport Image2 from \"assets/images/2.jpg\";\nimport Image3 from \"assets/images/3.jpg\";\nimport Image4 from \"assets/images/4.jpg\";\nimport Image5 from \"assets/images/5.jpg\";\nimport Image6 from \"assets/images/6.jpg\";\nimport Image7 from \"assets/images/7.jpg\";\nimport Image8 from \"assets/images/8.jpg\";\nimport styled, { css } from \"styled-components\";\nimport { Button, Grid, Result } from \"components/common\";\n\nconst Hide = css`\n  transform: rotateY(180deg);\n`;\nconst Show = css`\n  transform: rotateY(0);\n`;\nconst Card = styled.div`\n  position: relative;\n  width: 100px;\n  height: 100px;\n  text-align: center;\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  ${({ hide }) => hide && Hide};\n  ${({ show }) => show && Show};\n`;\nconst Layer = css`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n`;\nconst Image = styled.img`\n  ${Layer};\n  left: 0;\n`;\nconst Fallback = styled.div`\n  ${Layer};\n  background-color: #2980b9;\n  color: white;\n  transform: rotateY(180deg);\n`;\nconst Time = styled.div`\n  text-align: center;\n  padding: 10px 0;\n`;\nlet timer = null;\nexport const MemoryGame = () => {\n  const [start, setStart] = useState(false);\n  const [imageArray, setImages] = useState(Array(16).fill({}));\n  const [hide, setHide] = useState(false);\n  const [visibleArray, setVisibleArray] = useState([]);\n  const [openPicture, setOpenPicture] = useState([]);\n  const [time, setTime] = useState(65);\n  const [gameOver, setGameOver] = useState(false);\n  const generateRandomImage = () => {\n    let randomImage = [\n      { path: Image1, id: 1 },\n      { path: Image2, id: 2 },\n      { path: Image3, id: 3 },\n      { path: Image4, id: 4 },\n      { path: Image5, id: 5 },\n      { path: Image6, id: 6 },\n      { path: Image7, id: 7 },\n      { path: Image8, id: 8 },\n    ];\n    randomImage = randomImage.concat(randomImage);\n    randomImage = randomImage.sort(() => Math.random() - 0.5);\n    setImages(randomImage);\n    setTimeout(() => setHide(true), 5000);\n  };\n  useEffect(() => {\n    if (start) {\n      setHide(false);\n      generateRandomImage();\n    } else {\n      setHide(true);\n      setTime(65);\n      setVisibleArray([]);\n      setOpenPicture([]);\n      setGameOver(false);\n      clearTimeout(timer);\n    }\n  }, [start]);\n  useEffect(() => {\n    if (start && !gameOver) {\n      if (time) {\n        timer = setTimeout(() => {\n          setTime((prev) => prev - 1);\n        }, 1000);\n      } else {\n        setGameOver(\"GAME OVER\");\n      }\n    }\n  }, [time, gameOver, start]);\n\n  const isSameImage = ([index1, index2]) =>\n    imageArray[index1].id === imageArray[index2].id;\n  useEffect(() => {\n    if (openPicture.length === 2) {\n      if (isSameImage(openPicture)) {\n        setVisibleArray((prev) => [...prev, imageArray[openPicture[0]].id]);\n        setOpenPicture([]);\n      } else {\n        setTimeout(() => {\n          setOpenPicture([]);\n        }, 500);\n      }\n    } else if (visibleArray.length === 8) {\n      setGameOver(\"SUCCESS\");\n      clearTimeout(timer);\n    }\n  }, [openPicture, visibleArray]);\n  const clickHandler = (index) => {\n    if (\n      openPicture.length < 2 &&\n      hide &&\n      !gameOver &&\n      start &&\n      !openPicture.includes(index)\n    )\n      setOpenPicture((prev) => [...prev, index]);\n  };\n  const stopGame = () => {\n    setStart((prev) => !prev);\n  };\n  return (\n    <div>\n      <Grid>\n        {imageArray.map(({ path, id }, index) => (\n          <Card\n            key={index}\n            hide={hide}\n            onClick={() => clickHandler(index)}\n            show={openPicture.includes(index) || visibleArray.includes(id)}\n          >\n            <Image src={path} />\n            <Fallback />\n          </Card>\n        ))}\n      </Grid>\n      {start ? <Time>Remaining Time : {time}</Time> : \"\"}\n      <Button onClick={stopGame}>{start ? \"STOP\" : \"START\"}</Button>\n      {gameOver ? (\n        <Result>\n          {gameOver} !!!<div>Your score : {visibleArray.length}</div>\n        </Result>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js",["131","132","133","134"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js",["135"],"import { Button, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Grid = styled.div`\n  width: 400px;\n  height: 400px;\n  background: #32475b;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst Block = styled.div`\n  border: 1px solid #3e5468;\n  width: 133.33px;\n  height: 133.33px;\n  box-sizing: border-box;\n  font-size: 100px;\n  font-family: sans-serif;\n  color: ${({ winner }) => (winner ? \"lime\" : \"white\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TicTacToe = () => {\n  const [squares, setSquares] = useState([]);\n  const [xIsNext, setxIsNext] = useState();\n  const [gameOver, setGameOver] = useState(false);\n  const [winnerItems, setWinnerItems] = useState([]);\n  const resetGame = () => {\n    setSquares([...Array(9)]);\n    setWinnerItems([]);\n    setxIsNext(true);\n    setGameOver(false);\n  };\n  useEffect(() => {\n    resetGame();\n  }, []);\n  const calculateWinner = () => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return [a, b, c];\n      }\n    }\n    return null;\n  };\n  useEffect(() => {\n    const winner = calculateWinner();\n    if (winner) {\n      setWinnerItems(winner);\n      setGameOver(`Winner is : ${squares[winner[0]]}`);\n    } else if (squares.length && !squares.includes(undefined)) {\n      setGameOver(`Game Over !!!`);\n    }\n  }, [squares]);\n  const onClick = (i) => {\n    const newSquares = [...squares];\n    if (gameOver || newSquares[i]) return;\n    newSquares[i] = xIsNext ? \"X\" : \"O\";\n    setSquares(newSquares);\n    setxIsNext((prev) => !prev);\n  };\n  return (\n    <div>\n      <Grid>\n        {squares.map((value, i) => (\n          <Block\n            key={i}\n            onClick={() => onClick(i)}\n            winner={winnerItems.includes(i)}\n          >\n            {value}\n          </Block>\n        ))}\n      </Grid>\n      <Button onClick={resetGame}>RESTART</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js",["136","137"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\FlappyBird.js",["138","139","140","141"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Result } from \"components/common\";\nimport styled from \"styled-components\";\nimport BirdImg from \"assets/gif/bird.gif\";\nimport BackgroundImg from \"assets/images/grassland.jpg\";\nimport Pipe from \"assets/images/pipe.png\";\n\nconst Bird = styled.div`\n  width: 30px;\n  height: 30px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  background-image: url(${BirdImg});\n  background-size: cover;\n  background-position: center;\n  left: 150px;\n  transform: rotate(${({ bottom }) => 0.225 * (200 - bottom)}deg);\n  z-index: 2;\n`;\nconst Obstacle = styled.img`\n  width: 30px;\n  height: 200px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  z-index: 2;\n  transform: rotate(${({ invert }) => (invert ? 0 : 180)}deg);\n  left: ${({ left }) => left}px;\n`;\nconst Floor = styled.div`\n  height: 60px;\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  overflow: hidden;\n  img {\n    width: 100%;\n    height: 400px;\n    transform: translateY(-340px);\n    z-index: 5;\n    position: relative;\n  }\n`;\nconst Image = styled.img`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n`;\nconst Score = styled.div`\n  position: absolute;\n  font-size: 24px;\n  padding: 10px;\n  color: white;\n  z-index: 3;\n  border: 4px solid white;\n  border-radius: 50%;\n  height: 20px;\n  width: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n`;\nlet gravityTimer = null;\nlet slideTimer = null;\nlet generateTimer = null;\nlet flyTimer = null;\nconst FlappyBird = () => {\n  const floorHeight = 60;\n  const gravity = 0.9;\n  const birdSize = 30;\n  const birdPos = 150;\n  const pipeSize = 200;\n  const verticalGap = 100;\n  const [bottom, setBottom] = useState(200);\n  const [start, setStart] = useState(false);\n  const [obstacles, setObstacles] = useState([]);\n  const [fly, setFly] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    if (!gameOver && start && bottom) {\n      gravityTimer = setTimeout(() => {\n        let newBottom = fly ? bottom + 7.5 : bottom - 2.5;\n        setBottom(newBottom);\n      }, 20);\n    }\n    return () => {\n      clearTimeout(gravityTimer);\n    };\n  }, [start, bottom, fly, gameOver]);\n\n  const generateObstacle = () => {\n    if (start && !gameOver) {\n      let obstaclePosition = 400;\n      let height = Math.floor(Math.random() * floorHeight);\n      setObstacles((prev) => [...prev, { left: obstaclePosition, height }]);\n      let min = 800;\n      let max = 3000;\n      let randomTime = Math.floor(Math.random() * (max - min + 1)) + min;\n      generateTimer = setTimeout(() => {\n        generateObstacle();\n      }, randomTime);\n    }\n  };\n  useEffect(() => {\n    generateObstacle();\n  }, [start, gameOver]);\n\n  useEffect(() => {\n    if (!gameOver && start && obstacles.length) {\n      slideTimer = setTimeout(() => {\n        let newPosition = [...obstacles].map(({ left, height }) => ({\n          left: left - 10,\n          height,\n        }));\n        newPosition = newPosition.filter(({ left }) => left > 0 - 30);\n        let newScore = newPosition.filter(\n          ({ left }) => left < birdPos && left >= birdPos - 10\n        ).length;\n        setScore((prev) => prev + newScore);\n        setObstacles(newPosition);\n      }, 80);\n    }\n    return () => {\n      clearTimeout(slideTimer);\n    };\n  }, [obstacles, start, gameOver]);\n\n  useEffect(() => {\n    if (start && !gameOver) {\n      if (bottom <= floorHeight) {\n        //REACHED FLOOR\n        setGameOver(\"GAME OVER!!!\");\n        stopTimer();\n      } else {\n        let nearestObstacle = obstacles.find(\n          (e) => e.left >= birdPos && e.left <= birdPos + birdSize\n        );\n        if (nearestObstacle) {\n          if (\n            bottom <= pipeSize + nearestObstacle.height ||\n            bottom + birdSize >= pipeSize + nearestObstacle.height + verticalGap\n          ) {\n            setGameOver(\"GAME OVER!!!\");\n            stopTimer();\n          }\n        }\n      }\n    }\n  }, [obstacles, bottom, start]);\n  const keyHandler = (e) => {\n    if ([\"ArrowUp\", \" \"].includes(e.key)) {\n      setFly(true);\n      clearTimeout(flyTimer);\n      flyTimer = setTimeout(() => {\n        setFly(false);\n      }, 150);\n    }\n  };\n  useEffect(() => {\n    if (start && !gameOver) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.addEventListener(\"keydown\", keyHandler);\n  }, [start, gameOver]);\n  const stopTimer = () => {\n    clearTimeout(generateTimer);\n    clearTimeout(slideTimer);\n    clearTimeout(flyTimer);\n    clearTimeout(gravityTimer);\n  };\n  const toggleGame = () => {\n    if (start) {\n      setStart(false);\n    } else {\n      setGameOver(false);\n      setObstacles([]);\n      setBottom(200);\n      setScore(0);\n      setFly(false);\n      setStart(true);\n    }\n    stopTimer();\n  };\n  return (\n    <div>\n      <Grid border={\"black\"}>\n        <div>\n          <Bird bottom={bottom} />\n        </div>\n        {obstacles.map(({ left, height }, i) => (\n          <Obstacle key={i} left={left} bottom={height} src={Pipe} />\n        ))}\n        {obstacles.map(({ left, height }, i) => (\n          <Obstacle\n            key={i}\n            left={left}\n            bottom={pipeSize + height + verticalGap}\n            src={Pipe}\n            invert={true}\n          />\n        ))}\n        <Image src={BackgroundImg} />\n        <Floor>\n          <img src={BackgroundImg}></img>\n        </Floor>\n        <Score>{score}</Score>\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"Stop\" : \"Start\"}</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default FlappyBird;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tetris.js",["142","143","144","145","146"],"import React, { useEffect, useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { Grid } from 'components/common'\r\n\r\nconst Cell = styled.div`\r\n    width: 20px;\r\n    height: 20px;\r\n    box-sizing:border-box;\r\n    border: 1px solid rgba(225,225,225,0.05);\r\n    ${({ colors }) => colors && css`\r\n        background: linear-gradient(45deg, ${colors[0]} 0%, ${colors[1]} 100%);\r\n        border:none;\r\n    `}\r\n`\r\nconst randomColors = [\r\n    ['#99daff', '#008080',],\r\n    ['#059900', '#00ff00',],\r\n    ['#ff0000', '#8a0000',],\r\n    ['#f8ff26', '#baba00',],\r\n    ['#b8b8b8', '#000000',],\r\n    ['#800080', '#f700ff',],\r\n    ['#ffffff', '#008080',],\r\n    ['#612f03', '#ff8c00',]\r\n]\r\n\r\n\r\nconst getTerminoes = (width) => {\r\n    const lTetromino = [\r\n        [1, width + 1, width * 2 + 1, 2],\r\n        [width, width + 1, width + 2, width * 2 + 2],\r\n        [1, width + 1, width * 2 + 1, width * 2],\r\n        [width, width * 2, width * 2 + 1, width * 2 + 2]\r\n    ]\r\n\r\n    const zTetromino = [\r\n        [0, width, width + 1, width * 2 + 1],\r\n        [width + 1, width + 2, width * 2, width * 2 + 1],\r\n        [0, width, width + 1, width * 2 + 1],\r\n        [width + 1, width + 2, width * 2, width * 2 + 1]\r\n    ]\r\n\r\n    const tTetromino = [\r\n        [1, width, width + 1, width + 2],\r\n        [1, width + 1, width + 2, width * 2 + 1],\r\n        [width, width + 1, width + 2, width * 2 + 1],\r\n        [1, width, width + 1, width * 2 + 1]\r\n    ]\r\n\r\n    const oTetromino = [\r\n        [0, 1, width, width + 1],\r\n        [0, 1, width, width + 1],\r\n        [0, 1, width, width + 1],\r\n        [0, 1, width, width + 1]\r\n    ]\r\n\r\n    const iTetromino = [\r\n        [1, width + 1, width * 2 + 1, width * 3 + 1],\r\n        [width, width + 1, width + 2, width + 3],\r\n        [1, width + 1, width * 2 + 1, width * 3 + 1],\r\n        [width, width + 1, width + 2, width + 3]\r\n    ]\r\n    return [lTetromino, zTetromino, tTetromino, oTetromino, iTetromino]\r\n}\r\nlet blockTimer = null\r\nconst Tetris = () => {\r\n    const width = 20;\r\n    const displayWidth = 4;\r\n    const [cells, setCells] = useState([...Array(400)].map(() => ({})))\r\n    const [block, setBlock] = useState({ index: [] })\r\n    const [nextTermino, setNextTermino] = useState({index:[]})\r\n    const [position, setPosition] = useState(0);\r\n    const [rotation, setRotation] = useState(0);\r\n    const [tetrominoType, setTetrominoType] = useState('')\r\n    const createNewBlock = (size) => {\r\n        let tetrominoes = getTerminoes(size)\r\n        let randomIndex = Math.floor(Math.random() * (tetrominoes.length - 1))\r\n        if (size === width) setTetrominoType(randomIndex)\r\n        return tetrominoes[randomIndex][rotation]\r\n    }\r\n    const generateNewBlock = () => {\r\n        // let blocks = [\r\n        //     [10, 11, 30, 50],\r\n        //     [36, 37, 38, 18],\r\n        //     [30, 10, 11, 12],// |__\r\n        //     [36, 37, 38, 18],// __|\r\n        //     [1, 2, 3, 23],// --|\r\n        //     [4, 5, 24, 25],// []\r\n        //     [2, 3, 4, 5, 6],//  ---      \r\n        //     [9, 10, 11, 29],//  |--\r\n        // ];\r\n        if (nextTermino.index.length) {\r\n            console.error(nextTermino)\r\n            setBlock({ ...nextTermino, index: createNewBlock(width).map(e => position + e) })\r\n            setNextTermino({ index: createNewBlock(displayWidth), colors: getRandomColor() })\r\n        } else {            \r\n            console.error(getRandomColor())\r\n            setBlock({ index: createNewBlock(width).map(e => position + e), colors: getRandomColor() })\r\n            setNextTermino({ index: createNewBlock(displayWidth), colors: getRandomColor() })\r\n        }\r\n    }\r\n    // useEffect(() => {\r\n    //     setTimeout(()=>{\r\n    //         let newCells = [...cells]\r\n\r\n    //         for(let i=380;i<400;i++)\r\n    //             newCells[i]={colors:['red','red']}\r\n    //         setCells(newCells)\r\n    //     },1000)\r\n    // }, [])\r\n    const isBottomReached = () => {\r\n        let blockIndex = block.index;\r\n        let lastRow = (width * width) - width;\r\n        let isLastRowReached = blockIndex.find(e => e >= lastRow);\r\n        let isBlockPresent = block.index.some(i => cells[i + width] && cells[i + width].colors);\r\n        return isLastRowReached || isBlockPresent\r\n    }\r\n    useEffect(() => {\r\n        if (block.index.length) {\r\n            blockTimer = setTimeout(() => {\r\n                let newBlock = { ...block };\r\n                newBlock.index = newBlock.index.map(e => e + width)\r\n                setPosition(prev => prev + width)\r\n                setBlock(newBlock)\r\n            }, 500)\r\n            if (isBottomReached()) {\r\n                clearTimeout(blockTimer)                \r\n                setPosition(Math.floor(Math.random() * (width - 2)))\r\n                setTimeout(()=>{\r\n                    let newCells = [...cells];\r\n                    block.index.forEach(i => newCells[i] = { colors: block.colors })                    \r\n                    setBlock({ index: [] })\r\n                    setCells(newCells)\r\n                } ,100)               \r\n            }\r\n        } else {\r\n            generateNewBlock()\r\n        }\r\n        return () => clearTimeout(blockTimer)\r\n    }, [block])\r\n    const getRandomColor = () => randomColors[Math.floor(Math.random() * (randomColors.length - 1))]\r\n    const moveRight = () => {\r\n        const rightEdge = block.index.find((e) => e % width === width - 1);\r\n        const cellPresent = block.index.some(e => cells[e + 1].colors)\r\n        if (!rightEdge && block.index && !cellPresent) {\r\n            let newBlock = { ...block }\r\n            newBlock.index = newBlock.index.map(e => e + 1)\r\n            setBlock(newBlock)\r\n            setPosition(prev => prev + 1)\r\n        }\r\n    }\r\n    const moveLeft = () => {\r\n        const leftEdge = block.index.find((e) => e % width === 0);\r\n        const cellPresent = block.index.some(e => cells[e - 1].colors)\r\n        if (!leftEdge && block.index && !cellPresent) {\r\n            let newBlock = { ...block }\r\n            newBlock.index = newBlock.index.map(e => e - 1)\r\n            setBlock(newBlock)\r\n            setPosition(prev => prev - 1)\r\n        }\r\n    }\r\n    const rotate = () => {\r\n        let currentRotation = rotation + 1\r\n        if (currentRotation === block.index.length) {\r\n          currentRotation = 0\r\n        }\r\n        setRotation(currentRotation)\r\n        setBlock(prev => ({ ...prev, index: getTerminoes(width)[tetrominoType][currentRotation].map(e => e + position) }))\r\n    }\r\n    const keyHandler = (e) => {\r\n        switch (e.key) {\r\n            case 'ArrowLeft':moveLeft()\r\n                break;\r\n            case 'ArrowRight': moveRight()\r\n                break;\r\n            case 'ArrowUp': rotate()\r\n                break;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', keyHandler)\r\n        return () => window.removeEventListener('keydown', keyHandler)\r\n    },[block])\r\n    useEffect(() => {\r\n        let validRows = []\r\n        for (let i = 0; i < width; i++) {\r\n            let isComplete = true\r\n            for (let j = 1; j < width; j++) {\r\n                if (!cells[(i * width) + j].colors) {\r\n                    isComplete = false\r\n                    break\r\n                }\r\n            }\r\n            if (isComplete) validRows.push(i+1)\r\n        }\r\n        console.error(validRows)\r\n        if (validRows.length) {\r\n            let newCells = [...cells]\r\n            validRows.forEach(index => {\r\n                for (let j = (index * width) - 1; j >= 0; j--) {\r\n                    newCells[j] = newCells[j - width] || {};\r\n                }\r\n            })\r\n            setTimeout(() => {\r\n                setCells(newCells)\r\n            }, 1000)\r\n        }\r\n    }, [cells])\r\n    return (\r\n        <Grid color={'#0f1d38'}>\r\n            {cells.map(({ colors }, i) => (<Cell\r\n                key={i}\r\n                colors={colors || block.index.includes(i) && block.colors}></Cell>))}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Tetris\r\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tenet.js",["147","148","149","150","151","152","153","154","155"],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":2,"column":18,"nodeType":"162","messageId":"163","endLine":2,"endColumn":31},{"ruleId":"160","severity":1,"message":"164","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":21},{"ruleId":"160","severity":1,"message":"165","line":3,"column":23,"nodeType":"162","messageId":"163","endLine":3,"endColumn":28},{"ruleId":"160","severity":1,"message":"166","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":15},{"ruleId":"160","severity":1,"message":"167","line":5,"column":8,"nodeType":"162","messageId":"163","endLine":5,"endColumn":15},{"ruleId":"160","severity":1,"message":"168","line":8,"column":7,"nodeType":"162","messageId":"163","endLine":8,"endColumn":16},{"ruleId":"160","severity":1,"message":"169","line":14,"column":10,"nodeType":"162","messageId":"163","endLine":14,"endColumn":22},{"ruleId":"160","severity":1,"message":"170","line":14,"column":24,"nodeType":"162","messageId":"163","endLine":14,"endColumn":39},{"ruleId":"156","replacedBy":"171"},{"ruleId":"158","replacedBy":"172"},{"ruleId":"160","severity":1,"message":"173","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":17},{"ruleId":"160","severity":1,"message":"174","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":14},{"ruleId":"175","severity":1,"message":"176","line":53,"column":19,"nodeType":"177","messageId":"178","endLine":53,"endColumn":21},{"ruleId":"179","severity":1,"message":"180","line":90,"column":6,"nodeType":"181","endLine":90,"endColumn":49,"suggestions":"182"},{"ruleId":"183","severity":1,"message":"184","line":92,"column":5,"nodeType":"185","messageId":"186","endLine":105,"endColumn":6},{"ruleId":"179","severity":1,"message":"187","line":110,"column":6,"nodeType":"181","endLine":110,"endColumn":34,"suggestions":"188"},{"ruleId":"179","severity":1,"message":"189","line":86,"column":24,"nodeType":"181","endLine":86,"endColumn":26,"suggestions":"190"},{"ruleId":"160","severity":1,"message":"191","line":109,"column":9,"nodeType":"162","messageId":"163","endLine":109,"endColumn":14},{"ruleId":"179","severity":1,"message":"192","line":164,"column":6,"nodeType":"181","endLine":164,"endColumn":16,"suggestions":"193"},{"ruleId":"179","severity":1,"message":"187","line":80,"column":6,"nodeType":"181","endLine":80,"endColumn":14,"suggestions":"194"},{"ruleId":"179","severity":1,"message":"195","line":117,"column":6,"nodeType":"181","endLine":117,"endColumn":33,"suggestions":"196"},{"ruleId":"183","severity":1,"message":"184","line":63,"column":5,"nodeType":"185","messageId":"186","endLine":73,"endColumn":6},{"ruleId":"179","severity":1,"message":"197","line":114,"column":6,"nodeType":"181","endLine":114,"endColumn":18,"suggestions":"198"},{"ruleId":"179","severity":1,"message":"199","line":133,"column":6,"nodeType":"181","endLine":133,"endColumn":18,"suggestions":"200"},{"ruleId":"179","severity":1,"message":"201","line":137,"column":6,"nodeType":"181","endLine":137,"endColumn":43,"suggestions":"202"},{"ruleId":"179","severity":1,"message":"203","line":70,"column":6,"nodeType":"181","endLine":70,"endColumn":15,"suggestions":"204"},{"ruleId":"179","severity":1,"message":"205","line":107,"column":6,"nodeType":"181","endLine":107,"endColumn":23,"suggestions":"206"},{"ruleId":"179","severity":1,"message":"207","line":141,"column":6,"nodeType":"181","endLine":141,"endColumn":21,"suggestions":"208"},{"ruleId":"160","severity":1,"message":"209","line":70,"column":9,"nodeType":"162","messageId":"163","endLine":70,"endColumn":16},{"ruleId":"179","severity":1,"message":"210","line":108,"column":6,"nodeType":"181","endLine":108,"endColumn":23,"suggestions":"211"},{"ruleId":"179","severity":1,"message":"212","line":151,"column":6,"nodeType":"181","endLine":151,"endColumn":32,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":204,"column":11,"nodeType":"216","endLine":204,"endColumn":36},{"ruleId":"179","severity":1,"message":"217","line":139,"column":8,"nodeType":"181","endLine":139,"endColumn":15,"suggestions":"218"},{"ruleId":"183","severity":1,"message":"184","line":170,"column":9,"nodeType":"185","messageId":"186","endLine":177,"endColumn":10},{"ruleId":"179","severity":1,"message":"187","line":182,"column":7,"nodeType":"181","endLine":182,"endColumn":14,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":212,"column":32,"nodeType":"222","messageId":"223","endLine":212,"endColumn":34},{"ruleId":"220","severity":1,"message":"221","line":212,"column":59,"nodeType":"222","messageId":"223","endLine":212,"endColumn":61},{"ruleId":"175","severity":1,"message":"176","line":59,"column":57,"nodeType":"177","messageId":"178","endLine":59,"endColumn":59},{"ruleId":"179","severity":1,"message":"224","line":76,"column":8,"nodeType":"181","endLine":76,"endColumn":15,"suggestions":"225"},{"ruleId":"179","severity":1,"message":"226","line":86,"column":8,"nodeType":"181","endLine":86,"endColumn":17,"suggestions":"227"},{"ruleId":"179","severity":1,"message":"228","line":141,"column":8,"nodeType":"181","endLine":141,"endColumn":37,"suggestions":"229"},{"ruleId":"179","severity":1,"message":"230","line":154,"column":8,"nodeType":"181","endLine":154,"endColumn":17,"suggestions":"231"},{"ruleId":"179","severity":1,"message":"232","line":163,"column":8,"nodeType":"181","endLine":163,"endColumn":41,"suggestions":"233"},{"ruleId":"234","severity":1,"message":"235","line":167,"column":21,"nodeType":"236","messageId":"237","endLine":167,"endColumn":22},{"ruleId":"183","severity":1,"message":"184","line":168,"column":9,"nodeType":"185","messageId":"186","endLine":179,"endColumn":10},{"ruleId":"179","severity":1,"message":"238","line":185,"column":8,"nodeType":"181","endLine":185,"endColumn":29,"suggestions":"239"},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'GlobalStyle' is defined but never used.","'theme' is defined but never used.","'ChatBox' is defined but never used.","'SideNav' is defined but never used.","'Container' is assigned a value but never used.","'activeFriend' is assigned a value but never used.","'setActiveFriend' is assigned a value but never used.",["240"],["241"],"'JumpSlide' is defined but never used.","'Tetris' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apple' and 'moveSnake'. Either include them or remove the dependency array.","ArrayExpression",["242"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'keyHandler'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has missing dependencies: 'bombCount' and 'width'. Either include them or remove the dependency array.",["244"],"'timer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'squares'. Either include it or remove the dependency array.",["245"],["246"],"React Hook useEffect has missing dependencies: 'imageArray' and 'isSameImage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVisibleArray' needs the current value of 'imageArray'.",["247"],"React Hook useEffect has a missing dependency: 'alienGroup'. Either include it or remove the dependency array.",["248"],"React Hook useEffect has missing dependencies: 'moveInvaders', 'shooterIndex', and 'start'. Either include them or remove the dependency array.",["249"],"React Hook useEffect has a missing dependency: 'moveShooter'. Either include it or remove the dependency array.",["250"],"React Hook useEffect has a missing dependency: 'calculateWinner'. Either include it or remove the dependency array.",["251"],"React Hook useEffect has a missing dependency: 'generateObstacles'. Either include it or remove the dependency array.",["252"],"React Hook useEffect has a missing dependency: 'control'. Either include it or remove the dependency array.",["253"],"'gravity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'generateObstacle'. Either include it or remove the dependency array.",["254"],"React Hook useEffect has a missing dependency: 'gameOver'. Either include it or remove the dependency array.",["255"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'cells', 'generateNewBlock', and 'isBottomReached'. Either include them or remove the dependency array.",["256"],["257"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'fallTime' and 'reverse'. Either include them or remove the dependency array.",["258"],"React Hook useEffect has a missing dependency: 'fallTime'. Either include it or remove the dependency array.",["259"],"React Hook useEffect has a missing dependency: 'floor'. Either include it or remove the dependency array.",["260"],"React Hook useEffect has missing dependencies: 'bottom', 'fall', 'left', and 'reverse'. Either include them or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'fall'. Either include it or remove the dependency array.",["262"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'playerHandler'. Either include it or remove the dependency array.",["263"],"no-global-assign","no-unsafe-negation",{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},"Update the dependencies array to be: [snake, direction, appleConsumed, gameOver, apple, moveSnake]",{"range":"308","text":"309"},"Update the dependencies array to be: [direction, gameOver, keyHandler, snake]",{"range":"310","text":"311"},"Update the dependencies array to be: [bombCount, width]",{"range":"312","text":"313"},"Update the dependencies array to be: [gameOver, squares]",{"range":"314","text":"315"},"Update the dependencies array to be: [bottom, keyHandler]",{"range":"316","text":"317"},"Update the dependencies array to be: [imageArray, isSameImage, openPicture, visibleArray]",{"range":"318","text":"319"},"Update the dependencies array to be: [alienGroup, laserIndex]",{"range":"320","text":"321"},"Update the dependencies array to be: [alienGroup, moveInvaders, shooterIndex, start]",{"range":"322","text":"323"},"Update the dependencies array to be: [shooterIndex, alienGroup, direction, moveShooter]",{"range":"324","text":"325"},"Update the dependencies array to be: [calculateWinner, squares]",{"range":"326","text":"327"},"Update the dependencies array to be: [gameOver, generateObstacles, start]",{"range":"328","text":"329"},"Update the dependencies array to be: [bottom, control, start]",{"range":"330","text":"331"},"Update the dependencies array to be: [start, gameOver, generateObstacle]",{"range":"332","text":"333"},"Update the dependencies array to be: [obstacles, bottom, start, gameOver]",{"range":"334","text":"335"},"Update the dependencies array to be: [block, cells, generateNewBlock, isBottomReached]",{"range":"336","text":"337"},"Update the dependencies array to be: [block, keyHandler]",{"range":"338","text":"339"},"Update the dependencies array to be: [fallTime, reverse, start]",{"range":"340","text":"341"},"Update the dependencies array to be: [fallTime, reverse]",{"range":"342","text":"343"},"Update the dependencies array to be: [reverse, fall, bottom, left, floor]",{"range":"344","text":"345"},"Update the dependencies array to be: [bottom, ceiling, fall, left, reverse]",{"range":"346","text":"347"},"Update the dependencies array to be: [ceiling, floor, bottom, reverse, fall]",{"range":"348","text":"349"},"Update the dependencies array to be: [left, bottom, start, playerHandler]",{"range":"350","text":"351"},[2456,2499],"[snake, direction, appleConsumed, gameOver, apple, moveSnake]",[3083,3111],"[direction, gameOver, keyHandler, snake]",[2741,2743],"[bombCount, width]",[5023,5033],"[gameOver, squares]",[2297,2305],"[bottom, keyHandler]",[3197,3224],"[imageArray, isSameImage, openPicture, visibleArray]",[3537,3549],"[alienGroup, laserIndex]",[3990,4002],"[alienGroup, moveInvaders, shooterIndex, start]",[4152,4189],"[shooterIndex, alienGroup, direction, moveShooter]",[1688,1697],"[calculateWinner, squares]",[2855,2872],"[gameOver, generateObstacles, start]",[3947,3962],"[bottom, control, start]",[2801,2818],"[start, gameOver, generateObstacle]",[4061,4087],"[obstacles, bottom, start, gameOver]",[5186,5193],"[block, cells, generateNewBlock, isBottomReached]",[6920,6927],"[block, keyHandler]",[2473,2480],"[fallTime, reverse, start]",[2851,2860],"[fallTime, reverse]",[5289,5318],"[reverse, fall, bottom, left, floor]",[5825,5834],"[bottom, ceiling, fall, left, reverse]",[6154,6187],"[ceiling, floor, bottom, reverse, fall]",[6996,7017],"[left, bottom, start, playerHandler]"]