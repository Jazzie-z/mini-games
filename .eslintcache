[{"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js":"1","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js":"2","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js":"3","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js":"4","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js":"5","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js":"6","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js":"7","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js":"8","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js":"9","C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js":"10","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js":"11","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js":"12","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js":"13","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js":"14","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js":"15","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js":"16","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js":"17","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js":"18","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js":"19","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js":"20","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js":"21","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\FlappyBird.js":"22","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tetris.js":"23","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tenet.js":"24","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Pacman.js":"25","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\feed\\resource.js":"26"},{"size":197,"mtime":1607012420109,"results":"27","hashOfConfig":"28"},{"size":746,"mtime":1607424471833,"results":"29","hashOfConfig":"28"},{"size":896,"mtime":1607072319019,"results":"30","hashOfConfig":"28"},{"size":820,"mtime":1607072739385,"results":"31","hashOfConfig":"28"},{"size":372,"mtime":1607072332112,"results":"32","hashOfConfig":"28"},{"size":1928,"mtime":1607072607427,"results":"33","hashOfConfig":"28"},{"size":1430,"mtime":1607072225070,"results":"34","hashOfConfig":"28"},{"size":494,"mtime":1607408914680,"results":"35","hashOfConfig":"28"},{"size":392,"mtime":1607072637770,"results":"36","hashOfConfig":"28"},{"size":143,"mtime":1607071297313,"results":"37","hashOfConfig":"28"},{"size":197,"mtime":1607597337995,"results":"38","hashOfConfig":"39"},{"size":1673,"mtime":1607707926401,"results":"40","hashOfConfig":"39"},{"size":392,"mtime":1607072637770,"results":"41","hashOfConfig":"39"},{"size":3643,"mtime":1607597337863,"results":"42","hashOfConfig":"39"},{"size":5576,"mtime":1607597337819,"results":"43","hashOfConfig":"39"},{"size":729,"mtime":1607681210487,"results":"44","hashOfConfig":"39"},{"size":2425,"mtime":1607597337690,"results":"45","hashOfConfig":"39"},{"size":4201,"mtime":1607597337750,"results":"46","hashOfConfig":"39"},{"size":4872,"mtime":1607673290757,"results":"47","hashOfConfig":"39"},{"size":2332,"mtime":1607601216370,"results":"48","hashOfConfig":"39"},{"size":4707,"mtime":1607668102180,"results":"49","hashOfConfig":"39"},{"size":5701,"mtime":1607597337656,"results":"50","hashOfConfig":"39"},{"size":8382,"mtime":1607707926953,"results":"51","hashOfConfig":"39"},{"size":7927,"mtime":1607673187011,"results":"52","hashOfConfig":"39"},{"size":6070,"mtime":1607707926737,"results":"53","hashOfConfig":"39"},{"size":2607,"mtime":1607707987020,"results":"54","hashOfConfig":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"1uw3rlt",{"filePath":"58","messages":"59","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1it9hws",{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\index.js",[],["119","120"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\App.js",["121","122","123","124","125","126","127","128"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\SideNav.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\UserCard.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\feed\\user.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\ChatBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\InputBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\components\\MessageBox.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\messenger-app\\src\\constants\\resource.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\index.js",[],["129","130"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\App.js",["131"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\theme.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SnakeGame.js",["132","133","134","135"],"import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { Button, Grid, Result } from \"components/common\";\n\nconst Snake = css`\n  background: orange;\n  border-radius: 50%;\n`;\nconst Apple = css`\n  background: lime;\n  border-radius: 50%;\n`;\nconst Box = styled.div`\n  width: 10px;\n  height: 10px;\n  ${({ isSnake }) => isSnake && Snake};\n  ${({ isApple }) => isApple && Apple};\n`;\nlet timer = null;\nconst SnakeGame = () => {\n  const [snake, setSnake] = useState([0, 1, 2]);\n  const [apple, setApple] = useState(\"\");\n  const [direction, setDirection] = useState(1);\n  const interval = 100;\n  const width = 40;\n  const [appleConsumed, setAppleConsumed] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const generateApple = () => {\n    const newApple = Math.floor(Math.random() * (width * width - 1));\n    if (snake.includes(newApple)) {\n      generateApple();\n    } else {\n      setApple(newApple);\n    }\n  };\n  const restartGame = () => {\n    setSnake([0, 1, 2]);\n    setDirection(1);\n    setAppleConsumed(0);\n    setGameOver(false);\n    generateApple();\n  };\n  const stopGame = () => {\n    clearTimeout(timer);\n    setApple(\"\");\n    window.removeEventListener(\"keydown\", keyHandler);\n  };\n  const isSnakeBody = (value) =>\n    snake.includes(value) &&\n    snake[snake.length - 2] !== value &&\n    console.log(snake[snake.length - 2] !== value);\n  const isOutOfScreen = (value, direction) => {\n    if (direction == 1) {\n      return value % width === 0;\n    } else if (direction === -1) {\n      return (value + 1) % width === 0;\n    }\n    return value >= width * width || value < 0;\n  };\n  const moveSnake = () => {\n    let newSnakePos = [...snake];\n    if (!appleConsumed) {\n      newSnakePos.shift();\n    } else {\n      setAppleConsumed((prev) => prev - 1);\n    }\n    let nextCell = newSnakePos[newSnakePos.length - 1] + direction;\n    if (isSnakeBody(nextCell) || isOutOfScreen(nextCell, direction)) {\n      setGameOver(true);\n      return;\n    } else {\n      newSnakePos.push(nextCell);\n    }\n    if (newSnakePos.includes(apple)) {\n      setAppleConsumed((prev) => prev + 1);\n      generateApple();\n    }\n    setSnake(newSnakePos);\n  };\n  useEffect(() => {\n    if (gameOver) {\n      clearTimeout(timer);\n      return;\n    }\n    timer = setTimeout(() => {\n      if (gameOver) clearTimeout(timer);\n      if (apple !== \"\") moveSnake();\n    }, interval);\n    return () => clearTimeout(timer);\n  }, [snake, direction, appleConsumed, gameOver]);\n  const keyHandler = (e) => {\n    switch (e.key) {\n      case \"ArrowRight\":\n        if (direction !== -1) setDirection(1);\n        break;\n      case \"ArrowLeft\":\n        if (direction !== 1) setDirection(-1);\n        break;\n      case \"ArrowUp\":\n        if (direction !== width) setDirection(-width);\n        break;\n      case \"ArrowDown\":\n        if (direction !== -width) setDirection(width);\n        break;\n    }\n  };\n  useEffect(() => {\n    if (!gameOver) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [direction, gameOver, snake]);\n  return (\n    <div>\n      <Grid color={\"#253243\"}>\n        {[...new Array(width * width)].map((e, i) => (\n          <Box key={i} isSnake={snake.includes(i)} isApple={i === apple}></Box>\n        ))}\n      </Grid>\n      <Button onClick={apple ? stopGame : restartGame}>\n        {apple ? \"STOP\" : \"START\"}\n      </Button>\n      {gameOver ? (\n        <Result>\n          GAME OVER!!!\n          <div>your score : {snake.length - 3}</div>\n        </Result>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default SnakeGame;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Minesweeper.js",["136","137","138"],"import { Button, Grid, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst Bomb = css`\n  background: orange;\n  font-size: 48px;\n`;\nconst Open = css`\n  background: white;\n  color: black;\n  border: 3px inset #1c6ea4;\n`;\nconst Empty = css`\n  background: #e1e1e1;\n  border-color: #b1b1b1;\n`;\nconst Dash = css`\n  background: red;\n`;\nconst Block = styled.div`\n  height: 40px;\n  width: 40px;\n  display: flex;\n  font-family: sans-serif;\n  align-items: center;\n  justify-content: center;\n  font-size: 24px;\n  cursor: pointer;\n  box-sizing: border-box;\n  border: 6px outset #1c6ea4;\n  color: white;\n  ${({ show }) => show && Open};\n  ${({ show, isBomb }) => show && isBomb && Bomb};\n  ${({ show, empty }) => show && empty && Empty};\n  ${({ dash }) => dash && Dash};\n`;\n// const Result = styled.div`\n//     font-size: 24px;\n//     padding: 10px;\n// `\nconst Minesweeper = () => {\n  let width = 10;\n  let bombCount = 20;\n\n  const [squares, setSquares] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const startGame = () => {\n    setGameOver(false);\n    const bombsArray = Array(bombCount).fill({ value: \"*\" });\n    const emptyArray = Array(width * width - bombCount).fill({ value: \"\" });\n    const gamesArray = [...emptyArray, ...bombsArray];\n    const shuffledArray = gamesArray.sort(() => Math.random() - 0.5);\n\n    for (let i = 0; i < shuffledArray.length; i++) {\n      let total = 0;\n      const isLeftEdge = i % width === 0;\n      const isRightEdge = i % width === width - 1;\n      // layout to check\n      // 7 8 9\n      // 4 _ 6\n      // 1 2 3\n      if (!shuffledArray[i].value) {\n        if (i > 0 && !isLeftEdge && shuffledArray[i - 1].value === \"*\") total++; //bomb at left (4)\n        if (i > 11 && !isLeftEdge && shuffledArray[i - 1 - width].value === \"*\")\n          total++; //bomb at top left(7)\n        if (i > 9 && shuffledArray[i - width].value === \"*\") total++; //bomb at top (8)\n        if (i > 9 && !isRightEdge && shuffledArray[i + 1 - width].value === \"*\")\n          total++; //bomb at top right (9)\n        if (i < 99 && !isRightEdge && shuffledArray[i + 1].value === \"*\")\n          total++; //bomb at right(6)\n        if (\n          i < 88 &&\n          !isRightEdge &&\n          shuffledArray[i + 1 + width].value === \"*\"\n        )\n          total++; //bomb at right bottom(3)\n        if (i < 89 && shuffledArray[i + width].value === \"*\") total++; //bomb at bottom(2)\n        if (i < 90 && !isLeftEdge && shuffledArray[i - 1 + width].value === \"*\")\n          total++; //bomb at left bottom(1)\n        shuffledArray[i] = { value: total || \"\" };\n      }\n    }\n    setSquares(shuffledArray);\n  };\n  useEffect(startGame, []);\n  const clickHandler = (index) => {\n    if (gameOver || squares[index].show || squares[index].flag) return;\n    if (squares[index].value === \"*\") {\n      let newSquares = [...squares];\n      newSquares[index] = { value: \"*\", dash: true };\n      setSquares(newSquares);\n      setGameOver(true);\n    } else {\n      let newSquares = [...squares];\n      newSquares[index].show = true;\n      setSquares(newSquares);\n      if (newSquares[index].value) {\n        return;\n      }\n      checkSquares(index);\n    }\n  };\n  const isNotABomb = (cell) => cell.value !== \"*\";\n  const checkSquares = (index) => {\n    const isLeftEdge = index % width === 0;\n    const isRightEdge = index % width === width - 1;\n    console.error(\"initialized again\");\n    let timer = setTimeout(() => {\n      if (index > 0 && !isLeftEdge) {\n        //toward left\n        if (isNotABomb(squares[index - 1])) {\n          clickHandler(index - 1);\n        }\n      }\n      if (index > 9 && !isRightEdge) {\n        //toward upper right\n        if (isNotABomb(squares[index + 1 - width])) {\n          clickHandler(index + 1 - width);\n        }\n      }\n      if (index > 10) {\n        //toward up\n        if (isNotABomb(squares[index - width])) {\n          clickHandler(index - width);\n        }\n      }\n      if (index > 11 && !isLeftEdge) {\n        //toward upper left\n        if (isNotABomb(squares[index - 1 - width])) {\n          clickHandler(index - 1 - width);\n        }\n      }\n      if (index < 98 && !isRightEdge) {\n        //toward right\n        if (isNotABomb(squares[index + 1])) {\n          clickHandler(index + 1);\n        }\n      }\n      if (index < 90 && !isLeftEdge) {\n        //toward lower left\n        if (isNotABomb(squares[index - 1 + width])) {\n          clickHandler(index - 1 + width);\n        }\n      }\n      if (index < 88 && !isRightEdge) {\n        if (isNotABomb(squares[index + 1 + width])) {\n          clickHandler(index + 1 + width);\n        }\n      }\n      if (index < 89) {\n        if (isNotABomb(squares[index + width])) {\n          clickHandler(index + width);\n        }\n      }\n    }, 10);\n  };\n  useEffect(() => {\n    if (gameOver) {\n      let newSquares = [...squares].map((e) => ({ ...e, show: true }));\n      console.error(newSquares);\n      setSquares(newSquares);\n    }\n  }, [gameOver]);\n  return (\n    <div>\n      <Grid color={\"#115481\"}>\n        {squares.map(({ value, show, dash }, i) => (\n          <Block\n            key={i}\n            isBomb={value === \"*\"}\n            dash={dash}\n            show={show}\n            empty={!value}\n            onClick={() => clickHandler(i)}\n          >\n            {show ? value : \"\"}\n          </Block>\n        ))}\n      </Grid>\n      <Button onClick={startGame}>(RE)START</Button>\n      {gameOver ? <Result>GAME OVER!!!</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default Minesweeper;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\components\\common.js",[],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\JumpSlide.js",["139"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nconst Game = styled.div``;\nconst Character = styled.div`\n  background-color: red;\n  height: 70px;\n  width: 40px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  left: ${({ left }) => left}px;\n`;\nlet jumpTimer = null;\nlet slideTimer = null;\nconst JumpSlide = () => {\n  const gravity = 0.9;\n  const [bottom, setBottom] = useState(0);\n  const [jump, setJump] = useState(false);\n  const [left, setLeft] = useState(0);\n  const [slide, setSlide] = useState(\"\");\n  const keyHandler = (e) => {\n    if (e.key === \" \" && bottom <= 0) setJump(true);\n    if (e.key === \"ArrowLeft\") setSlide(\"LEFT\");\n    else if (e.key === \"ArrowRight\") setSlide(\"RIGHT\");\n    else if (e.key === \"ArrowDown\") setSlide(\"\");\n  };\n  useEffect(() => {\n    // if (bottom) {\n    if (slide === \"RIGHT\") {\n      clearTimeout(slideTimer);\n      slideTimer = setTimeout(() => {\n        let newLeft = left + 5;\n        setLeft(newLeft);\n      }, 20);\n      // if (bottom == 0) setSlide('')\n    } else if (slide === \"LEFT\") {\n      clearTimeout(slideTimer);\n      slideTimer = setTimeout(() => {\n        let newLeft = left - 5;\n        setLeft(newLeft);\n      }, 20);\n      // if (bottom == 0) setSlide('')\n    } else {\n      setSlide(\"\");\n      clearTimeout(slideTimer);\n    }\n    // } else {\n    //     setSlide('')\n    //     clearTimeout(slideTimer)\n    // }\n  }, [slide, left, bottom]);\n  useEffect(() => {\n    //going up\n    if (jump) {\n      console.error(\"going to jumping\");\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom + 30;\n        newBottom *= gravity;\n        setBottom(newBottom);\n        console.error(bottom * gravity);\n      }, 20);\n      if (bottom > 250) {\n        clearTimeout(jumpTimer);\n        setJump(false);\n      }\n    } else if (bottom > 0) {\n      console.error(\"coming back\");\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom - 5 < 0 ? 0 : bottom - 5;\n        setBottom(newBottom);\n      }, 20);\n    } else {\n      console.error(\"just clearing\", bottom);\n      clearTimeout(jumpTimer);\n    }\n  }, [jump, bottom]);\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [bottom]);\n  return (\n    <Game>\n      <Character bottom={bottom} left={left} />\n    </Game>\n  );\n};\n\nexport default JumpSlide;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\MemoryGame.js",["140"],"import React, { useEffect, useState } from \"react\";\nimport Image1 from \"assets/images/1.jpg\";\nimport Image2 from \"assets/images/2.jpg\";\nimport Image3 from \"assets/images/3.jpg\";\nimport Image4 from \"assets/images/4.jpg\";\nimport Image5 from \"assets/images/5.jpg\";\nimport Image6 from \"assets/images/6.jpg\";\nimport Image7 from \"assets/images/7.jpg\";\nimport Image8 from \"assets/images/8.jpg\";\nimport styled, { css } from \"styled-components\";\nimport { Button, Grid, Result } from \"components/common\";\n\nconst Hide = css`\n  transform: rotateY(180deg);\n`;\nconst Show = css`\n  transform: rotateY(0);\n`;\nconst Card = styled.div`\n  position: relative;\n  width: 100px;\n  height: 100px;\n  text-align: center;\n  transition: transform 0.6s;\n  transform-style: preserve-3d;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  ${({ hide }) => hide && Hide};\n  ${({ show }) => show && Show};\n`;\nconst Layer = css`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n`;\nconst Image = styled.img`\n  ${Layer};\n  left: 0;\n`;\nconst Fallback = styled.div`\n  ${Layer};\n  background-color: #2980b9;\n  color: white;\n  transform: rotateY(180deg);\n`;\nconst Time = styled.div`\n  text-align: center;\n  padding: 10px 0;\n`;\nlet timer = null;\nexport const MemoryGame = () => {\n  const [start, setStart] = useState(false);\n  const [imageArray, setImages] = useState(Array(16).fill({}));\n  const [hide, setHide] = useState(false);\n  const [visibleArray, setVisibleArray] = useState([]);\n  const [openPicture, setOpenPicture] = useState([]);\n  const [time, setTime] = useState(65);\n  const [gameOver, setGameOver] = useState(false);\n  const generateRandomImage = () => {\n    let randomImage = [\n      { path: Image1, id: 1 },\n      { path: Image2, id: 2 },\n      { path: Image3, id: 3 },\n      { path: Image4, id: 4 },\n      { path: Image5, id: 5 },\n      { path: Image6, id: 6 },\n      { path: Image7, id: 7 },\n      { path: Image8, id: 8 },\n    ];\n    randomImage = randomImage.concat(randomImage);\n    randomImage = randomImage.sort(() => Math.random() - 0.5);\n    setImages(randomImage);\n    setTimeout(() => setHide(true), 5000);\n  };\n  useEffect(() => {\n    if (start) {\n      setHide(false);\n      generateRandomImage();\n    } else {\n      setHide(true);\n      setTime(65);\n      setVisibleArray([]);\n      setOpenPicture([]);\n      setGameOver(false);\n      clearTimeout(timer);\n    }\n  }, [start]);\n  useEffect(() => {\n    if (start && !gameOver) {\n      if (time) {\n        timer = setTimeout(() => {\n          setTime((prev) => prev - 1);\n        }, 1000);\n      } else {\n        setGameOver(\"GAME OVER\");\n      }\n    }\n  }, [time, gameOver, start]);\n\n  const isSameImage = ([index1, index2]) =>\n    imageArray[index1].id === imageArray[index2].id;\n  useEffect(() => {\n    if (openPicture.length === 2) {\n      if (isSameImage(openPicture)) {\n        setVisibleArray((prev) => [...prev, imageArray[openPicture[0]].id]);\n        setOpenPicture([]);\n      } else {\n        setTimeout(() => {\n          setOpenPicture([]);\n        }, 500);\n      }\n    } else if (visibleArray.length === 8) {\n      setGameOver(\"SUCCESS\");\n      clearTimeout(timer);\n    }\n  }, [openPicture, visibleArray]);\n  const clickHandler = (index) => {\n    if (\n      openPicture.length < 2 &&\n      hide &&\n      !gameOver &&\n      start &&\n      !openPicture.includes(index)\n    )\n      setOpenPicture((prev) => [...prev, index]);\n  };\n  const stopGame = () => {\n    setStart((prev) => !prev);\n  };\n  return (\n    <div>\n      <Grid>\n        {imageArray.map(({ path, id }, index) => (\n          <Card\n            key={index}\n            hide={hide}\n            onClick={() => clickHandler(index)}\n            show={openPicture.includes(index) || visibleArray.includes(id)}\n          >\n            <Image src={path} />\n            <Fallback />\n          </Card>\n        ))}\n      </Grid>\n      {start ? <Time>Remaining Time : {time}</Time> : \"\"}\n      <Button onClick={stopGame}>{start ? \"STOP\" : \"START\"}</Button>\n      {gameOver ? (\n        <Result>\n          {gameOver} !!!<div>Your score : {visibleArray.length}</div>\n        </Result>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\SpaceInvaders.js",["141","142","143","144"],"import { Button, Grid, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport AlienImage from \"assets/images/alien.png\";\nimport Jet from \"assets/images/jet.png\";\nimport ExplosionGif from \"assets/gif/explosion.gif\";\nimport Sound from \"assets/sounds/laser.mp3\";\n\nconst Shooter = css`\n  background-image: url(${Jet});\n  background-size: cover;\n`;\nconst Invader = css`\n  background-image: url(${AlienImage});\n  background-size: contain;\n`;\nconst Explosion = css`\n  background-image: url(${ExplosionGif});\n  background-size: contain;\n  z-index: 2;\n  position: relative;\n`;\nconst Laser = css`\n  background-color: yellow;\n  box-shadow: 0px 0px 16px 7px #ffae00;\n  z-index: 2;\n  position: relative;\n  width: 5px;\n  height: 10px;\n  margin: 0 auto;\n`;\nconst Cell = styled.div`\n  width: 20px;\n  height: 20px;\n  box-sizing: border-box;\n  ${({ isInvader }) => isInvader && Invader};\n  ${({ isShooter }) => isShooter && Shooter};\n  ${({ isLaser }) => isLaser && Laser};\n  ${({ isExplosion }) => isExplosion && Explosion};\n`;\nlet timer = null;\nlet laserTimer = null;\nconst SpaceInvaders = () => {\n  const width = 20;\n  const totalAlien = 33;\n  const [shooterIndex, setShooterIndex] = useState(385);\n  const [explodeIndex, setExplodeIndex] = useState(\"\");\n  const [direction, setDirection] = useState(1);\n  const [alienGroup, setAlienGroup] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [laserIndex, setLaserIndex] = useState(\"\");\n  const [start, setStart] = useState(false);\n  useEffect(() => {\n    // prettier-ignore\n    let alienLayout = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20,\n      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40,\n      41, 42, 43, 44, 45, 46, 47, 48, 49, 50,];\n    setDirection(1);\n    setAlienGroup(alienLayout);\n  }, [start]);\n  const moveShooter = (e) => {\n    if (!start) return;\n    switch (e.key) {\n      case \"ArrowRight\":\n        if (shooterIndex % width < width - 1) setShooterIndex(shooterIndex + 1);\n        break;\n      case \"ArrowLeft\":\n        if (shooterIndex % width) setShooterIndex(shooterIndex - 1);\n        break;\n      case \"ArrowUp\":\n        shoot();\n        break;\n    }\n  };\n  const moveInvaders = () => {\n    const leftEdge = alienGroup[0] % width === 0;\n    // const rightEdge = (alienGroup[alienGroup.length - 1] % width === width - 1)\n    const rightEdge = alienGroup.find((alien) => alien % width === width - 1);\n    let newDirection = direction;\n    if ((leftEdge && direction === -1) || (rightEdge && direction === 1)) {\n      newDirection = width;\n    } else if (direction === width) {\n      if (leftEdge) newDirection = 1;\n      else newDirection = -1;\n    }\n    setDirection(newDirection);\n    setAlienGroup((prev) => prev.map((e) => e + newDirection));\n  };\n  const shoot = () => {\n    var birdSound = new Audio(Sound);\n    birdSound.loop = false;\n    birdSound.play();\n    setLaserIndex(shooterIndex - width);\n  };\n  useEffect(() => {\n    if (laserIndex) {\n      if (alienGroup.includes(laserIndex)) {\n        setExplodeIndex(laserIndex);\n        let newAlien = [...alienGroup];\n        newAlien.splice(newAlien.indexOf(laserIndex), 1);\n        console.error(laserIndex, newAlien);\n        setLaserIndex(\"\");\n        setAlienGroup(newAlien);\n        setTimeout(() => {\n          setExplodeIndex(\"\");\n        }, 250);\n      } else {\n        laserTimer = setTimeout(() => {\n          setLaserIndex((prev) => prev - width);\n        }, 50);\n      }\n    }\n    return () => clearTimeout(laserTimer);\n  }, [laserIndex]);\n\n  useEffect(() => {\n    if (start) {\n      if (alienGroup.includes(shooterIndex)) {\n        setGameOver(\"GAME OVER\");\n        clearTimeout(timer);\n      } else if (!alienGroup.length) {\n        setGameOver(\"SUCCESS\");\n        clearTimeout(timer);\n      } else {\n        timer = setTimeout(() => {\n          moveInvaders();\n        }, 500);\n      }\n    } else {\n      clearTimeout(timer);\n    }\n    return () => clearTimeout(timer);\n  }, [alienGroup]);\n  useEffect(() => {\n    window.addEventListener(\"keydown\", moveShooter);\n    return () => window.removeEventListener(\"keydown\", moveShooter);\n  }, [shooterIndex, alienGroup, direction]);\n  const toggleGame = () => {\n    setStart((prev) => !prev);\n  };\n  return (\n    <div>\n      <Grid color={\"black\"}>\n        {[...Array(width * width)].map((e, i) => (\n          <Cell\n            key={i}\n            isInvader={alienGroup.includes(i)}\n            isShooter={shooterIndex === i}\n            isLaser={laserIndex === i}\n            isExplosion={explodeIndex === i}\n          ></Cell>\n        ))}\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"STOP\" : \"Start\"}</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n      <div>your score : {totalAlien - alienGroup.length}</div>\n    </div>\n  );\n};\n\nexport default SpaceInvaders;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\TicTacToe.js",["145"],"import { Button, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst Grid = styled.div`\n  width: 400px;\n  height: 400px;\n  background: #32475b;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst Block = styled.div`\n  border: 1px solid #3e5468;\n  width: 133.33px;\n  height: 133.33px;\n  box-sizing: border-box;\n  font-size: 100px;\n  font-family: sans-serif;\n  color: ${({ winner }) => (winner ? \"lime\" : \"white\")};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst TicTacToe = () => {\n  const [squares, setSquares] = useState([]);\n  const [xIsNext, setxIsNext] = useState();\n  const [gameOver, setGameOver] = useState(false);\n  const [winnerItems, setWinnerItems] = useState([]);\n  const resetGame = () => {\n    setSquares([...Array(9)]);\n    setWinnerItems([]);\n    setxIsNext(true);\n    setGameOver(false);\n  };\n  useEffect(() => {\n    resetGame();\n  }, []);\n  const calculateWinner = () => {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[a] === squares[c]\n      ) {\n        return [a, b, c];\n      }\n    }\n    return null;\n  };\n  useEffect(() => {\n    const winner = calculateWinner();\n    if (winner) {\n      setWinnerItems(winner);\n      setGameOver(`Winner is : ${squares[winner[0]]}`);\n    } else if (squares.length && !squares.includes(undefined)) {\n      setGameOver(`Game Over !!!`);\n    }\n  }, [squares]);\n  const onClick = (i) => {\n    const newSquares = [...squares];\n    if (gameOver || newSquares[i]) return;\n    newSquares[i] = xIsNext ? \"X\" : \"O\";\n    setSquares(newSquares);\n    setxIsNext((prev) => !prev);\n  };\n  return (\n    <div>\n      <Grid>\n        {squares.map((value, i) => (\n          <Block\n            key={i}\n            onClick={() => onClick(i)}\n            winner={winnerItems.includes(i)}\n          >\n            {value}\n          </Block>\n        ))}\n      </Grid>\n      <Button onClick={resetGame}>RESTART</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default TicTacToe;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\ChromeDino.js",["146","147"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Result } from \"components/common\";\nimport styled, { css, keyframes } from \"styled-components\";\nimport Joker from \"assets/images/joker.jfif\";\nimport Batman from \"assets/gif/batman.gif\";\nimport City from \"assets/images/city.png\";\n\nconst Dino = styled.div`\n  width: 60px;\n  height: 60px;\n  background-image: url(${Batman});\n  bottom: ${({ bottom }) => bottom}px;\n  position: absolute;\n  left: 80px;\n  background-size: cover;\n  background-position-x: center;\n  mix-blend-mode: multiply;\n  z-index: 5;\n`;\nconst Obstacle = styled.div`\n  position: absolute;\n  width: 40px;\n  height: 50px;\n  background-image: url(${Joker});\n  left: ${({ left }) => left}px;\n  bottom: 0;\n  background-size: cover;\n  background-repeat: no-repeat;\n  mix-blend-mode: multiply;\n  z-index: 5;\n`;\nconst Animate = keyframes`\n0% { transform: translateX(0);}\n50%{ transform :translateX(-400px);}\n100%{ transform: translateX(0);}\n`;\nconst Image = styled.img`\n  height: 50%;\n  margin-top: 30%;\n  ${({ shouldAnimate }) =>\n    shouldAnimate &&\n    css`\n    animation: ${Animate} 15s linear infinite};\n`}\n`;\nconst Score = styled.div`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  top: 50px;\n  font-size: 24px;\n`;\nlet jumpTimer = null;\nlet slideTimer = null;\nlet generateTimer = null;\nconst ChromeDino = () => {\n  const dinoPosition = 80;\n  const dinoWidth = 60;\n  const obstacleHeight = 40;\n  const [bottom, setBottom] = useState(0);\n  const [jump, setJump] = useState(false);\n  const [obstacles, setObstacles] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [start, setStart] = useState(false);\n  const gravity = 0.9;\n  useEffect(() => {\n    if (!start || gameOver) return;\n    if (jump) {\n      //going up\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom + 15;\n        newBottom *= gravity;\n        setBottom(newBottom);\n      }, 20);\n      if (bottom > 120) {\n        clearTimeout(jumpTimer);\n        setJump(false);\n      }\n    } else if (bottom > 0) {\n      // coming down\n      jumpTimer = setTimeout(() => {\n        let newBottom = bottom - 10 < 0 ? 0 : bottom - 10;\n        newBottom *= gravity;\n        setBottom(newBottom);\n      }, 20);\n    } else {\n      clearTimeout(jumpTimer);\n    }\n    return () => clearTimeout(jumpTimer);\n  }, [jump, bottom, gameOver, start]);\n  const generateObstacles = () => {\n    if (start && !gameOver) {\n      let obstaclePosition = 400;\n      setObstacles((prev) => [...prev, obstaclePosition]);\n      let min = 2000;\n      let max = 3000;\n      let randomTime = Math.floor(Math.random() * (max - min + 1)) + min;\n      generateTimer = setTimeout(() => {\n        generateObstacles();\n      }, randomTime);\n    }\n  };\n\n  useEffect(() => {\n    generateObstacles();\n  }, [gameOver, start]);\n  useEffect(() => {\n    let isColidingPosition = obstacles.find(\n      (e) => e > dinoPosition && e < dinoPosition + dinoWidth\n    );\n    if (isColidingPosition && bottom <= obstacleHeight) {\n      setGameOver(true);\n      clearTimeout(generateTimer);\n    }\n  }, [obstacles, bottom]);\n\n  useEffect(() => {\n    if (start && !gameOver && obstacles.length) {\n      slideTimer = setTimeout(() => {\n        let newPosition = [...obstacles].map((value) => value - 30);\n        let newScore = newPosition.filter((value) => value <= 0 - 30).length;\n        newPosition = newPosition.filter((value) => value > 0 - 30);\n        setScore((prev) => prev + newScore);\n        setObstacles(newPosition);\n      }, 100);\n    }\n    return () => {\n      clearTimeout(slideTimer);\n    };\n  }, [obstacles, gameOver, start]);\n\n  const control = (e) => {\n    if ([\" \", \"ArrowUp\"].includes(e.key)) {\n      if (!bottom) setJump(true);\n    }\n  };\n  useEffect(() => {\n    if (start) window.addEventListener(\"keydown\", control);\n    return () => window.removeEventListener(\"keydown\", control);\n  }, [bottom, start]);\n  const toggleGame = () => {\n    if (start) {\n      setStart(false);\n    } else {\n      setBottom(0);\n      setJump(false);\n      clearTimeout(generateTimer);\n      setObstacles([]);\n      setGameOver(false);\n      setScore(0);\n      setStart(true);\n    }\n  };\n  return (\n    <div>\n      <Grid border={\"black\"}>\n        <Dino bottom={bottom} />\n        {obstacles.map((left, i) => (\n          <Obstacle key={i} left={left} />\n        ))}\n        {score ? <Score>score : {score}</Score> : \"\"}\n        <Image src={City} shouldAnimate={start && !gameOver} />\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"Stop\" : \"Start\"}</Button>\n      {gameOver ? <Result>Game Over!!!</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default ChromeDino;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\FlappyBird.js",["148","149","150","151"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Result } from \"components/common\";\nimport styled from \"styled-components\";\nimport BirdImg from \"assets/gif/bird.gif\";\nimport BackgroundImg from \"assets/images/grassland.jpg\";\nimport Pipe from \"assets/images/pipe.png\";\n\nconst Bird = styled.div`\n  width: 30px;\n  height: 30px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  background-image: url(${BirdImg});\n  background-size: cover;\n  background-position: center;\n  left: 150px;\n  transform: rotate(${({ bottom }) => 0.225 * (200 - bottom)}deg);\n  z-index: 2;\n`;\nconst Obstacle = styled.img`\n  width: 30px;\n  height: 200px;\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  z-index: 2;\n  transform: rotate(${({ invert }) => (invert ? 0 : 180)}deg);\n  left: ${({ left }) => left}px;\n`;\nconst Floor = styled.div`\n  height: 60px;\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  overflow: hidden;\n  img {\n    width: 100%;\n    height: 400px;\n    transform: translateY(-340px);\n    z-index: 5;\n    position: relative;\n  }\n`;\nconst Image = styled.img`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n`;\nconst Score = styled.div`\n  position: absolute;\n  font-size: 24px;\n  padding: 10px;\n  color: white;\n  z-index: 3;\n  border: 4px solid white;\n  border-radius: 50%;\n  height: 20px;\n  width: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin: 5px;\n`;\nlet gravityTimer = null;\nlet slideTimer = null;\nlet generateTimer = null;\nlet flyTimer = null;\nconst FlappyBird = () => {\n  const floorHeight = 60;\n  const gravity = 0.9;\n  const birdSize = 30;\n  const birdPos = 150;\n  const pipeSize = 200;\n  const verticalGap = 100;\n  const [bottom, setBottom] = useState(200);\n  const [start, setStart] = useState(false);\n  const [obstacles, setObstacles] = useState([]);\n  const [fly, setFly] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    if (!gameOver && start && bottom) {\n      gravityTimer = setTimeout(() => {\n        let newBottom = fly ? bottom + 7.5 : bottom - 2.5;\n        setBottom(newBottom);\n      }, 20);\n    }\n    return () => {\n      clearTimeout(gravityTimer);\n    };\n  }, [start, bottom, fly, gameOver]);\n\n  const generateObstacle = () => {\n    if (start && !gameOver) {\n      let obstaclePosition = 400;\n      let height = Math.floor(Math.random() * floorHeight);\n      setObstacles((prev) => [...prev, { left: obstaclePosition, height }]);\n      let min = 800;\n      let max = 3000;\n      let randomTime = Math.floor(Math.random() * (max - min + 1)) + min;\n      generateTimer = setTimeout(() => {\n        generateObstacle();\n      }, randomTime);\n    }\n  };\n  useEffect(() => {\n    generateObstacle();\n  }, [start, gameOver]);\n\n  useEffect(() => {\n    if (!gameOver && start && obstacles.length) {\n      slideTimer = setTimeout(() => {\n        let newPosition = [...obstacles].map(({ left, height }) => ({\n          left: left - 10,\n          height,\n        }));\n        newPosition = newPosition.filter(({ left }) => left > 0 - 30);\n        let newScore = newPosition.filter(\n          ({ left }) => left < birdPos && left >= birdPos - 10\n        ).length;\n        setScore((prev) => prev + newScore);\n        setObstacles(newPosition);\n      }, 80);\n    }\n    return () => {\n      clearTimeout(slideTimer);\n    };\n  }, [obstacles, start, gameOver]);\n\n  useEffect(() => {\n    if (start && !gameOver) {\n      if (bottom <= floorHeight) {\n        //REACHED FLOOR\n        setGameOver(\"GAME OVER!!!\");\n        stopTimer();\n      } else {\n        let nearestObstacle = obstacles.find(\n          (e) => e.left >= birdPos && e.left <= birdPos + birdSize\n        );\n        if (nearestObstacle) {\n          if (\n            bottom <= pipeSize + nearestObstacle.height ||\n            bottom + birdSize >= pipeSize + nearestObstacle.height + verticalGap\n          ) {\n            setGameOver(\"GAME OVER!!!\");\n            stopTimer();\n          }\n        }\n      }\n    }\n  }, [obstacles, bottom, start]);\n  const keyHandler = (e) => {\n    if ([\"ArrowUp\", \" \"].includes(e.key)) {\n      setFly(true);\n      clearTimeout(flyTimer);\n      flyTimer = setTimeout(() => {\n        setFly(false);\n      }, 150);\n    }\n  };\n  useEffect(() => {\n    if (start && !gameOver) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.addEventListener(\"keydown\", keyHandler);\n  }, [start, gameOver]);\n  const stopTimer = () => {\n    clearTimeout(generateTimer);\n    clearTimeout(slideTimer);\n    clearTimeout(flyTimer);\n    clearTimeout(gravityTimer);\n  };\n  const toggleGame = () => {\n    if (start) {\n      setStart(false);\n    } else {\n      setGameOver(false);\n      setObstacles([]);\n      setBottom(200);\n      setScore(0);\n      setFly(false);\n      setStart(true);\n    }\n    stopTimer();\n  };\n  return (\n    <div>\n      <Grid border={\"black\"}>\n        <div>\n          <Bird bottom={bottom} />\n        </div>\n        {obstacles.map(({ left, height }, i) => (\n          <Obstacle key={i} left={left} bottom={height} src={Pipe} />\n        ))}\n        {obstacles.map(({ left, height }, i) => (\n          <Obstacle\n            key={i}\n            left={left}\n            bottom={pipeSize + height + verticalGap}\n            src={Pipe}\n            invert={true}\n          />\n        ))}\n        <Image src={BackgroundImg} />\n        <Floor>\n          <img src={BackgroundImg}></img>\n        </Floor>\n        <Score>{score}</Score>\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"Stop\" : \"Start\"}</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default FlappyBird;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tetris.js",["152","153","154"],"C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Tenet.js",["155","156","157","158","159","160","161","162","163"],"import { Button, Grid, Result } from \"components/common\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Door from \"assets/images/door.png\";\nimport RedChar from \"assets/images/char_red.png\";\nimport BlueChar from \"assets/images/char_blue.png\";\nimport Machine from \"assets/images/time_machine.png\";\nimport ExitImg from \"assets/images/exit.png\";\nconst Container = styled.div`\n  box-shadow: 0px 1px 41px 20px\n    ${({ reverse }) => (reverse ? \"#0075ff36\" : \"#ff000036\")} inset;\n`;\nconst Ceiling = styled.div`\n  height: 10px;\n  width: 20px;\n  background: ${({ floor }) => (floor ? \"black\" : \"grey\")};\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  left: ${({ left }) => left}px;\n  transform: rotate(${({ rotate }) => rotate + \"deg\"});\n`;\nconst Character = styled.img`\n  height: 30px;\n\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  left: ${({ left }) => left}px;\n  z-index: 2;\n`;\nconst TurnStile = styled.img`\n  width: 50px;\n  height: 50px;\n  bottom: -2px;\n  right: -5px;\n  position: absolute;\n  box-sizing: border-box;\n  font-size: 10px;\n`;\nconst Exit = styled.img`\n  position: absolute;\n  bottom: ${({ bottom }) => bottom}px;\n  left: ${({ left }) => left}px;\n  width: 40px;\n  height: 80px;\n`;\nconst Poster = styled.img`\n  position: absolute;\n  top: 20px;\n  left: 150px;\n  width: 80px;\n`;\nlet gravityTimer = null;\nlet antiGravityTimer = null;\nlet playerGravityTimer = null;\nlet playerAntiGravityTimer = null;\nlet fallTimer = null;\nconst Tenet = () => {\n  const [ceiling, setCeiling] = useState(\n    [...Array(6)].map((e, i) => ({ id: i, bottom: 248, left: (i + 2) * 20 }))\n  );\n  let floor = [...Array(20)].map((e, i) => ({\n    id: `floor${i}`,\n    bottom: 248,\n    left: i * 20,\n    floor: true,\n  }));\n  floor = floor.filter((e) => !ceiling.find((i) => i.left == e.left));\n  const [reverse, setReverse] = useState(false);\n  const [bottom, setBottom] = useState(256);\n  const [left, setLeft] = useState(0);\n  const exitPosition = [258, 360];\n  const [fall, setFall] = useState(false);\n  const [fallTime, setFallTime] = useState(1100);\n  const [gameOver, setGameOver] = useState(false);\n  const [start, setStart] = useState(false);\n  useEffect(() => {\n    if (!reverse && start) {\n      fallTimer = setTimeout(() => {\n        setFall(true);\n        setFallTime(new Date().getTime());\n      }, fallTime);\n    }\n    return () => clearTimeout(fallTimer);\n  }, [start]);\n  useEffect(() => {\n    if (reverse) {\n      console.error(\"will be revesing in \", new Date().getTime() - fallTime);\n      fallTimer = setTimeout(() => {\n        console.error(\"reversing now\");\n        setFall(false);\n      }, new Date().getTime() - fallTime);\n    }\n    return () => clearTimeout(fallTimer);\n  }, [reverse]);\n  useEffect(() => {\n    //ceiling fall\n    if (fall && reverse === false && ceiling.find((e) => e.bottom)) {\n      gravityTimer = setTimeout(() => {\n        let newCeiling = [...ceiling];\n        let firstBrick = newCeiling.findIndex((e) => !e.broke);\n        if (newCeiling[firstBrick]) {\n          newCeiling[firstBrick].broke = true;\n          newCeiling[firstBrick].rotate = Math.floor(Math.random() * 90);\n        }\n        newCeiling = newCeiling.map((e) =>\n          e.broke ? { ...e, bottom: e.bottom - 8 >= 0 ? e.bottom - 8 : 0 } : e\n        );\n        setCeiling(newCeiling);\n      }, 20);\n    } else {\n      clearTimeout(gravityTimer);\n    }\n    return () => clearTimeout(gravityTimer);\n  }, [reverse, ceiling, fall]);\n  useEffect(() => {\n    //ceiling anti fall\n    if (!fall && reverse && ceiling.find((e) => e.bottom < 248)) {\n      let newCeiling = [...ceiling];\n      antiGravityTimer = setTimeout(() => {\n        let firstBrick = newCeiling.filter((e) => e.broke).pop();\n        if (firstBrick) {\n          firstBrick.broke = false;\n        }\n        newCeiling = newCeiling.map((e) =>\n          !e.broke\n            ? { ...e, bottom: e.bottom + 8 <= 248 ? e.bottom + 8 : 248 }\n            : e\n        );\n        let topBrick = newCeiling\n          .filter((e) => e.bottom === 248 && e.rotate)\n          .pop();\n        if (topBrick) {\n          topBrick.rotate = 0;\n        }\n        setCeiling(newCeiling);\n      }, 20);\n    } else {\n      // setReverse(false)\n      clearTimeout(antiGravityTimer);\n    }\n    return () => clearTimeout(antiGravityTimer);\n  }, [ceiling, reverse, fall]);\n\n  useEffect(() => {\n    if (fall && !reverse && bottom) {\n      let fallAmount = 8;\n      let floorPresent = floor.find(\n        (e) =>\n          e.bottom + fallAmount === bottom && [left - 10, left].includes(e.left)\n      );\n      // console.error(floor.find(e => [left - 10, left].includes(e.left)))\n      // console.error(floor.find(e => (e.bottom + fallAmount) === bottom))\n      if (!floorPresent) {\n        playerGravityTimer = setTimeout(() => {\n          setBottom((prev) => prev - 8);\n        }, 20);\n      }\n    }\n    return () => clearTimeout(playerGravityTimer);\n  }, [reverse, fall, bottom, left]);\n\n  useEffect(() => {\n    if (!fall && reverse && bottom <= 248) {\n      let fallAmount = 8;\n      let floorPresent = ceiling.find(\n        (e) =>\n          [bottom, bottom + fallAmount].includes(e.bottom) &&\n          [left - 10, left].includes(e.left)\n      );\n      if (floorPresent) {\n        playerAntiGravityTimer = setTimeout(() => {\n          setBottom((prev) => prev + 8);\n        }, 15);\n      }\n    }\n    return () => clearTimeout(playerAntiGravityTimer);\n  }, [ceiling]);\n\n  useEffect(() => {\n    if (!fall) {\n      let ceilPos = ceiling.filter((e) => e.bottom === 248).length;\n      console.error(\"ceilPos\", ceilPos, bottom, bottom < 256);\n      if (ceilPos === ceiling.length && bottom < 256)\n        setGameOver(\"FAILED! Try again\");\n    }\n  }, [ceiling, floor, bottom, reverse]);\n\n  const playerHandler = (e) => {\n    const moveAmount = 10;\n    if ((gameOver, !start)) return;\n    switch (e.key) {\n      case \"ArrowRight\": {\n        if (left + moveAmount === 360 && bottom === 256)\n          setGameOver(\"SUCCESS !!!\");\n        if (left + moveAmount === 360 && bottom === 0)\n          setReverse((prev) => !prev);\n        if (left + moveAmount <= 380) setLeft((prev) => prev + moveAmount);\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (left - moveAmount > 0) setLeft((prev) => prev - moveAmount);\n        break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", playerHandler);\n    return () => window.removeEventListener(\"keydown\", playerHandler);\n  }, [left, bottom, start]);\n  const resetGame = () => {\n    setCeiling(\n      [...Array(6)].map((e, i) => ({ id: i, bottom: 248, left: (i + 2) * 20 }))\n    );\n    setReverse(false);\n    setBottom(256);\n    setLeft(0);\n    setFall(false);\n    setFallTime(1100);\n    setGameOver(false);\n  };\n  const toggleGame = () => {\n    if (start) {\n      setStart((prev) => !prev);\n    } else {\n      resetGame();\n      setStart((prev) => !prev);\n    }\n  };\n  return (\n    <div>\n      <Container reverse={reverse}>\n        <Grid border={\"black\"}>\n          {[...ceiling, ...floor].map(\n            ({ id, bottom, left, rotate, floor }, i) => (\n              <Ceiling\n                key={id}\n                bottom={bottom}\n                left={left}\n                floor={floor}\n                rotate={rotate}\n              ></Ceiling>\n            )\n          )}\n          <Character\n            bottom={bottom}\n            left={left}\n            src={reverse ? BlueChar : RedChar}\n          ></Character>\n          <TurnStile bottom={bottom} src={Machine}></TurnStile>\n          <Exit\n            src={Door}\n            bottom={exitPosition[0]}\n            left={exitPosition[1]}\n          ></Exit>\n          <Poster src={ExitImg} />\n        </Grid>\n      </Container>\n      <Button onClick={toggleGame}>{start ? \"Stop\" : \"Start\"}</Button>\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default Tenet;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\games\\Pacman.js",["164","165","166","167"],"import { Button, Grid, Result } from \"components/common\";\nimport { layout, legends } from \"feed/resource\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport BlinkyImg from \"assets/images/blinky.png\";\nimport ClydeImg from \"assets/images/clyde.png\";\nimport InkyImg from \"assets/images/inky.png\";\nimport PinkyImg from \"assets/images/pinky.png\";\nimport GhostImg from \"assets/images/scared-ghost.png\";\nimport PacmanImg from \"assets/gif/pacman.gif\";\nconst Block = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 14.3px;\n  height: 14.3px;\n`;\nconst Wall = styled(Block)`\n  background: #182e60;\n`;\nconst Dot = styled(Block)`\n  div {\n    width: 3px;\n    height: 3px;\n    background: white;\n    border-radius: 50%;\n  }\n`;\nconst PowerPellet = styled(Block)`\n  div {\n    width: 6px;\n    height: 6px;\n    background: white;\n    border-radius: 50%;\n  }\n`;\nconst Empty = styled(Block)``;\nconst PacManChar = styled(Block)`\n  transform: rotate(${({ rotate }) => rotate + \"deg\"});\n  img {\n    width: 70%;\n  }\n`;\nconst Alien = styled(Block)`\n  img {\n    width: 70%;\n  }\n`;\nexport const Components = {\n  0: Dot,\n  1: Wall,\n  2: Empty,\n  3: PowerPellet,\n  4: Empty,\n};\nconst getRotationDeg = (direction) => {\n  const degrees = {\n    RIGHT: \"0\",\n    LEFT: \"180\",\n    UP: \"270\",\n    DOWN: \"90\",\n  };\n  return degrees[direction];\n};\nlet pacmanTimer = null;\nlet ghostTimer = [];\nlet energyTimer = null;\nlet width = 28;\nconst directionAmt = {\n  RIGHT: 1,\n  LEFT: -1,\n  UP: -width,\n  DOWN: width,\n};\nconst PacMan = () => {\n  const [cells, setCells] = useState(layout);\n  const [pacman, setPacman] = useState(490);\n  const [direction, setDirection] = useState(\"LEFT\");\n  const [start, setStart] = useState(false);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(\"\");\n  const [energize, setEnergize] = useState(false);\n  const [ghosts, setGhosts] = useState([\n    { index: 403, direction: 1, img: BlinkyImg },\n    { index: 405, direction: -1, img: ClydeImg },\n    { index: 408, direction: width, img: PinkyImg },\n    { index: 379, direction: -width, img: InkyImg },\n  ]);\n  useEffect(() => {\n    //packman slider\n    if (start && !gameOver) {\n      let newPosition = pacman + directionAmt[direction];\n      let leftTunnel = direction === \"LEFT\" && pacman === 364;\n      let rightTunnel = direction === \"RIGHT\" && pacman === 391;\n      if (leftTunnel) newPosition = pacman + width - 1;\n      if (rightTunnel) newPosition = pacman - width + 1;\n      if (cells[newPosition] !== legends.wall)\n        pacmanTimer = setTimeout(() => {\n          setPacman(newPosition);\n        }, 200);\n      let ghostPresent = ghosts.find((e) => e.index === pacman);\n      if (ghostPresent) setGameOver(\"Game Over\");\n    }\n    return () => clearTimeout(pacmanTimer);\n  }, [pacman, start, cells, direction, gameOver]);\n\n  const getValidSquare = (value, addAmount) => {\n    const dir = [1, -1, width, -width];\n    const newPos = addAmount || dir[Math.floor(Math.random() * dir.length)];\n    const otherGhost = ghosts.find((e) => e.index === value + newPos);\n    if (cells[value + newPos] !== legends.wall && !otherGhost) {\n      return { index: value + newPos, direction: newPos };\n    } else {\n      return getValidSquare(value);\n    }\n  };\n  const moveGhosts = (values, callback) => {\n    ghostTimer.push(\n      setTimeout(() => {\n        let newValue = [];\n        values.forEach(({ index, direction, img }) => {\n          newValue.push({ img, ...getValidSquare(index, direction) });\n        });\n        callback(newValue);\n      }, 200)\n    );\n  };\n  useEffect(() => {\n    //blinky quick path search\n    if (start && !gameOver) moveGhosts(ghosts, setGhosts);\n    return () => ghostTimer.forEach((e) => clearTimeout(e));\n  }, [ghosts, direction, start, gameOver]);\n  const keyHandler = (e) => {\n    let keyMap = {\n      ArrowUp: \"UP\",\n      ArrowDown: \"DOWN\",\n      ArrowLeft: \"LEFT\",\n      ArrowRight: \"RIGHT\",\n    };\n    if (keyMap[e.key]) setDirection(keyMap[e.key]);\n  };\n  useEffect(() => {\n    if (start) window.addEventListener(\"keydown\", keyHandler);\n    return () => window.removeEventListener(\"keydown\", keyHandler);\n  }, [start]);\n  useEffect(() => {\n    //eating pellet\n    if (cells[pacman] === legends.pacDots) {\n      setScore((prev) => prev + 1);\n      let newCells = [...cells];\n      newCells[pacman] = legends.empty;\n      setCells(newCells);\n    }\n    if (cells[pacman] === legends.powerPellet) {\n      let newCells = [...cells];\n      newCells[pacman] = legends.empty;\n      setEnergize(\"id\" + pacman);\n      setCells(newCells);\n    }\n    if (!cells.includes(legends.pacDots)) {\n      setGameOver(\"Success!!!\");\n    }\n  }, [pacman, score, cells]);\n  useEffect(() => {\n    if (energize) {\n      energyTimer = setTimeout(() => {\n        setEnergize(false);\n      }, 10000);\n    }\n    return () => clearTimeout(energyTimer);\n  }, [energize]);\n  const resetGame = () => {\n    setCells(layout);\n    setPacman(490);\n    setDirection(\"LEFT\");\n    setGameOver(false);\n  };\n  const toggleGame = () => {\n    if (start) setStart(false);\n    else {\n      resetGame();\n      setStart(true);\n    }\n  };\n  return (\n    <div>\n      <Grid color={\"black\"} width={401} height={401}>\n        {cells.map((e, i) => {\n          if (i === pacman)\n            return (\n              <PacManChar rotate={getRotationDeg(direction)}>\n                <img src={PacmanImg} />\n              </PacManChar>\n            );\n          let ghost = ghosts.find((e) => e.index === i);\n          if (ghost)\n            return (\n              <Alien>\n                <img src={energize ? GhostImg : ghost.img} />\n              </Alien>\n            );\n          let Comp = Components[e];\n          return (\n            <Comp key={i}>\n              <div></div>\n            </Comp>\n          );\n        })}\n      </Grid>\n      <Button onClick={toggleGame}>{start ? \"Stop\" : \"Start\"}</Button>\n      {score}\n      {energize}\n      {gameOver ? <Result>{gameOver}</Result> : \"\"}\n    </div>\n  );\n};\n\nexport default PacMan;\n","C:\\Users\\Lenovo\\Desktop\\COGNITE\\mini-games\\src\\feed\\resource.js",[],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":2,"column":18,"nodeType":"174","messageId":"175","endLine":2,"endColumn":31},{"ruleId":"172","severity":1,"message":"176","line":3,"column":10,"nodeType":"174","messageId":"175","endLine":3,"endColumn":21},{"ruleId":"172","severity":1,"message":"177","line":3,"column":23,"nodeType":"174","messageId":"175","endLine":3,"endColumn":28},{"ruleId":"172","severity":1,"message":"178","line":4,"column":8,"nodeType":"174","messageId":"175","endLine":4,"endColumn":15},{"ruleId":"172","severity":1,"message":"179","line":5,"column":8,"nodeType":"174","messageId":"175","endLine":5,"endColumn":15},{"ruleId":"172","severity":1,"message":"180","line":8,"column":7,"nodeType":"174","messageId":"175","endLine":8,"endColumn":16},{"ruleId":"172","severity":1,"message":"181","line":14,"column":10,"nodeType":"174","messageId":"175","endLine":14,"endColumn":22},{"ruleId":"172","severity":1,"message":"182","line":14,"column":24,"nodeType":"174","messageId":"175","endLine":14,"endColumn":39},{"ruleId":"168","replacedBy":"183"},{"ruleId":"170","replacedBy":"184"},{"ruleId":"172","severity":1,"message":"185","line":4,"column":8,"nodeType":"174","messageId":"175","endLine":4,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":53,"column":19,"nodeType":"188","messageId":"189","endLine":53,"endColumn":21},{"ruleId":"190","severity":1,"message":"191","line":90,"column":6,"nodeType":"192","endLine":90,"endColumn":49,"suggestions":"193"},{"ruleId":"194","severity":1,"message":"195","line":92,"column":5,"nodeType":"196","messageId":"197","endLine":105,"endColumn":6},{"ruleId":"190","severity":1,"message":"198","line":110,"column":6,"nodeType":"192","endLine":110,"endColumn":34,"suggestions":"199"},{"ruleId":"190","severity":1,"message":"200","line":86,"column":24,"nodeType":"192","endLine":86,"endColumn":26,"suggestions":"201"},{"ruleId":"172","severity":1,"message":"202","line":109,"column":9,"nodeType":"174","messageId":"175","endLine":109,"endColumn":14},{"ruleId":"190","severity":1,"message":"203","line":164,"column":6,"nodeType":"192","endLine":164,"endColumn":16,"suggestions":"204"},{"ruleId":"190","severity":1,"message":"198","line":80,"column":6,"nodeType":"192","endLine":80,"endColumn":14,"suggestions":"205"},{"ruleId":"190","severity":1,"message":"206","line":117,"column":6,"nodeType":"192","endLine":117,"endColumn":33,"suggestions":"207"},{"ruleId":"194","severity":1,"message":"195","line":64,"column":5,"nodeType":"196","messageId":"197","endLine":74,"endColumn":6},{"ruleId":"190","severity":1,"message":"208","line":115,"column":6,"nodeType":"192","endLine":115,"endColumn":18,"suggestions":"209"},{"ruleId":"190","severity":1,"message":"210","line":134,"column":6,"nodeType":"192","endLine":134,"endColumn":18,"suggestions":"211"},{"ruleId":"190","severity":1,"message":"212","line":138,"column":6,"nodeType":"192","endLine":138,"endColumn":43,"suggestions":"213"},{"ruleId":"190","severity":1,"message":"214","line":70,"column":6,"nodeType":"192","endLine":70,"endColumn":15,"suggestions":"215"},{"ruleId":"190","severity":1,"message":"216","line":107,"column":6,"nodeType":"192","endLine":107,"endColumn":23,"suggestions":"217"},{"ruleId":"190","severity":1,"message":"218","line":141,"column":6,"nodeType":"192","endLine":141,"endColumn":21,"suggestions":"219"},{"ruleId":"172","severity":1,"message":"220","line":70,"column":9,"nodeType":"174","messageId":"175","endLine":70,"endColumn":16},{"ruleId":"190","severity":1,"message":"221","line":108,"column":6,"nodeType":"192","endLine":108,"endColumn":23,"suggestions":"222"},{"ruleId":"190","severity":1,"message":"223","line":151,"column":6,"nodeType":"192","endLine":151,"endColumn":32,"suggestions":"224"},{"ruleId":"225","severity":1,"message":"226","line":204,"column":11,"nodeType":"227","endLine":204,"endColumn":36},{"ruleId":"190","severity":1,"message":"228","line":175,"column":6,"nodeType":"192","endLine":175,"endColumn":20,"suggestions":"229"},{"ruleId":"194","severity":1,"message":"195","line":216,"column":5,"nodeType":"196","messageId":"197","endLine":226,"endColumn":6},{"ruleId":"190","severity":1,"message":"198","line":231,"column":6,"nodeType":"192","endLine":231,"endColumn":20,"suggestions":"230"},{"ruleId":"186","severity":1,"message":"187","line":59,"column":57,"nodeType":"188","messageId":"189","endLine":59,"endColumn":59},{"ruleId":"190","severity":1,"message":"231","line":76,"column":8,"nodeType":"192","endLine":76,"endColumn":15,"suggestions":"232"},{"ruleId":"190","severity":1,"message":"233","line":86,"column":8,"nodeType":"192","endLine":86,"endColumn":17,"suggestions":"234"},{"ruleId":"190","severity":1,"message":"235","line":141,"column":8,"nodeType":"192","endLine":141,"endColumn":37,"suggestions":"236"},{"ruleId":"190","severity":1,"message":"237","line":154,"column":8,"nodeType":"192","endLine":154,"endColumn":17,"suggestions":"238"},{"ruleId":"190","severity":1,"message":"239","line":163,"column":8,"nodeType":"192","endLine":163,"endColumn":41,"suggestions":"240"},{"ruleId":"241","severity":1,"message":"242","line":167,"column":21,"nodeType":"243","messageId":"244","endLine":167,"endColumn":22},{"ruleId":"194","severity":1,"message":"195","line":168,"column":9,"nodeType":"196","messageId":"197","endLine":179,"endColumn":10},{"ruleId":"190","severity":1,"message":"245","line":185,"column":8,"nodeType":"192","endLine":185,"endColumn":29,"suggestions":"246"},{"ruleId":"190","severity":1,"message":"247","line":107,"column":8,"nodeType":"192","endLine":107,"endColumn":51,"suggestions":"248"},{"ruleId":"190","severity":1,"message":"249","line":133,"column":8,"nodeType":"192","endLine":133,"endColumn":44,"suggestions":"250"},{"ruleId":"225","severity":1,"message":"226","line":191,"column":93,"nodeType":"227","endLine":191,"endColumn":116},{"ruleId":"225","severity":1,"message":"226","line":193,"column":46,"nodeType":"227","endLine":193,"endColumn":91},"no-native-reassign",["251"],"no-negated-in-lhs",["252"],"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'GlobalStyle' is defined but never used.","'theme' is defined but never used.","'ChatBox' is defined but never used.","'SideNav' is defined but never used.","'Container' is assigned a value but never used.","'activeFriend' is assigned a value but never used.","'setActiveFriend' is assigned a value but never used.",["251"],["252"],"'JumpSlide' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'apple' and 'moveSnake'. Either include them or remove the dependency array.","ArrayExpression",["253"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'keyHandler'. Either include it or remove the dependency array.",["254"],"React Hook useEffect has missing dependencies: 'bombCount' and 'width'. Either include them or remove the dependency array.",["255"],"'timer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'squares'. Either include it or remove the dependency array.",["256"],["257"],"React Hook useEffect has missing dependencies: 'imageArray' and 'isSameImage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setVisibleArray' needs the current value of 'imageArray'.",["258"],"React Hook useEffect has a missing dependency: 'alienGroup'. Either include it or remove the dependency array.",["259"],"React Hook useEffect has missing dependencies: 'moveInvaders', 'shooterIndex', and 'start'. Either include them or remove the dependency array.",["260"],"React Hook useEffect has a missing dependency: 'moveShooter'. Either include it or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'calculateWinner'. Either include it or remove the dependency array.",["262"],"React Hook useEffect has a missing dependency: 'generateObstacles'. Either include it or remove the dependency array.",["263"],"React Hook useEffect has a missing dependency: 'control'. Either include it or remove the dependency array.",["264"],"'gravity' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'generateObstacle'. Either include it or remove the dependency array.",["265"],"React Hook useEffect has a missing dependency: 'gameOver'. Either include it or remove the dependency array.",["266"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'cells', 'generateNewBlock', 'generateRandomNumber', and 'isBottomReached'. Either include them or remove the dependency array.",["267"],["268"],"React Hook useEffect has missing dependencies: 'fallTime' and 'reverse'. Either include them or remove the dependency array.",["269"],"React Hook useEffect has a missing dependency: 'fallTime'. Either include it or remove the dependency array.",["270"],"React Hook useEffect has a missing dependency: 'floor'. Either include it or remove the dependency array.",["271"],"React Hook useEffect has missing dependencies: 'bottom', 'fall', 'left', and 'reverse'. Either include them or remove the dependency array.",["272"],"React Hook useEffect has a missing dependency: 'fall'. Either include it or remove the dependency array.",["273"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'playerHandler'. Either include it or remove the dependency array.",["274"],"React Hook useEffect has a missing dependency: 'ghosts'. Either include it or remove the dependency array.",["275"],"React Hook useEffect has a missing dependency: 'moveGhosts'. Either include it or remove the dependency array.",["276"],"no-global-assign","no-unsafe-negation",{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},"Update the dependencies array to be: [snake, direction, appleConsumed, gameOver, apple, moveSnake]",{"range":"325","text":"326"},"Update the dependencies array to be: [direction, gameOver, keyHandler, snake]",{"range":"327","text":"328"},"Update the dependencies array to be: [bombCount, width]",{"range":"329","text":"330"},"Update the dependencies array to be: [gameOver, squares]",{"range":"331","text":"332"},"Update the dependencies array to be: [bottom, keyHandler]",{"range":"333","text":"334"},"Update the dependencies array to be: [imageArray, isSameImage, openPicture, visibleArray]",{"range":"335","text":"336"},"Update the dependencies array to be: [alienGroup, laserIndex]",{"range":"337","text":"338"},"Update the dependencies array to be: [alienGroup, moveInvaders, shooterIndex, start]",{"range":"339","text":"340"},"Update the dependencies array to be: [shooterIndex, alienGroup, direction, moveShooter]",{"range":"341","text":"342"},"Update the dependencies array to be: [calculateWinner, squares]",{"range":"343","text":"344"},"Update the dependencies array to be: [gameOver, generateObstacles, start]",{"range":"345","text":"346"},"Update the dependencies array to be: [bottom, control, start]",{"range":"347","text":"348"},"Update the dependencies array to be: [start, gameOver, generateObstacle]",{"range":"349","text":"350"},"Update the dependencies array to be: [obstacles, bottom, start, gameOver]",{"range":"351","text":"352"},"Update the dependencies array to be: [start, block, isBottomReached, generateRandomNumber, cells, generateNewBlock]",{"range":"353","text":"354"},"Update the dependencies array to be: [block, keyHandler, start]",{"range":"355","text":"356"},"Update the dependencies array to be: [fallTime, reverse, start]",{"range":"357","text":"358"},"Update the dependencies array to be: [fallTime, reverse]",{"range":"359","text":"360"},"Update the dependencies array to be: [reverse, fall, bottom, left, floor]",{"range":"361","text":"362"},"Update the dependencies array to be: [bottom, ceiling, fall, left, reverse]",{"range":"363","text":"364"},"Update the dependencies array to be: [ceiling, floor, bottom, reverse, fall]",{"range":"365","text":"366"},"Update the dependencies array to be: [left, bottom, start, playerHandler]",{"range":"367","text":"368"},"Update the dependencies array to be: [pacman, start, cells, direction, gameOver, ghosts]",{"range":"369","text":"370"},"Update the dependencies array to be: [ghosts, direction, start, gameOver, moveGhosts]",{"range":"371","text":"372"},[2456,2499],"[snake, direction, appleConsumed, gameOver, apple, moveSnake]",[3083,3111],"[direction, gameOver, keyHandler, snake]",[2741,2743],"[bombCount, width]",[5023,5033],"[gameOver, squares]",[2297,2305],"[bottom, keyHandler]",[3197,3224],"[imageArray, isSameImage, openPicture, visibleArray]",[3560,3572],"[alienGroup, laserIndex]",[4013,4025],"[alienGroup, moveInvaders, shooterIndex, start]",[4175,4212],"[shooterIndex, alienGroup, direction, moveShooter]",[1688,1697],"[calculateWinner, squares]",[2855,2872],"[gameOver, generateObstacles, start]",[3947,3962],"[bottom, control, start]",[2801,2818],"[start, gameOver, generateObstacle]",[4061,4087],"[obstacles, bottom, start, gameOver]",[5371,5385],"[start, block, isBottomReached, generateRandomNumber, cells, generateNewBlock]",[7056,7070],"[block, keyHandler, start]",[2473,2480],"[fallTime, reverse, start]",[2851,2860],"[fallTime, reverse]",[5289,5318],"[reverse, fall, bottom, left, floor]",[5825,5834],"[bottom, ceiling, fall, left, reverse]",[6154,6187],"[ceiling, floor, bottom, reverse, fall]",[6996,7017],"[left, bottom, start, playerHandler]",[3103,3146],"[pacman, start, cells, direction, gameOver, ghosts]",[4157,4193],"[ghosts, direction, start, gameOver, moveGhosts]"]