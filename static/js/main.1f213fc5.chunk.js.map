{"version":3,"sources":["components/common.js","games/JumpSlide.js","assets/images/1.jpg","assets/images/2.jpg","assets/images/3.jpg","assets/images/4.jpg","assets/images/5.jpg","assets/images/6.jpg","assets/images/7.jpg","assets/images/8.jpg","games/MemoryGame.js","games/Minesweeper.js","games/SnakeGame.js","App.js","index.js"],"names":["Button","styled","button","Result","div","Title","bottom","left","Container","Grid","Hide","css","Show","Card","hide","show","Layer","Image","img","Fallback","Time","timer","MemoryGame","useState","start","setStart","Array","fill","imageArray","setImages","setHide","visibleArray","setVisibleArray","openPicture","setOpenPicture","time","setTime","gameOver","setGameOver","useEffect","randomImage","path","Image1","id","Image2","Image3","Image4","Image5","Image6","Image7","Image8","concat","sort","Math","random","setTimeout","generateRandomImage","clearTimeout","prev","length","index1","index2","isSameImage","map","index","onClick","includes","clickHandler","src","Bomb","Open","Empty","Dash","Block","isBomb","empty","dash","Minesweeper","width","squares","setSquares","startGame","bombsArray","value","emptyArray","shuffledArray","i","total","isLeftEdge","isRightEdge","flag","newSquares","checkSquares","isNotABomb","cell","console","error","e","Snake","Apple","Box","isSnake","isApple","SnakeGame","snake","setSnake","apple","setApple","direction","setDirection","appleConsumed","setAppleConsumed","generateApple","newApple","floor","moveSnake","newSnakePos","shift","nextCell","log","isOutOfScreen","push","keyHandler","key","window","addEventListener","removeEventListener","App","games","title","Game","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f213fc5.chunk.js","sourcesContent":["import styled from 'styled-components'\r\nexport const Button = styled.button`\r\n    padding: 5px;\r\n    width: fit-content;\r\n    margin: 10px;\r\n`\r\nexport const Result = styled.div`\r\n    padding: 10px;\r\n    border: 1px solid;\r\n    width: fit-content;\r\n    background: deepskyblue;\r\n    color: white;\r\n`\r\nexport const Title = styled.div`\r\n    padding: 10px;\r\n    text-align:center;\r\n    font-weight:bold;\r\n    text-transform:uppercase;\r\n`","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nconst Game = styled.div``\r\nconst Character = styled.div`\r\n    background-color:red;\r\n    height:70px;\r\n    width:40px;\r\n    position: absolute;\r\n    bottom:${({ bottom }) => bottom}px;\r\n    left:${({ left }) => left}px;\r\n`\r\nlet jumpTimer = null\r\nlet slideTimer = null\r\nconst JumpSlide = () => {\r\n    const gravity = 0.9\r\n    const [bottom, setBottom] = useState(0)        \r\n    const [jump, setJump] = useState(false)\r\n    const [left, setLeft] = useState(0)\r\n    const [slide, setSlide] = useState('')\r\n    const keyHandler = (e) => {\r\n        if (e.key === ' ' && bottom <= 0) setJump(true)\r\n        if (e.key === 'ArrowLeft') setSlide('LEFT')\r\n        else if (e.key === 'ArrowRight') setSlide('RIGHT')\r\n        else if(e.key === 'ArrowDown')setSlide('')\r\n    }\r\n    useEffect(() => {\r\n        // if (bottom) {\r\n            if (slide === 'RIGHT') {\r\n                clearTimeout(slideTimer)\r\n                slideTimer = setTimeout(() => {\r\n                    let newLeft = left + 5;\r\n                    setLeft(newLeft)\r\n                }, 20)\r\n                // if (bottom == 0) setSlide('')\r\n            }\r\n            else if (slide === 'LEFT') {\r\n                clearTimeout(slideTimer)\r\n                slideTimer= setTimeout(()=>{\r\n                    let newLeft = left - 5;\r\n                    setLeft(newLeft)\r\n                },20)\r\n                // if (bottom == 0) setSlide('')\r\n            } else {\r\n                setSlide('')\r\n                clearTimeout(slideTimer)\r\n            }\r\n        // } else {\r\n        //     setSlide('')\r\n        //     clearTimeout(slideTimer)\r\n        // }        \r\n    }, [slide, left, bottom])\r\n    useEffect(() => {\r\n        //going up\r\n        if (jump) {\r\n            console.error('going to jumping')\r\n            jumpTimer = setTimeout(() => {\r\n                let newBottom = bottom + 30;\r\n                newBottom *= gravity;\r\n                setBottom(newBottom);\r\n                console.error(bottom * gravity)\r\n            }, 20)\r\n            if (bottom > 250) {\r\n                clearTimeout(jumpTimer)\r\n                setJump(false)\r\n            }\r\n        } else if (bottom > 0) {\r\n            console.error('coming back')\r\n            jumpTimer = setTimeout(() => {\r\n                let newBottom = (bottom - 5) < 0 ? 0 : bottom - 5\r\n                setBottom(newBottom);\r\n            }, 20)\r\n        } else {\r\n            console.error('just clearing', bottom)\r\n            clearTimeout(jumpTimer)\r\n        }\r\n    }, [jump, bottom])\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', keyHandler)\r\n        return () => window.removeEventListener('keydown', keyHandler)\r\n    }, [bottom])\r\n    return (\r\n        <Game>\r\n            <Character bottom={bottom} left={left}/>\r\n        </Game>\r\n    )\r\n}\r\n\r\nexport default JumpSlide\r\n","export default __webpack_public_path__ + \"static/media/1.cbd5b7c2.jpg\";","export default __webpack_public_path__ + \"static/media/2.d99d27ed.jpg\";","export default __webpack_public_path__ + \"static/media/3.6cfda385.jpg\";","export default __webpack_public_path__ + \"static/media/4.49470c76.jpg\";","export default __webpack_public_path__ + \"static/media/5.76293903.jpg\";","export default __webpack_public_path__ + \"static/media/6.0e755c52.jpg\";","export default __webpack_public_path__ + \"static/media/7.92d90997.jpg\";","export default __webpack_public_path__ + \"static/media/8.3bebe736.jpg\";","import React, { useEffect, useState } from 'react'\r\nimport Image1 from 'assets/images/1.jpg'\r\nimport Image2 from 'assets/images/2.jpg'\r\nimport Image3 from 'assets/images/3.jpg'\r\nimport Image4 from 'assets/images/4.jpg'\r\nimport Image5 from 'assets/images/5.jpg'\r\nimport Image6 from 'assets/images/6.jpg'\r\nimport Image7 from 'assets/images/7.jpg'\r\nimport Image8 from 'assets/images/8.jpg'\r\nimport styled, { css } from 'styled-components'\r\nimport { Button, Result } from 'components/common'\r\n\r\nconst Container = styled.div``\r\nconst Grid = styled.div`\r\ndisplay:flex;\r\nflex-wrap:wrap;\r\nwidth: 400px;\r\n`\r\nconst Hide = css`\r\n    transform: rotateY(180deg);\r\n`\r\nconst Show = css`\r\n    transform: rotateY(0);\r\n`\r\nconst Card = styled.div`\r\n  position: relative;\r\n  width: 100px;\r\n  height: 100px;\r\n  text-align: center;\r\n  transition: transform 0.6s;\r\n  transform-style: preserve-3d;\r\n  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\r\n  ${({ hide }) => hide && Hide};\r\n  ${({ show }) => show && Show};\r\n`\r\nconst Layer = css`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  -webkit-backface-visibility: hidden;\r\n  backface-visibility: hidden;\r\n`\r\nconst Image = styled.img`\r\n  ${Layer};\r\n  left:0;\r\n`\r\nconst Fallback = styled.div`\r\n${Layer};\r\n  background-color: #2980b9;\r\n  color: white;\r\n  transform: rotateY(180deg);\r\n`\r\nconst Time = styled.div`\r\ntext-align:center;\r\npadding: 10px 0;\r\n`\r\nlet timer = null\r\nexport const MemoryGame = () => {\r\n    const [start, setStart] = useState(false)\r\n    const [imageArray, setImages] = useState(Array(16).fill({}));\r\n    const [hide, setHide] = useState(false);\r\n    const [visibleArray, setVisibleArray] = useState([]);\r\n    const [openPicture, setOpenPicture] = useState([]);\r\n    const [time, setTime] = useState(65);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const generateRandomImage = () => {\r\n        let randomImage = [{ path: Image1, id: 1 }, { path: Image2, id: 2 }, { path: Image3, id: 3 },\r\n        { path: Image4, id: 4 }, { path: Image5, id: 5 }, { path: Image6, id: 6 },\r\n        { path: Image7, id: 7 }, { path: Image8, id: 8 }];\r\n        randomImage = randomImage.concat(randomImage)\r\n        randomImage = randomImage.sort(() => Math.random() - 0.5);\r\n        setImages(randomImage)\r\n        setTimeout(() => setHide(true), 5000)\r\n    }\r\n    useEffect(() => {\r\n        if (start) {\r\n            setHide(false)\r\n            generateRandomImage()\r\n        } else {\r\n            setHide(true)\r\n            setTime(65)\r\n            setVisibleArray([])\r\n            setOpenPicture([])\r\n            setGameOver(false)\r\n            clearTimeout(timer)\r\n        }\r\n    }, [start])\r\n    useEffect(() => {\r\n        if (start && !gameOver) {\r\n            if (time) {\r\n                timer = setTimeout(() => {\r\n                    setTime(prev => prev - 1)\r\n                }, 1000)\r\n            } else {\r\n                setGameOver('GAME OVER')\r\n            }\r\n        }\r\n    }, [time, gameOver, start])\r\n\r\n    const isSameImage = ([index1, index2]) => imageArray[index1].id === imageArray[index2].id\r\n    useEffect(() => {\r\n        if (openPicture.length === 2) {\r\n            if (isSameImage(openPicture)) {\r\n                setVisibleArray(prev => [...prev, imageArray[openPicture[0]].id])\r\n                setOpenPicture([])\r\n            } else {\r\n                setTimeout(() => {\r\n                    setOpenPicture([])\r\n                }, 500)\r\n            }\r\n        } else if (visibleArray.length === 8) {\r\n            setGameOver('SUCCESS')\r\n            clearTimeout(timer)\r\n        }\r\n    }, [openPicture, visibleArray])\r\n    const clickHandler = (index) => {\r\n        if (openPicture.length < 2 && hide && !gameOver && start && !openPicture.includes(index))\r\n            setOpenPicture(prev => [...prev, index])\r\n    }\r\n    const stopGame = () => {\r\n        setStart(prev => !prev)\r\n    }\r\n    return (\r\n        <Container>\r\n            <Grid>\r\n                {imageArray.map(({ path, id }, index) => (\r\n                    <Card key={index} hide={hide} onClick={() => clickHandler(index)}\r\n                        show={openPicture.includes(index) || visibleArray.includes(id)}>\r\n                        <Image src={path} />\r\n                        <Fallback />\r\n                    </Card>))}\r\n            </Grid>\r\n            {start ? <Time>Remaining Time : {time}</Time> : ''}\r\n            <Button onClick={stopGame}>{start ? 'STOP' : 'START'}</Button>\r\n            {gameOver ? <Result>{gameOver} !!!<div>Your score : {visibleArray.length}</div></Result> : ''}\r\n        </Container>\r\n    )\r\n}","import { Button, Result } from 'components/common'\r\nimport React, { useEffect, useState } from 'react'\r\nimport styled, { css } from 'styled-components'\r\n\r\nconst Grid = styled.div`\r\nheight: 400px;\r\nwidth: 400px;\r\ndisplay:flex;\r\nflex-wrap:wrap;\r\nbackground:#115481;\r\nborder:1px solid;\r\n`\r\nconst Bomb = css`\r\n    background:orange;\r\n    font-size: 48px;\r\n`\r\nconst Open = css`\r\n    background:white;\r\n    color:black;\r\n    border: 3px inset #1C6EA4;\r\n`\r\nconst Empty = css`\r\n    background: #e1e1e1;\r\n    border-color:#b1b1b1;\r\n`\r\nconst Dash = css`\r\n    background: red;\r\n`\r\nconst Block = styled.div`\r\n    height: 40px;\r\n    width: 40px;\r\n    display:flex;\r\n    font-family:sans-serif;\r\n    align-items:center;\r\n    justify-content:center;\r\n    font-size:24px;\r\n    cursor:pointer;\r\n    box-sizing: border-box;\r\n    border: 6px outset #1C6EA4;    \r\n    color:white;\r\n    ${({ show }) => show && Open};\r\n    ${({ show, isBomb }) => show && isBomb && Bomb};\r\n    ${({ show, empty }) => show && empty && Empty};\r\n    ${({ dash }) => dash && Dash};\r\n`\r\n// const Result = styled.div`\r\n//     font-size: 24px;\r\n//     padding: 10px;\r\n// `\r\nconst Minesweeper = () => {\r\n    let width = 10;\r\n    let bombCount = 20;\r\n\r\n    const [squares, setSquares] = useState([])\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const startGame = () => {\r\n        setGameOver(false)\r\n        const bombsArray = Array(bombCount).fill({ value: '*' });\r\n        const emptyArray = Array((width * width) - bombCount).fill({ value: '' });\r\n        const gamesArray = [...emptyArray, ...bombsArray];\r\n        const shuffledArray = gamesArray.sort(() => Math.random() - 0.5)\r\n\r\n        for (let i = 0; i < shuffledArray.length; i++) {\r\n            let total = 0;\r\n            const isLeftEdge = (i % width === 0);\r\n            const isRightEdge = (i % width === width - 1);\r\n            // layout to check\r\n            // 7 8 9\r\n            // 4 _ 6\r\n            // 1 2 3\r\n            if (!shuffledArray[i].value) {\r\n                if (i > 0 && !isLeftEdge && shuffledArray[i - 1].value === '*') total++   //bomb at left (4)\r\n                if (i > 11 && !isLeftEdge && shuffledArray[i - 1 - width].value === '*') total++ //bomb at top left(7)                \r\n                if (i > 9 && shuffledArray[i - width].value === '*') total++ //bomb at top (8)\r\n                if (i > 9 && !isRightEdge && shuffledArray[i + 1 - width].value === '*') total++  //bomb at top right (9)\r\n                if (i < 99 && !isRightEdge && shuffledArray[i + 1].value === '*') total++ //bomb at right(6)                \r\n                if (i < 88 && !isRightEdge && shuffledArray[i + 1 + width].value === '*') total++ //bomb at right bottom(3)\r\n                if (i < 89 && shuffledArray[i + width].value === '*') total++ //bomb at bottom(2)\r\n                if (i < 90 && !isLeftEdge && shuffledArray[i - 1 + width].value === '*') total++ //bomb at left bottom(1)                \r\n                shuffledArray[i] = { value: total || '' };\r\n            }\r\n        }\r\n        setSquares(shuffledArray)\r\n    }\r\n    useEffect(startGame, [])\r\n    const clickHandler = (index) => {\r\n        if (gameOver || squares[index].show || squares[index].flag) return\r\n        if (squares[index].value === '*') {\r\n            let newSquares = [...squares]\r\n            newSquares[index] = { value: '*', dash: true };\r\n            setSquares(newSquares)\r\n            setGameOver(true)\r\n        } else {\r\n            let newSquares = [...squares]\r\n            newSquares[index].show = true;\r\n            setSquares(newSquares)\r\n            if (newSquares[index].value) {\r\n                return\r\n            }\r\n            checkSquares(index)\r\n        }\r\n    }\r\n    const isNotABomb = (cell) => cell.value !== '*'\r\n    const checkSquares = (index) => {\r\n        const isLeftEdge = (index % width === 0);\r\n        const isRightEdge = (index % width === width - 1);\r\n        console.error('initialized again')\r\n        let timer = setTimeout(() => {\r\n            if (index > 0 && !isLeftEdge) { //toward left\r\n                if (isNotABomb(squares[index - 1])) {\r\n                    clickHandler(index - 1)\r\n                }\r\n\r\n            }\r\n            if (index > 9 && !isRightEdge) { //toward upper right\r\n                if (isNotABomb(squares[index + 1 - width])) {\r\n                    clickHandler(index + 1 - width)\r\n                }\r\n\r\n            }\r\n            if (index > 10) { //toward up\r\n                if (isNotABomb(squares[index - width])) {\r\n                    clickHandler(index - width)\r\n                }\r\n\r\n            }\r\n            if (index > 11 && !isLeftEdge) {  //toward upper left\r\n                if (isNotABomb(squares[index - 1 - width])) {\r\n                    clickHandler(index - 1 - width)\r\n                }\r\n\r\n            }\r\n            if (index < 98 && !isRightEdge) { //toward right\r\n                if (isNotABomb(squares[index + 1])) {\r\n                    clickHandler(index + 1)\r\n                }\r\n\r\n            }\r\n            if (index < 90 && !isLeftEdge) { //toward lower left\r\n                if (isNotABomb(squares[index - 1 + width])) {\r\n                    clickHandler(index - 1 + width)\r\n                }\r\n\r\n            }\r\n            if (index < 88 && !isRightEdge) {\r\n                if (isNotABomb(squares[index + 1 + width])) {\r\n                    clickHandler(index + 1 + width)\r\n                }\r\n\r\n            }\r\n            if (index < 89) {\r\n                if (isNotABomb(squares[index + width])) {\r\n                    clickHandler(index + width)\r\n                }\r\n\r\n            }\r\n        }, 10)\r\n    }\r\n    useEffect(() => {\r\n        if (gameOver) {\r\n            let newSquares = [...squares].map(e => ({ ...e, show: true }))\r\n            console.error(newSquares)\r\n            setSquares(newSquares)\r\n        }\r\n    }, [gameOver])\r\n    return (\r\n        <div>\r\n            <Grid>\r\n                {squares.map(({ value, show, dash }, i) => <Block key={i}\r\n                    isBomb={value === '*'}\r\n                    dash={dash}\r\n                    show={show}\r\n                    empty={!value}\r\n                    onClick={() => clickHandler(i)}>{show ? value : ''}</Block>)}\r\n            </Grid>\r\n            <Button onClick={startGame}>(RE)START</Button>\r\n            {gameOver ? <Result>GAME OVER!!!</Result> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Minesweeper\r\n","import { useEffect, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { Button, Result } from 'components/common';\r\nconst Grid = styled.div`\r\nwidth: 400px;\r\ndisplay:flex;\r\nflex-wrap:wrap;\r\nbackground: #253243;\r\n`\r\nconst Snake = css`\r\nbackground:orange;\r\nborder-radius:50%;\r\n`\r\nconst Apple = css`\r\nbackground: lime;\r\nborder-radius:50%;\r\n`\r\nconst Box = styled.div`\r\nwidth:10px;\r\nheight:10px;\r\n${({ isSnake }) => isSnake && Snake};\r\n${({ isApple }) => isApple && Apple};\r\n`\r\nlet timer = null\r\nconst SnakeGame = () => {\r\n    const [snake, setSnake] = useState([0, 1, 2]);\r\n    const [apple, setApple] = useState('')\r\n    const [direction, setDirection] = useState(1)\r\n    const interval = 100;\r\n    const width = 40\r\n    const [appleConsumed, setAppleConsumed] = useState(0);\r\n    const [gameOver, setGameOver] = useState(false)\r\n    const generateApple = () => {\r\n        const newApple = Math.floor(Math.random() * 99);\r\n        if (snake.includes(newApple)) {\r\n            generateApple()\r\n        } else {\r\n            setApple(newApple)\r\n        }\r\n    }\r\n    const restartGame = () => {\r\n        setSnake([0, 1, 2])\r\n        setDirection(1)\r\n        setAppleConsumed(0)\r\n        setGameOver(false)\r\n        generateApple()\r\n    }\r\n    const stopGame = () => {\r\n        clearTimeout(timer)\r\n        setApple('')\r\n        window.removeEventListener('keydown', keyHandler)\r\n    }\r\n    const isSnakeBody = (value) => snake.includes(value) && snake[snake.length - 2] !== value && console.log(snake[snake.length - 2] !== value);\r\n    const isOutOfScreen = (value, direction) => {\r\n        if (direction == 1) {\r\n            return value % width === 0\r\n        } else if (direction === -1) {\r\n            return (value + 1) % width === 0\r\n        }\r\n        return value >= (width * width) || value < 0\r\n    }\r\n    const moveSnake = () => {\r\n        let newSnakePos = [...snake];\r\n        if (!appleConsumed) {\r\n            newSnakePos.shift();\r\n        } else {\r\n            setAppleConsumed(prev => prev - 1)\r\n        }\r\n        let nextCell = newSnakePos[newSnakePos.length - 1] + direction\r\n        if (isSnakeBody(nextCell) || isOutOfScreen(nextCell, direction)) {\r\n            setGameOver(true)\r\n            return\r\n        } else {\r\n            newSnakePos.push(nextCell)\r\n        }\r\n        if (newSnakePos.includes(apple)) {\r\n            setAppleConsumed(prev => prev + 1)\r\n            generateApple()\r\n        }\r\n        setSnake(newSnakePos)\r\n    }\r\n    useEffect(() => {\r\n        if(gameOver) {\r\n            clearTimeout(timer)\r\n            return\r\n        }\r\n        timer = setTimeout(() => {\r\n            if (gameOver) clearTimeout(timer)\r\n            if (apple !== '') moveSnake()\r\n        }, interval);\r\n        return () => clearTimeout(timer)\r\n    }, [snake, direction, appleConsumed, gameOver])\r\n    const keyHandler = (e) => {\r\n        switch (e.key) {\r\n            case \"ArrowRight\":\r\n                if (direction !== -1)\r\n                    setDirection(1);\r\n                break;\r\n            case \"ArrowLeft\":\r\n                if (direction !== 1)\r\n                    setDirection(-1);\r\n                break;\r\n            case \"ArrowUp\":\r\n                if (direction !== width)\r\n                    setDirection(-width);\r\n                break;\r\n            case \"ArrowDown\":\r\n                if (direction !== -width)\r\n                    setDirection(width);\r\n                break;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (!gameOver)\r\n            window.addEventListener('keydown', keyHandler)\r\n        return () => window.removeEventListener('keydown', keyHandler)\r\n    }, [direction, gameOver, snake])\r\n    return <div><Grid>\r\n        {[...new Array(width * width)].map((e, i) => <Box\r\n            isSnake={snake.includes(i)}\r\n            isApple={i === apple} ></Box>)}\r\n    </Grid>\r\n        <Button onClick={apple ? stopGame : restartGame}>{apple ? 'STOP' : 'START'}</Button>\r\n        {gameOver ? <Result>GAME OVER!!!\r\n            <div>your score : {snake.length - 3}</div>\r\n        </Result> : ''}\r\n    </div>\r\n}\r\n\r\nexport default SnakeGame\r\n","import { Title } from 'components/common';\r\nimport JumpSlide from 'games/JumpSlide';\r\nimport { MemoryGame } from 'games/MemoryGame';\r\nimport Minesweeper from 'games/Minesweeper';\r\nimport SnakeGame from 'games/SnakeGame';\r\nimport styled from 'styled-components';\r\n\r\nconst Grid = styled.div`\r\ndisplay:flex;\r\nflex-wrap:wrap;\r\nfont-family: sans-serif;\r\n>div{\r\n  margin: 10px;\r\n}\r\n`\r\nconst Container = styled.div`\r\n\r\n`\r\nconst App = () => {\r\n  const games = [\r\n    { title: 'Snake Game', Game: <SnakeGame/> },\r\n    { title: 'Minesweeper', Game: <Minesweeper/> },\r\n    // { title: 'Jump Slide', Game: <JumpSlide/> },\r\n    { title: 'Memory Game', Game: <MemoryGame/> }\r\n  ]\r\n  return (<Grid>\r\n    {games.map(({title,Game})=><Container key={title}><Title>{title}</Title>{Game}</Container>)}\r\n  </Grid>)\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}